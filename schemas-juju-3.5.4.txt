Action: 7
.Actions()
in: Entities
.entities[0]: Entity
.entities[0].tag: str
out: ActionResults
.results[0]: ActionResult
.results[0].action: Action
.results[0].action.execution-group: str
.results[0].action.name: str
.results[0].action.parallel: bool
.results[0].action.parameters["abc"]: dict[Any, Any]
.results[0].action.receiver: str
.results[0].action.tag: str
.results[0].completed: str
.results[0].enqueued: str
.results[0].error: Error
.results[0].error.code: str
.results[0].error.info["abc"]: dict[Any, Any]
.results[0].error.message: str
.results[0].log[0]: ActionMessage
.results[0].log[0].message: str
.results[0].log[0].timestamp: str
.results[0].message: str
.results[0].output["abc"]: dict[Any, Any]
.results[0].started: str
.results[0].status: str

Action: 7
.ApplicationsCharmsActions()
in: Entities
.entities[0]: Entity
.entities[0].tag: str
out: ApplicationsCharmActionsResults
.results[0]: ApplicationCharmActionsResult
.results[0].actions["abc"]: ActionSpec
.results[0].actions["abc"].description: str
.results[0].actions["abc"].params["abc"]: dict[Any, Any]
.results[0].application-tag: str
.results[0].error: Error
.results[0].error.code: str
.results[0].error.info["abc"]: dict[Any, Any]
.results[0].error.message: str

Action: 7
.Cancel()
in: Entities
.entities[0]: Entity
.entities[0].tag: str
out: ActionResults
.results[0]: ActionResult
.results[0].action: Action
.results[0].action.execution-group: str
.results[0].action.name: str
.results[0].action.parallel: bool
.results[0].action.parameters["abc"]: dict[Any, Any]
.results[0].action.receiver: str
.results[0].action.tag: str
.results[0].completed: str
.results[0].enqueued: str
.results[0].error: Error
.results[0].error.code: str
.results[0].error.info["abc"]: dict[Any, Any]
.results[0].error.message: str
.results[0].log[0]: ActionMessage
.results[0].log[0].message: str
.results[0].log[0].timestamp: str
.results[0].message: str
.results[0].output["abc"]: dict[Any, Any]
.results[0].started: str
.results[0].status: str

Action: 7
.EnqueueOperation()
in: Actions
.actions[0]: Action
.actions[0].execution-group: str
.actions[0].name: str
.actions[0].parallel: bool
.actions[0].parameters["abc"]: dict[Any, Any]
.actions[0].receiver: str
.actions[0].tag: str
out: EnqueuedActions
.actions[0]: ActionResult
.actions[0].action: Action
.actions[0].action.execution-group: str
.actions[0].action.name: str
.actions[0].action.parallel: bool
.actions[0].action.parameters["abc"]: dict[Any, Any]
.actions[0].action.receiver: str
.actions[0].action.tag: str
.actions[0].completed: str
.actions[0].enqueued: str
.actions[0].error: Error
.actions[0].error.code: str
.actions[0].error.info["abc"]: dict[Any, Any]
.actions[0].error.message: str
.actions[0].log[0]: ActionMessage
.actions[0].log[0].message: str
.actions[0].log[0].timestamp: str
.actions[0].message: str
.actions[0].output["abc"]: dict[Any, Any]
.actions[0].started: str
.actions[0].status: str
.operation: str

Action: 7
.ListOperations()
in: OperationQueryArgs
.actions[0]: str
.applications[0]: str
.limit: int
.machines[0]: str
.offset: int
.status[0]: str
.units[0]: str
out: OperationResults
.results[0]: OperationResult
.results[0].actions[0]: ActionResult
.results[0].actions[0].action: Action
.results[0].actions[0].action.execution-group: str
.results[0].actions[0].action.name: str
.results[0].actions[0].action.parallel: bool
.results[0].actions[0].action.parameters["abc"]: dict[Any, Any]
.results[0].actions[0].action.receiver: str
.results[0].actions[0].action.tag: str
.results[0].actions[0].completed: str
.results[0].actions[0].enqueued: str
.results[0].actions[0].error: Error
.results[0].actions[0].error.code: str
.results[0].actions[0].error.info["abc"]: dict[Any, Any]
.results[0].actions[0].error.message: str
.results[0].actions[0].log[0]: ActionMessage
.results[0].actions[0].log[0].message: str
.results[0].actions[0].log[0].timestamp: str
.results[0].actions[0].message: str
.results[0].actions[0].output["abc"]: dict[Any, Any]
.results[0].actions[0].started: str
.results[0].actions[0].status: str
.results[0].completed: str
.results[0].enqueued: str
.results[0].error: Error
.results[0].error.code: str
.results[0].error.info["abc"]: dict[Any, Any]
.results[0].error.message: str
.results[0].fail: str
.results[0].operation: str
.results[0].started: str
.results[0].status: str
.results[0].summary: str
.truncated: bool

Action: 7
.Operations()
in: Entities
.entities[0]: Entity
.entities[0].tag: str
out: OperationResults
.results[0]: OperationResult
.results[0].actions[0]: ActionResult
.results[0].actions[0].action: Action
.results[0].actions[0].action.execution-group: str
.results[0].actions[0].action.name: str
.results[0].actions[0].action.parallel: bool
.results[0].actions[0].action.parameters["abc"]: dict[Any, Any]
.results[0].actions[0].action.receiver: str
.results[0].actions[0].action.tag: str
.results[0].actions[0].completed: str
.results[0].actions[0].enqueued: str
.results[0].actions[0].error: Error
.results[0].actions[0].error.code: str
.results[0].actions[0].error.info["abc"]: dict[Any, Any]
.results[0].actions[0].error.message: str
.results[0].actions[0].log[0]: ActionMessage
.results[0].actions[0].log[0].message: str
.results[0].actions[0].log[0].timestamp: str
.results[0].actions[0].message: str
.results[0].actions[0].output["abc"]: dict[Any, Any]
.results[0].actions[0].started: str
.results[0].actions[0].status: str
.results[0].completed: str
.results[0].enqueued: str
.results[0].error: Error
.results[0].error.code: str
.results[0].error.info["abc"]: dict[Any, Any]
.results[0].error.message: str
.results[0].fail: str
.results[0].operation: str
.results[0].started: str
.results[0].status: str
.results[0].summary: str
.truncated: bool

Action: 7
.Run()
in: RunParams
.applications[0]: str
.commands: str
.execution-group: str
.machines[0]: str
.parallel: bool
.timeout: int
.units[0]: str
.workload-context: bool
out: EnqueuedActions
.actions[0]: ActionResult
.actions[0].action: Action
.actions[0].action.execution-group: str
.actions[0].action.name: str
.actions[0].action.parallel: bool
.actions[0].action.parameters["abc"]: dict[Any, Any]
.actions[0].action.receiver: str
.actions[0].action.tag: str
.actions[0].completed: str
.actions[0].enqueued: str
.actions[0].error: Error
.actions[0].error.code: str
.actions[0].error.info["abc"]: dict[Any, Any]
.actions[0].error.message: str
.actions[0].log[0]: ActionMessage
.actions[0].log[0].message: str
.actions[0].log[0].timestamp: str
.actions[0].message: str
.actions[0].output["abc"]: dict[Any, Any]
.actions[0].started: str
.actions[0].status: str
.operation: str

Action: 7
.RunOnAllMachines()
in: RunParams
.applications[0]: str
.commands: str
.execution-group: str
.machines[0]: str
.parallel: bool
.timeout: int
.units[0]: str
.workload-context: bool
out: EnqueuedActions
.actions[0]: ActionResult
.actions[0].action: Action
.actions[0].action.execution-group: str
.actions[0].action.name: str
.actions[0].action.parallel: bool
.actions[0].action.parameters["abc"]: dict[Any, Any]
.actions[0].action.receiver: str
.actions[0].action.tag: str
.actions[0].completed: str
.actions[0].enqueued: str
.actions[0].error: Error
.actions[0].error.code: str
.actions[0].error.info["abc"]: dict[Any, Any]
.actions[0].error.message: str
.actions[0].log[0]: ActionMessage
.actions[0].log[0].message: str
.actions[0].log[0].timestamp: str
.actions[0].message: str
.actions[0].output["abc"]: dict[Any, Any]
.actions[0].started: str
.actions[0].status: str
.operation: str

Action: 7
.WatchActionsProgress()
in: Entities
.entities[0]: Entity
.entities[0].tag: str
out: StringsWatchResults
.results[0]: StringsWatchResult
.results[0].changes[0]: str
.results[0].error: Error
.results[0].error.code: str
.results[0].error.info["abc"]: dict[Any, Any]
.results[0].error.message: str
.results[0].watcher-id: str

ActionPruner: 1
.ModelConfig()
in: None
out: ModelConfigResult
.config["abc"]: dict[Any, Any]

ActionPruner: 1
.Prune()
in: ActionPruneArgs
.max-history-mb: int
.max-history-time: int
out: None

ActionPruner: 1
.WatchForModelConfigChanges()
in: None
out: NotifyWatchResult
.NotifyWatcherId: str
.error: Error
.error.code: str
.error.info["abc"]: dict[Any, Any]
.error.message: str

Admin: 3
.Login()
in: LoginRequest
.auth-tag: str
.bakery-version: int
.cli-args: str
.client-version: str
.credentials: str
.macaroons[0][0]: Macaroon
.macaroons[0][0]: dict[Any, Any]
.nonce: str
.token: str
.user-data: str
out: LoginResult
.bakery-discharge-required: Macaroon
.bakery-discharge-required: dict[Any, Any]
.controller-tag: str
.discharge-required: Macaroon
.discharge-required: dict[Any, Any]
.discharge-required-error: str
.facades[0]: FacadeVersions
.facades[0].name: str
.facades[0].versions[0]: int
.model-tag: str
.public-dns-name: str
.server-version: str
.servers[0][0]: HostPort
.servers[0][0].Address: Address
.servers[0][0].Address.cidr: str
.servers[0][0].Address.config-type: str
.servers[0][0].Address.is-secondary: bool
.servers[0][0].Address.scope: str
.servers[0][0].Address.space-id: str
.servers[0][0].Address.space-name: str
.servers[0][0].Address.type: str
.servers[0][0].Address.value: str
.servers[0][0].cidr: str
.servers[0][0].config-type: str
.servers[0][0].is-secondary: bool
.servers[0][0].port: int
.servers[0][0].scope: str
.servers[0][0].space-id: str
.servers[0][0].space-name: str
.servers[0][0].type: str
.servers[0][0].value: str
.user-info: AuthUserInfo
.user-info.controller-access: str
.user-info.credentials: str
.user-info.display-name: str
.user-info.identity: str
.user-info.last-connection: str
.user-info.model-access: str

Admin: 3
.RedirectInfo()
in: None
out: RedirectInfoResult
.ca-cert: str
.servers[0][0]: HostPort
.servers[0][0].Address: Address
.servers[0][0].Address.cidr: str
.servers[0][0].Address.config-type: str
.servers[0][0].Address.is-secondary: bool
.servers[0][0].Address.scope: str
.servers[0][0].Address.space-id: str
.servers[0][0].Address.space-name: str
.servers[0][0].Address.type: str
.servers[0][0].Address.value: str
.servers[0][0].cidr: str
.servers[0][0].config-type: str
.servers[0][0].is-secondary: bool
.servers[0][0].port: int
.servers[0][0].scope: str
.servers[0][0].space-id: str
.servers[0][0].space-name: str
.servers[0][0].type: str
.servers[0][0].value: str

AgentLifeFlag: 1
.Life()
in: Entities
.entities[0]: Entity
.entities[0].tag: str
out: LifeResults
.results[0]: LifeResult
.results[0].error: Error
.results[0].error.code: str
.results[0].error.info["abc"]: dict[Any, Any]
.results[0].error.message: str
.results[0].life: str

AgentLifeFlag: 1
.Watch()
in: Entities
.entities[0]: Entity
.entities[0].tag: str
out: NotifyWatchResults
.results[0]: NotifyWatchResult
.results[0].NotifyWatcherId: str
.results[0].error: Error
.results[0].error.code: str
.results[0].error.info["abc"]: dict[Any, Any]
.results[0].error.message: str

AgentTools: 1
.UpdateToolsAvailable()
in: None
out: None

AllWatcher: 3
.Next()
in: None
out: AllWatcherNextResults
.deltas[0]: Delta
.deltas[0].entity: dict[Any, Any]
.deltas[0].removed: bool

AllWatcher: 3
.Stop()
in: None
out: None

Annotations: 2
.Get()
in: Entities
.entities[0]: Entity
.entities[0].tag: str
out: AnnotationsGetResults
.results[0]: AnnotationsGetResult
.results[0].annotations["abc"]: str
.results[0].entity: str
.results[0].error: ErrorResult
.results[0].error.error: Error
.results[0].error.error.code: str
.results[0].error.error.info["abc"]: dict[Any, Any]
.results[0].error.error.message: str

Annotations: 2
.Set()
in: AnnotationsSet
.annotations[0]: EntityAnnotations
.annotations[0].annotations["abc"]: str
.annotations[0].entity: str
out: ErrorResults
.results[0]: ErrorResult
.results[0].error: Error
.results[0].error.code: str
.results[0].error.info["abc"]: dict[Any, Any]
.results[0].error.message: str

Application: 20
.AddRelation()
in: AddRelation
.endpoints[0]: str
.via-cidrs[0]: str
out: AddRelationResults
.endpoints["abc"]: CharmRelation
.endpoints["abc"].interface: str
.endpoints["abc"].limit: int
.endpoints["abc"].name: str
.endpoints["abc"].optional: bool
.endpoints["abc"].role: str
.endpoints["abc"].scope: str

Application: 20
.AddUnits()
in: AddApplicationUnits
.application: str
.attach-storage[0]: str
.num-units: int
.placement[0]: Placement
.placement[0].directive: str
.placement[0].scope: str
.policy: str
out: AddApplicationUnitsResults
.units[0]: str

Application: 20
.ApplicationsInfo()
in: Entities
.entities[0]: Entity
.entities[0].tag: str
out: ApplicationInfoResults
.results[0]: ApplicationInfoResult
.results[0].error: Error
.results[0].error.code: str
.results[0].error.info["abc"]: dict[Any, Any]
.results[0].error.message: str
.results[0].result: ApplicationResult
.results[0].result.base: Base
.results[0].result.base.channel: str
.results[0].result.base.name: str
.results[0].result.channel: str
.results[0].result.charm: str
.results[0].result.constraints: Value
.results[0].result.constraints.allocate-public-ip: bool
.results[0].result.constraints.arch: str
.results[0].result.constraints.container: str
.results[0].result.constraints.cores: int
.results[0].result.constraints.cpu-power: int
.results[0].result.constraints.image-id: str
.results[0].result.constraints.instance-role: str
.results[0].result.constraints.instance-type: str
.results[0].result.constraints.mem: int
.results[0].result.constraints.root-disk: int
.results[0].result.constraints.root-disk-source: str
.results[0].result.constraints.spaces[0]: str
.results[0].result.constraints.tags[0]: str
.results[0].result.constraints.virt-type: str
.results[0].result.constraints.zones[0]: str
.results[0].result.endpoint-bindings["abc"]: str
.results[0].result.exposed: bool
.results[0].result.exposed-endpoints["abc"]: ExposedEndpoint
.results[0].result.exposed-endpoints["abc"].expose-to-cidrs[0]: str
.results[0].result.exposed-endpoints["abc"].expose-to-spaces[0]: str
.results[0].result.life: str
.results[0].result.principal: bool
.results[0].result.remote: bool
.results[0].result.tag: str

Application: 20
.CharmConfig()
in: ApplicationGetArgs
.args[0]: ApplicationGet
.args[0].application: str
.args[0].branch: str
out: ApplicationGetConfigResults
.Results[0]: ConfigResult
.Results[0].config["abc"]: dict[Any, Any]
.Results[0].error: Error
.Results[0].error.code: str
.Results[0].error.info["abc"]: dict[Any, Any]
.Results[0].error.message: str

Application: 20
.CharmRelations()
in: ApplicationCharmRelations
.application: str
out: ApplicationCharmRelationsResults
.charm-relations[0]: str

Application: 20
.Consume()
in: ConsumeApplicationArgsV5
.args[0]: ConsumeApplicationArgV5
.args[0].ApplicationOfferDetailsV5: ApplicationOfferDetailsV5
.args[0].ApplicationOfferDetailsV5.application-description: str
.args[0].ApplicationOfferDetailsV5.endpoints[0]: RemoteEndpoint
.args[0].ApplicationOfferDetailsV5.endpoints[0].interface: str
.args[0].ApplicationOfferDetailsV5.endpoints[0].limit: int
.args[0].ApplicationOfferDetailsV5.endpoints[0].name: str
.args[0].ApplicationOfferDetailsV5.endpoints[0].role: str
.args[0].ApplicationOfferDetailsV5.offer-name: str
.args[0].ApplicationOfferDetailsV5.offer-url: str
.args[0].ApplicationOfferDetailsV5.offer-uuid: str
.args[0].ApplicationOfferDetailsV5.source-model-tag: str
.args[0].ApplicationOfferDetailsV5.users[0]: OfferUserDetails
.args[0].ApplicationOfferDetailsV5.users[0].access: str
.args[0].ApplicationOfferDetailsV5.users[0].display-name: str
.args[0].ApplicationOfferDetailsV5.users[0].user: str
.args[0].application-alias: str
.args[0].application-description: str
.args[0].endpoints[0]: RemoteEndpoint
.args[0].endpoints[0].interface: str
.args[0].endpoints[0].limit: int
.args[0].endpoints[0].name: str
.args[0].endpoints[0].role: str
.args[0].external-controller: ExternalControllerInfo
.args[0].external-controller.addrs[0]: str
.args[0].external-controller.ca-cert: str
.args[0].external-controller.controller-alias: str
.args[0].external-controller.controller-tag: str
.args[0].macaroon: Macaroon
.args[0].macaroon: dict[Any, Any]
.args[0].offer-name: str
.args[0].offer-url: str
.args[0].offer-uuid: str
.args[0].source-model-tag: str
.args[0].users[0]: OfferUserDetails
.args[0].users[0].access: str
.args[0].users[0].display-name: str
.args[0].users[0].user: str
out: ErrorResults
.results[0]: ErrorResult
.results[0].error: Error
.results[0].error.code: str
.results[0].error.info["abc"]: dict[Any, Any]
.results[0].error.message: str

Application: 20
.Deploy()
in: ApplicationsDeploy
.applications[0]: ApplicationDeploy
.applications[0].Force: bool
.applications[0].application: str
.applications[0].attach-storage[0]: str
.applications[0].channel: str
.applications[0].charm-origin: CharmOrigin
.applications[0].charm-origin.architecture: str
.applications[0].charm-origin.base: Base
.applications[0].charm-origin.base.channel: str
.applications[0].charm-origin.base.name: str
.applications[0].charm-origin.branch: str
.applications[0].charm-origin.hash: str
.applications[0].charm-origin.id: str
.applications[0].charm-origin.instance-key: str
.applications[0].charm-origin.revision: int
.applications[0].charm-origin.risk: str
.applications[0].charm-origin.source: str
.applications[0].charm-origin.track: str
.applications[0].charm-origin.type: str
.applications[0].charm-url: str
.applications[0].config["abc"]: str
.applications[0].config-yaml: str
.applications[0].constraints: Value
.applications[0].constraints.allocate-public-ip: bool
.applications[0].constraints.arch: str
.applications[0].constraints.container: str
.applications[0].constraints.cores: int
.applications[0].constraints.cpu-power: int
.applications[0].constraints.image-id: str
.applications[0].constraints.instance-role: str
.applications[0].constraints.instance-type: str
.applications[0].constraints.mem: int
.applications[0].constraints.root-disk: int
.applications[0].constraints.root-disk-source: str
.applications[0].constraints.spaces[0]: str
.applications[0].constraints.tags[0]: str
.applications[0].constraints.virt-type: str
.applications[0].constraints.zones[0]: str
.applications[0].devices["abc"]: Constraints
.applications[0].devices["abc"].Count: int
.applications[0].devices["abc"].Pool: str
.applications[0].devices["abc"].Size: int
.applications[0].endpoint-bindings["abc"]: str
.applications[0].num-units: int
.applications[0].placement[0]: Placement
.applications[0].placement[0].directive: str
.applications[0].placement[0].scope: str
.applications[0].policy: str
.applications[0].resources["abc"]: str
.applications[0].storage["abc"]: Constraints
.applications[0].storage["abc"].Count: int
.applications[0].storage["abc"].Pool: str
.applications[0].storage["abc"].Size: int
out: ErrorResults
.results[0]: ErrorResult
.results[0].error: Error
.results[0].error.code: str
.results[0].error.info["abc"]: dict[Any, Any]
.results[0].error.message: str

Application: 20
.DeployFromRepository()
in: DeployFromRepositoryArgs
.Args[0]: DeployFromRepositoryArg
.Args[0].ApplicationName: str
.Args[0].AttachStorage[0]: str
.Args[0].CharmName: str
.Args[0].ConfigYAML: str
.Args[0].Cons: Value
.Args[0].Cons.allocate-public-ip: bool
.Args[0].Cons.arch: str
.Args[0].Cons.container: str
.Args[0].Cons.cores: int
.Args[0].Cons.cpu-power: int
.Args[0].Cons.image-id: str
.Args[0].Cons.instance-role: str
.Args[0].Cons.instance-type: str
.Args[0].Cons.mem: int
.Args[0].Cons.root-disk: int
.Args[0].Cons.root-disk-source: str
.Args[0].Cons.spaces[0]: str
.Args[0].Cons.tags[0]: str
.Args[0].Cons.virt-type: str
.Args[0].Cons.zones[0]: str
.Args[0].Devices["abc"]: Constraints
.Args[0].Devices["abc"].Count: int
.Args[0].Devices["abc"].Pool: str
.Args[0].Devices["abc"].Size: int
.Args[0].DryRun: bool
.Args[0].Placement[0]: Placement
.Args[0].Placement[0].directive: str
.Args[0].Placement[0].scope: str
.Args[0].Storage["abc"]: Constraints
.Args[0].Storage["abc"].Count: int
.Args[0].Storage["abc"].Pool: str
.Args[0].Storage["abc"].Size: int
.Args[0].Trust: bool
.Args[0].base: Base
.Args[0].base.channel: str
.Args[0].base.name: str
.Args[0].channel: str
.Args[0].endpoint-bindings["abc"]: str
.Args[0].force: bool
.Args[0].num-units: int
.Args[0].resources["abc"]: str
.Args[0].revision: int
out: DeployFromRepositoryResults
.Results[0]: DeployFromRepositoryResult
.Results[0].Errors[0]: Error
.Results[0].Errors[0].code: str
.Results[0].Errors[0].info["abc"]: dict[Any, Any]
.Results[0].Errors[0].message: str
.Results[0].Info: DeployFromRepositoryInfo
.Results[0].Info.architecture: str
.Results[0].Info.base: Base
.Results[0].Info.base.channel: str
.Results[0].Info.base.name: str
.Results[0].Info.channel: str
.Results[0].Info.effective-channel: str
.Results[0].Info.name: str
.Results[0].Info.revision: int
.Results[0].PendingResourceUploads[0]: PendingResourceUpload
.Results[0].PendingResourceUploads[0].Filename: str
.Results[0].PendingResourceUploads[0].Name: str
.Results[0].PendingResourceUploads[0].Type: str

Application: 20
.DestroyApplication()
in: DestroyApplicationsParams
.applications[0]: DestroyApplicationParams
.applications[0].application-tag: str
.applications[0].destroy-storage: bool
.applications[0].dry-run: bool
.applications[0].force: bool
.applications[0].max-wait: int
out: DestroyApplicationResults
.results[0]: DestroyApplicationResult
.results[0].error: Error
.results[0].error.code: str
.results[0].error.info["abc"]: dict[Any, Any]
.results[0].error.message: str
.results[0].info: DestroyApplicationInfo
.results[0].info.destroyed-storage[0]: Entity
.results[0].info.destroyed-storage[0].tag: str
.results[0].info.destroyed-units[0]: Entity
.results[0].info.destroyed-units[0].tag: str
.results[0].info.detached-storage[0]: Entity
.results[0].info.detached-storage[0].tag: str

Application: 20
.DestroyConsumedApplications()
in: DestroyConsumedApplicationsParams
.applications[0]: DestroyConsumedApplicationParams
.applications[0].application-tag: str
.applications[0].force: bool
.applications[0].max-wait: int
out: ErrorResults
.results[0]: ErrorResult
.results[0].error: Error
.results[0].error.code: str
.results[0].error.info["abc"]: dict[Any, Any]
.results[0].error.message: str

Application: 20
.DestroyRelation()
in: DestroyRelation
.endpoints[0]: str
.force: bool
.max-wait: int
.relation-id: int
out: None

Application: 20
.DestroyUnit()
in: DestroyUnitsParams
.units[0]: DestroyUnitParams
.units[0].destroy-storage: bool
.units[0].dry-run: bool
.units[0].force: bool
.units[0].max-wait: int
.units[0].unit-tag: str
out: DestroyUnitResults
.results[0]: DestroyUnitResult
.results[0].error: Error
.results[0].error.code: str
.results[0].error.info["abc"]: dict[Any, Any]
.results[0].error.message: str
.results[0].info: DestroyUnitInfo
.results[0].info.destroyed-storage[0]: Entity
.results[0].info.destroyed-storage[0].tag: str
.results[0].info.detached-storage[0]: Entity
.results[0].info.detached-storage[0].tag: str

Application: 20
.Expose()
in: ApplicationExpose
.application: str
.exposed-endpoints["abc"]: ExposedEndpoint
.exposed-endpoints["abc"].expose-to-cidrs[0]: str
.exposed-endpoints["abc"].expose-to-spaces[0]: str
out: None

Application: 20
.Get()
in: ApplicationGet
.application: str
.branch: str
out: ApplicationGetResults
.application: str
.application-config["abc"]: dict[Any, Any]
.base: Base
.base.channel: str
.base.name: str
.channel: str
.charm: str
.config["abc"]: dict[Any, Any]
.constraints: Value
.constraints.allocate-public-ip: bool
.constraints.arch: str
.constraints.container: str
.constraints.cores: int
.constraints.cpu-power: int
.constraints.image-id: str
.constraints.instance-role: str
.constraints.instance-type: str
.constraints.mem: int
.constraints.root-disk: int
.constraints.root-disk-source: str
.constraints.spaces[0]: str
.constraints.tags[0]: str
.constraints.virt-type: str
.constraints.zones[0]: str
.endpoint-bindings["abc"]: str

Application: 20
.GetCharmURLOrigin()
in: ApplicationGet
.application: str
.branch: str
out: CharmURLOriginResult
.charm-origin: CharmOrigin
.charm-origin.architecture: str
.charm-origin.base: Base
.charm-origin.base.channel: str
.charm-origin.base.name: str
.charm-origin.branch: str
.charm-origin.hash: str
.charm-origin.id: str
.charm-origin.instance-key: str
.charm-origin.revision: int
.charm-origin.risk: str
.charm-origin.source: str
.charm-origin.track: str
.charm-origin.type: str
.error: Error
.error.code: str
.error.info["abc"]: dict[Any, Any]
.error.message: str
.url: str

Application: 20
.GetConfig()
in: Entities
.entities[0]: Entity
.entities[0].tag: str
out: ApplicationGetConfigResults
.Results[0]: ConfigResult
.Results[0].config["abc"]: dict[Any, Any]
.Results[0].error: Error
.Results[0].error.code: str
.Results[0].error.info["abc"]: dict[Any, Any]
.Results[0].error.message: str

Application: 20
.GetConstraints()
in: Entities
.entities[0]: Entity
.entities[0].tag: str
out: ApplicationGetConstraintsResults
.results[0]: ApplicationConstraint
.results[0].constraints: Value
.results[0].constraints.allocate-public-ip: bool
.results[0].constraints.arch: str
.results[0].constraints.container: str
.results[0].constraints.cores: int
.results[0].constraints.cpu-power: int
.results[0].constraints.image-id: str
.results[0].constraints.instance-role: str
.results[0].constraints.instance-type: str
.results[0].constraints.mem: int
.results[0].constraints.root-disk: int
.results[0].constraints.root-disk-source: str
.results[0].constraints.spaces[0]: str
.results[0].constraints.tags[0]: str
.results[0].constraints.virt-type: str
.results[0].constraints.zones[0]: str
.results[0].error: Error
.results[0].error.code: str
.results[0].error.info["abc"]: dict[Any, Any]
.results[0].error.message: str

Application: 20
.Leader()
in: Entity
.tag: str
out: StringResult
.error: Error
.error.code: str
.error.info["abc"]: dict[Any, Any]
.error.message: str
.result: str

Application: 20
.MergeBindings()
in: ApplicationMergeBindingsArgs
.args[0]: ApplicationMergeBindings
.args[0].application-tag: str
.args[0].bindings["abc"]: str
.args[0].force: bool
out: ErrorResults
.results[0]: ErrorResult
.results[0].error: Error
.results[0].error.code: str
.results[0].error.info["abc"]: dict[Any, Any]
.results[0].error.message: str

Application: 20
.ResolveUnitErrors()
in: UnitsResolved
.all: bool
.retry: bool
.tags: Entities
.tags.entities[0]: Entity
.tags.entities[0].tag: str
out: ErrorResults
.results[0]: ErrorResult
.results[0].error: Error
.results[0].error.code: str
.results[0].error.info["abc"]: dict[Any, Any]
.results[0].error.message: str

Application: 20
.ScaleApplications()
in: ScaleApplicationsParams
.applications[0]: ScaleApplicationParams
.applications[0].application-tag: str
.applications[0].force: bool
.applications[0].scale: int
.applications[0].scale-change: int
out: ScaleApplicationResults
.results[0]: ScaleApplicationResult
.results[0].error: Error
.results[0].error.code: str
.results[0].error.info["abc"]: dict[Any, Any]
.results[0].error.message: str
.results[0].info: ScaleApplicationInfo
.results[0].info.num-units: int

Application: 20
.SetCharm()
in: ApplicationSetCharm
.application: str
.channel: str
.charm-origin: CharmOrigin
.charm-origin.architecture: str
.charm-origin.base: Base
.charm-origin.base.channel: str
.charm-origin.base.name: str
.charm-origin.branch: str
.charm-origin.hash: str
.charm-origin.id: str
.charm-origin.instance-key: str
.charm-origin.revision: int
.charm-origin.risk: str
.charm-origin.source: str
.charm-origin.track: str
.charm-origin.type: str
.charm-url: str
.config-settings["abc"]: str
.config-settings-yaml: str
.endpoint-bindings["abc"]: str
.force: bool
.force-base: bool
.force-units: bool
.generation: str
.resource-ids["abc"]: str
.storage-constraints["abc"]: StorageConstraints
.storage-constraints["abc"].count: int
.storage-constraints["abc"].pool: str
.storage-constraints["abc"].size: int
out: None

Application: 20
.SetConfigs()
in: ConfigSetArgs
.Args[0]: ConfigSet
.Args[0].application: str
.Args[0].config["abc"]: str
.Args[0].config-yaml: str
.Args[0].generation: str
out: ErrorResults
.results[0]: ErrorResult
.results[0].error: Error
.results[0].error.code: str
.results[0].error.info["abc"]: dict[Any, Any]
.results[0].error.message: str

Application: 20
.SetConstraints()
in: SetConstraints
.application: str
.constraints: Value
.constraints.allocate-public-ip: bool
.constraints.arch: str
.constraints.container: str
.constraints.cores: int
.constraints.cpu-power: int
.constraints.image-id: str
.constraints.instance-role: str
.constraints.instance-type: str
.constraints.mem: int
.constraints.root-disk: int
.constraints.root-disk-source: str
.constraints.spaces[0]: str
.constraints.tags[0]: str
.constraints.virt-type: str
.constraints.zones[0]: str
out: None

Application: 20
.SetMetricCredentials()
in: ApplicationMetricCredentials
.creds[0]: ApplicationMetricCredential
.creds[0].application: str
.creds[0].metrics-credentials[0]: int
out: ErrorResults
.results[0]: ErrorResult
.results[0].error: Error
.results[0].error.code: str
.results[0].error.info["abc"]: dict[Any, Any]
.results[0].error.message: str

Application: 20
.SetRelationsSuspended()
in: RelationSuspendedArgs
.args[0]: RelationSuspendedArg
.args[0].message: str
.args[0].relation-id: int
.args[0].suspended: bool
out: ErrorResults
.results[0]: ErrorResult
.results[0].error: Error
.results[0].error.code: str
.results[0].error.info["abc"]: dict[Any, Any]
.results[0].error.message: str

Application: 20
.Unexpose()
in: ApplicationUnexpose
.application: str
.exposed-endpoints[0]: str
out: None

Application: 20
.UnitsInfo()
in: Entities
.entities[0]: Entity
.entities[0].tag: str
out: UnitInfoResults
.results[0]: UnitInfoResult
.results[0].error: Error
.results[0].error.code: str
.results[0].error.info["abc"]: dict[Any, Any]
.results[0].error.message: str
.results[0].result: UnitResult
.results[0].result.address: str
.results[0].result.charm: str
.results[0].result.leader: bool
.results[0].result.life: str
.results[0].result.machine: str
.results[0].result.opened-ports[0]: str
.results[0].result.provider-id: str
.results[0].result.public-address: str
.results[0].result.relation-data[0]: EndpointRelationData
.results[0].result.relation-data[0].ApplicationData["abc"]: dict[Any, Any]
.results[0].result.relation-data[0].cross-model: bool
.results[0].result.relation-data[0].endpoint: str
.results[0].result.relation-data[0].related-endpoint: str
.results[0].result.relation-data[0].relation-id: int
.results[0].result.relation-data[0].unit-relation-data["abc"]: RelationData
.results[0].result.relation-data[0].unit-relation-data["abc"].InScope: bool
.results[0].result.relation-data[0].unit-relation-data["abc"].UnitData["abc"]: dict[Any, Any]
.results[0].result.tag: str
.results[0].result.workload-version: str

Application: 20
.UnsetApplicationsConfig()
in: ApplicationConfigUnsetArgs
.Args[0]: ApplicationUnset
.Args[0].application: str
.Args[0].branch: str
.Args[0].options[0]: str
out: ErrorResults
.results[0]: ErrorResult
.results[0].error: Error
.results[0].error.code: str
.results[0].error.info["abc"]: dict[Any, Any]
.results[0].error.message: str

Application: 20
.UpdateApplicationBase()
in: UpdateChannelArgs
.args[0]: UpdateChannelArg
.args[0].channel: str
.args[0].force: bool
.args[0].tag: Entity
.args[0].tag.tag: str
out: ErrorResults
.results[0]: ErrorResult
.results[0].error: Error
.results[0].error.code: str
.results[0].error.info["abc"]: dict[Any, Any]
.results[0].error.message: str

Backups: 3
.Create()
in: BackupsCreateArgs
.no-download: bool
.notes: str
out: BackupsMetadataResult
.base: str
.checksum: str
.checksum-format: str
.controller-machine-id: str
.controller-machine-inst-id: str
.controller-uuid: str
.filename: str
.finished: str
.format-version: int
.ha-nodes: int
.hostname: str
.id: str
.machine: str
.model: str
.notes: str
.size: int
.started: str
.stored: str
.version: Number
.version.Build: int
.version.Major: int
.version.Minor: int
.version.Patch: int
.version.Tag: str

Block: 2
.List()
in: None
out: BlockResults
.results[0]: BlockResult
.results[0].error: Error
.results[0].error.code: str
.results[0].error.info["abc"]: dict[Any, Any]
.results[0].error.message: str
.results[0].result: Block
.results[0].result.id: str
.results[0].result.message: str
.results[0].result.tag: str
.results[0].result.type: str

Block: 2
.SwitchBlockOff()
in: BlockSwitchParams
.message: str
.type: str
out: ErrorResult
.error: Error
.error.code: str
.error.info["abc"]: dict[Any, Any]
.error.message: str

Block: 2
.SwitchBlockOn()
in: BlockSwitchParams
.message: str
.type: str
out: ErrorResult
.error: Error
.error.code: str
.error.info["abc"]: dict[Any, Any]
.error.message: str

Bundle: 6
.ExportBundle()
in: ExportBundleParams
.include-charm-defaults: bool
.include-series: bool
out: StringResult
.error: Error
.error.code: str
.error.info["abc"]: dict[Any, Any]
.error.message: str
.result: str

Bundle: 6
.GetChanges()
in: BundleChangesParams
.bundleURL: str
.yaml: str
out: BundleChangesResults
.changes[0]: BundleChange
.changes[0].args[0]: dict[Any, Any]
.changes[0].id: str
.changes[0].method: str
.changes[0].requires[0]: str
.errors[0]: str

Bundle: 6
.GetChangesMapArgs()
in: BundleChangesParams
.bundleURL: str
.yaml: str
out: BundleChangesMapArgsResults
.changes[0]: BundleChangesMapArgs
.changes[0].args["abc"]: dict[Any, Any]
.changes[0].id: str
.changes[0].method: str
.changes[0].requires[0]: str
.errors[0]: str

CAASAgent: 2
.CloudSpec()
in: Entities
.entities[0]: Entity
.entities[0].tag: str
out: CloudSpecResults
.results[0]: CloudSpecResult
.results[0].error: Error
.results[0].error.code: str
.results[0].error.info["abc"]: dict[Any, Any]
.results[0].error.message: str
.results[0].result: CloudSpec
.results[0].result.cacertificates[0]: str
.results[0].result.credential: CloudCredential
.results[0].result.credential.attrs["abc"]: str
.results[0].result.credential.auth-type: str
.results[0].result.credential.redacted[0]: str
.results[0].result.endpoint: str
.results[0].result.identity-endpoint: str
.results[0].result.is-controller-cloud: bool
.results[0].result.name: str
.results[0].result.region: str
.results[0].result.skip-tls-verify: bool
.results[0].result.storage-endpoint: str
.results[0].result.type: str

CAASAgent: 2
.ControllerAPIInfoForModels()
in: Entities
.entities[0]: Entity
.entities[0].tag: str
out: ControllerAPIInfoResults
.results[0]: ControllerAPIInfoResult
.results[0].addresses[0]: str
.results[0].cacert: str
.results[0].error: Error
.results[0].error.code: str
.results[0].error.info["abc"]: dict[Any, Any]
.results[0].error.message: str

CAASAgent: 2
.ControllerConfig()
in: None
out: ControllerConfigResult
.config["abc"]: dict[Any, Any]

CAASAgent: 2
.GetCloudSpec()
in: ModelTag
: dict[Any, Any]
out: CloudSpecResult
.error: Error
.error.code: str
.error.info["abc"]: dict[Any, Any]
.error.message: str
.result: CloudSpec
.result.cacertificates[0]: str
.result.credential: CloudCredential
.result.credential.attrs["abc"]: str
.result.credential.auth-type: str
.result.credential.redacted[0]: str
.result.endpoint: str
.result.identity-endpoint: str
.result.is-controller-cloud: bool
.result.name: str
.result.region: str
.result.skip-tls-verify: bool
.result.storage-endpoint: str
.result.type: str

CAASAgent: 2
.ModelConfig()
in: None
out: ModelConfigResult
.config["abc"]: dict[Any, Any]

CAASAgent: 2
.WatchCloudSpecsChanges()
in: Entities
.entities[0]: Entity
.entities[0].tag: str
out: NotifyWatchResults
.results[0]: NotifyWatchResult
.results[0].NotifyWatcherId: str
.results[0].error: Error
.results[0].error.code: str
.results[0].error.info["abc"]: dict[Any, Any]
.results[0].error.message: str

CAASAgent: 2
.WatchForModelConfigChanges()
in: None
out: NotifyWatchResult
.NotifyWatcherId: str
.error: Error
.error.code: str
.error.info["abc"]: dict[Any, Any]
.error.message: str

CAASApplication: 1
.UnitIntroduction()
in: CAASUnitIntroductionArgs
.pod-name: str
.pod-uuid: str
out: CAASUnitIntroductionResult
.error: Error
.error.code: str
.error.info["abc"]: dict[Any, Any]
.error.message: str
.result: CAASUnitIntroduction
.result.agent-conf[0]: int
.result.unit-name: str

CAASApplication: 1
.UnitTerminating()
in: Entity
.tag: str
out: CAASUnitTerminationResult
.Error: Error
.Error.code: str
.Error.info["abc"]: dict[Any, Any]
.Error.message: str
.WillRestart: bool

CAASApplicationProvisioner: 1
.ApplicationCharmInfo()
in: Entity
.tag: str
out: Charm
.actions: CharmActions
.actions.specs["abc"]: CharmActionSpec
.actions.specs["abc"].description: str
.actions.specs["abc"].params["abc"]: dict[Any, Any]
.config["abc"]: CharmOption
.config["abc"].default: dict[Any, Any]
.config["abc"].description: str
.config["abc"].type: str
.lxd-profile: CharmLXDProfile
.lxd-profile.config["abc"]: str
.lxd-profile.description: str
.lxd-profile.devices["abc"]["abc"]: str
.manifest: CharmManifest
.manifest.bases[0]: CharmBase
.manifest.bases[0].architectures[0]: str
.manifest.bases[0].channel: str
.manifest.bases[0].name: str
.meta: CharmMeta
.meta.assumes-expr: ExpressionTree
.meta.assumes-expr.Expression: dict[Any, Any]
.meta.categories[0]: str
.meta.charm-user: str
.meta.containers["abc"]: CharmContainer
.meta.containers["abc"].gid: int
.meta.containers["abc"].mounts[0]: CharmMount
.meta.containers["abc"].mounts[0].location: str
.meta.containers["abc"].mounts[0].storage: str
.meta.containers["abc"].resource: str
.meta.containers["abc"].uid: int
.meta.deployment: CharmDeployment
.meta.deployment.min-version: str
.meta.deployment.mode: str
.meta.deployment.service: str
.meta.deployment.type: str
.meta.description: str
.meta.devices["abc"]: CharmDevice
.meta.devices["abc"].CountMax: int
.meta.devices["abc"].CountMin: int
.meta.devices["abc"].Description: str
.meta.devices["abc"].Name: str
.meta.devices["abc"].Type: str
.meta.extra-bindings["abc"]: str
.meta.min-juju-version: str
.meta.name: str
.meta.payload-classes["abc"]: CharmPayloadClass
.meta.payload-classes["abc"].name: str
.meta.payload-classes["abc"].type: str
.meta.peers["abc"]: CharmRelation
.meta.peers["abc"].interface: str
.meta.peers["abc"].limit: int
.meta.peers["abc"].name: str
.meta.peers["abc"].optional: bool
.meta.peers["abc"].role: str
.meta.peers["abc"].scope: str
.meta.provides["abc"]: CharmRelation
.meta.provides["abc"].interface: str
.meta.provides["abc"].limit: int
.meta.provides["abc"].name: str
.meta.provides["abc"].optional: bool
.meta.provides["abc"].role: str
.meta.provides["abc"].scope: str
.meta.requires["abc"]: CharmRelation
.meta.requires["abc"].interface: str
.meta.requires["abc"].limit: int
.meta.requires["abc"].name: str
.meta.requires["abc"].optional: bool
.meta.requires["abc"].role: str
.meta.requires["abc"].scope: str
.meta.resources["abc"]: CharmResourceMeta
.meta.resources["abc"].description: str
.meta.resources["abc"].name: str
.meta.resources["abc"].path: str
.meta.resources["abc"].type: str
.meta.series[0]: str
.meta.storage["abc"]: CharmStorage
.meta.storage["abc"].count-max: int
.meta.storage["abc"].count-min: int
.meta.storage["abc"].description: str
.meta.storage["abc"].location: str
.meta.storage["abc"].minimum-size: int
.meta.storage["abc"].name: str
.meta.storage["abc"].properties[0]: str
.meta.storage["abc"].read-only: bool
.meta.storage["abc"].shared: bool
.meta.storage["abc"].type: str
.meta.subordinate: bool
.meta.summary: str
.meta.tags[0]: str
.meta.terms[0]: str
.metrics: CharmMetrics
.metrics.metrics["abc"]: CharmMetric
.metrics.metrics["abc"].description: str
.metrics.metrics["abc"].type: str
.metrics.plan: CharmPlan
.metrics.plan.required: bool
.revision: int
.url: str

CAASApplicationProvisioner: 1
.ApplicationOCIResources()
in: Entities
.entities[0]: Entity
.entities[0].tag: str
out: CAASApplicationOCIResourceResults
.results[0]: CAASApplicationOCIResourceResult
.results[0].error: Error
.results[0].error.code: str
.results[0].error.info["abc"]: dict[Any, Any]
.results[0].error.message: str
.results[0].result: CAASApplicationOCIResources
.results[0].result.images["abc"]: DockerImageInfo
.results[0].result.images["abc"].auth: str
.results[0].result.images["abc"].email: str
.results[0].result.images["abc"].identitytoken: str
.results[0].result.images["abc"].image-name: str
.results[0].result.images["abc"].password: str
.results[0].result.images["abc"].registrytoken: str
.results[0].result.images["abc"].repository: str
.results[0].result.images["abc"].serveraddress: str
.results[0].result.images["abc"].username: str

CAASApplicationProvisioner: 1
.CharmInfo()
in: CharmURL
.url: str
out: Charm
.actions: CharmActions
.actions.specs["abc"]: CharmActionSpec
.actions.specs["abc"].description: str
.actions.specs["abc"].params["abc"]: dict[Any, Any]
.config["abc"]: CharmOption
.config["abc"].default: dict[Any, Any]
.config["abc"].description: str
.config["abc"].type: str
.lxd-profile: CharmLXDProfile
.lxd-profile.config["abc"]: str
.lxd-profile.description: str
.lxd-profile.devices["abc"]["abc"]: str
.manifest: CharmManifest
.manifest.bases[0]: CharmBase
.manifest.bases[0].architectures[0]: str
.manifest.bases[0].channel: str
.manifest.bases[0].name: str
.meta: CharmMeta
.meta.assumes-expr: ExpressionTree
.meta.assumes-expr.Expression: dict[Any, Any]
.meta.categories[0]: str
.meta.charm-user: str
.meta.containers["abc"]: CharmContainer
.meta.containers["abc"].gid: int
.meta.containers["abc"].mounts[0]: CharmMount
.meta.containers["abc"].mounts[0].location: str
.meta.containers["abc"].mounts[0].storage: str
.meta.containers["abc"].resource: str
.meta.containers["abc"].uid: int
.meta.deployment: CharmDeployment
.meta.deployment.min-version: str
.meta.deployment.mode: str
.meta.deployment.service: str
.meta.deployment.type: str
.meta.description: str
.meta.devices["abc"]: CharmDevice
.meta.devices["abc"].CountMax: int
.meta.devices["abc"].CountMin: int
.meta.devices["abc"].Description: str
.meta.devices["abc"].Name: str
.meta.devices["abc"].Type: str
.meta.extra-bindings["abc"]: str
.meta.min-juju-version: str
.meta.name: str
.meta.payload-classes["abc"]: CharmPayloadClass
.meta.payload-classes["abc"].name: str
.meta.payload-classes["abc"].type: str
.meta.peers["abc"]: CharmRelation
.meta.peers["abc"].interface: str
.meta.peers["abc"].limit: int
.meta.peers["abc"].name: str
.meta.peers["abc"].optional: bool
.meta.peers["abc"].role: str
.meta.peers["abc"].scope: str
.meta.provides["abc"]: CharmRelation
.meta.provides["abc"].interface: str
.meta.provides["abc"].limit: int
.meta.provides["abc"].name: str
.meta.provides["abc"].optional: bool
.meta.provides["abc"].role: str
.meta.provides["abc"].scope: str
.meta.requires["abc"]: CharmRelation
.meta.requires["abc"].interface: str
.meta.requires["abc"].limit: int
.meta.requires["abc"].name: str
.meta.requires["abc"].optional: bool
.meta.requires["abc"].role: str
.meta.requires["abc"].scope: str
.meta.resources["abc"]: CharmResourceMeta
.meta.resources["abc"].description: str
.meta.resources["abc"].name: str
.meta.resources["abc"].path: str
.meta.resources["abc"].type: str
.meta.series[0]: str
.meta.storage["abc"]: CharmStorage
.meta.storage["abc"].count-max: int
.meta.storage["abc"].count-min: int
.meta.storage["abc"].description: str
.meta.storage["abc"].location: str
.meta.storage["abc"].minimum-size: int
.meta.storage["abc"].name: str
.meta.storage["abc"].properties[0]: str
.meta.storage["abc"].read-only: bool
.meta.storage["abc"].shared: bool
.meta.storage["abc"].type: str
.meta.subordinate: bool
.meta.summary: str
.meta.tags[0]: str
.meta.terms[0]: str
.metrics: CharmMetrics
.metrics.metrics["abc"]: CharmMetric
.metrics.metrics["abc"].description: str
.metrics.metrics["abc"].type: str
.metrics.plan: CharmPlan
.metrics.plan.required: bool
.revision: int
.url: str

CAASApplicationProvisioner: 1
.ClearApplicationsResources()
in: Entities
.entities[0]: Entity
.entities[0].tag: str
out: ErrorResults
.results[0]: ErrorResult
.results[0].error: Error
.results[0].error.code: str
.results[0].error.info["abc"]: dict[Any, Any]
.results[0].error.message: str

CAASApplicationProvisioner: 1
.DestroyUnits()
in: DestroyUnitsParams
.units[0]: DestroyUnitParams
.units[0].destroy-storage: bool
.units[0].dry-run: bool
.units[0].force: bool
.units[0].max-wait: int
.units[0].unit-tag: str
out: DestroyUnitResults
.results[0]: DestroyUnitResult
.results[0].error: Error
.results[0].error.code: str
.results[0].error.info["abc"]: dict[Any, Any]
.results[0].error.message: str
.results[0].info: DestroyUnitInfo
.results[0].info.destroyed-storage[0]: Entity
.results[0].info.destroyed-storage[0].tag: str
.results[0].info.detached-storage[0]: Entity
.results[0].info.detached-storage[0].tag: str

CAASApplicationProvisioner: 1
.Life()
in: Entities
.entities[0]: Entity
.entities[0].tag: str
out: LifeResults
.results[0]: LifeResult
.results[0].error: Error
.results[0].error.code: str
.results[0].error.info["abc"]: dict[Any, Any]
.results[0].error.message: str
.results[0].life: str

CAASApplicationProvisioner: 1
.ProvisionerConfig()
in: None
out: CAASApplicationProvisionerConfigResult
.error: Error
.error.code: str
.error.info["abc"]: dict[Any, Any]
.error.message: str
.provisioner-config: CAASApplicationProvisionerConfig
.provisioner-config.unmanaged-applications: Entities
.provisioner-config.unmanaged-applications.entities[0]: Entity
.provisioner-config.unmanaged-applications.entities[0].tag: str

CAASApplicationProvisioner: 1
.ProvisioningInfo()
in: Entities
.entities[0]: Entity
.entities[0].tag: str
out: CAASApplicationProvisioningInfoResults
.results[0]: CAASApplicationProvisioningInfo
.results[0].api-addresses[0]: str
.results[0].base: Base
.results[0].base.channel: str
.results[0].base.name: str
.results[0].ca-cert: str
.results[0].charm-modified-version: int
.results[0].charm-url: str
.results[0].constraints: Value
.results[0].constraints.allocate-public-ip: bool
.results[0].constraints.arch: str
.results[0].constraints.container: str
.results[0].constraints.cores: int
.results[0].constraints.cpu-power: int
.results[0].constraints.image-id: str
.results[0].constraints.instance-role: str
.results[0].constraints.instance-type: str
.results[0].constraints.mem: int
.results[0].constraints.root-disk: int
.results[0].constraints.root-disk-source: str
.results[0].constraints.spaces[0]: str
.results[0].constraints.tags[0]: str
.results[0].constraints.virt-type: str
.results[0].constraints.zones[0]: str
.results[0].devices[0]: KubernetesDeviceParams
.results[0].devices[0].Attributes["abc"]: str
.results[0].devices[0].Count: int
.results[0].devices[0].Type: str
.results[0].error: Error
.results[0].error.code: str
.results[0].error.info["abc"]: dict[Any, Any]
.results[0].error.message: str
.results[0].filesystems[0]: KubernetesFilesystemParams
.results[0].filesystems[0].attachment: KubernetesFilesystemAttachmentParams
.results[0].filesystems[0].attachment.mount-point: str
.results[0].filesystems[0].attachment.provider: str
.results[0].filesystems[0].attachment.read-only: bool
.results[0].filesystems[0].attributes["abc"]: dict[Any, Any]
.results[0].filesystems[0].provider: str
.results[0].filesystems[0].size: int
.results[0].filesystems[0].storagename: str
.results[0].filesystems[0].tags["abc"]: str
.results[0].image-repo: DockerImageInfo
.results[0].image-repo.auth: str
.results[0].image-repo.email: str
.results[0].image-repo.identitytoken: str
.results[0].image-repo.image-name: str
.results[0].image-repo.password: str
.results[0].image-repo.registrytoken: str
.results[0].image-repo.repository: str
.results[0].image-repo.serveraddress: str
.results[0].image-repo.username: str
.results[0].scale: int
.results[0].tags["abc"]: str
.results[0].trust: bool
.results[0].version: Number
.results[0].version.Build: int
.results[0].version.Major: int
.results[0].version.Minor: int
.results[0].version.Patch: int
.results[0].version.Tag: str
.results[0].volumes[0]: KubernetesVolumeParams
.results[0].volumes[0].attachment: KubernetesVolumeAttachmentParams
.results[0].volumes[0].attachment.provider: str
.results[0].volumes[0].attachment.read-only: bool
.results[0].volumes[0].attributes["abc"]: dict[Any, Any]
.results[0].volumes[0].provider: str
.results[0].volumes[0].size: int
.results[0].volumes[0].storagename: str
.results[0].volumes[0].tags["abc"]: str

CAASApplicationProvisioner: 1
.ProvisioningState()
in: Entity
.tag: str
out: CAASApplicationProvisioningStateResult
.error: Error
.error.code: str
.error.info["abc"]: dict[Any, Any]
.error.message: str
.provisioning-state: CAASApplicationProvisioningState
.provisioning-state.scale-target: int
.provisioning-state.scaling: bool

CAASApplicationProvisioner: 1
.Remove()
in: Entities
.entities[0]: Entity
.entities[0].tag: str
out: ErrorResults
.results[0]: ErrorResult
.results[0].error: Error
.results[0].error.code: str
.results[0].error.info["abc"]: dict[Any, Any]
.results[0].error.message: str

CAASApplicationProvisioner: 1
.SetOperatorStatus()
in: SetStatus
.entities[0]: EntityStatusArgs
.entities[0].data["abc"]: dict[Any, Any]
.entities[0].info: str
.entities[0].status: str
.entities[0].tag: str
out: ErrorResults
.results[0]: ErrorResult
.results[0].error: Error
.results[0].error.code: str
.results[0].error.info["abc"]: dict[Any, Any]
.results[0].error.message: str

CAASApplicationProvisioner: 1
.SetPasswords()
in: EntityPasswords
.changes[0]: EntityPassword
.changes[0].password: str
.changes[0].tag: str
out: ErrorResults
.results[0]: ErrorResult
.results[0].error: Error
.results[0].error.code: str
.results[0].error.info["abc"]: dict[Any, Any]
.results[0].error.message: str

CAASApplicationProvisioner: 1
.SetProvisioningState()
in: CAASApplicationProvisioningStateArg
.application: Entity
.application.tag: str
.provisioning-state: CAASApplicationProvisioningState
.provisioning-state.scale-target: int
.provisioning-state.scaling: bool
out: ErrorResult
.error: Error
.error.code: str
.error.info["abc"]: dict[Any, Any]
.error.message: str

CAASApplicationProvisioner: 1
.Units()
in: Entities
.entities[0]: Entity
.entities[0].tag: str
out: CAASUnitsResults
.results[0]: CAASUnitsResult
.results[0].error: Error
.results[0].error.code: str
.results[0].error.info["abc"]: dict[Any, Any]
.results[0].error.message: str
.results[0].units[0]: CAASUnitInfo
.results[0].units[0].tag: str
.results[0].units[0].unit-status: UnitStatus
.results[0].units[0].unit-status.address: str
.results[0].units[0].unit-status.agent-status: DetailedStatus
.results[0].units[0].unit-status.agent-status.data["abc"]: dict[Any, Any]
.results[0].units[0].unit-status.agent-status.err: Error
.results[0].units[0].unit-status.agent-status.err.code: str
.results[0].units[0].unit-status.agent-status.err.info["abc"]: dict[Any, Any]
.results[0].units[0].unit-status.agent-status.err.message: str
.results[0].units[0].unit-status.agent-status.info: str
.results[0].units[0].unit-status.agent-status.kind: str
.results[0].units[0].unit-status.agent-status.life: str
.results[0].units[0].unit-status.agent-status.since: str
.results[0].units[0].unit-status.agent-status.status: str
.results[0].units[0].unit-status.agent-status.version: str
.results[0].units[0].unit-status.charm: str
.results[0].units[0].unit-status.leader: bool
.results[0].units[0].unit-status.machine: str
.results[0].units[0].unit-status.opened-ports[0]: str
.results[0].units[0].unit-status.provider-id: str
.results[0].units[0].unit-status.public-address: str
.results[0].units[0].unit-status.subordinates["abc"]: UnitStatus
.results[0].units[0].unit-status.workload-status: DetailedStatus
.results[0].units[0].unit-status.workload-status.data["abc"]: dict[Any, Any]
.results[0].units[0].unit-status.workload-status.err: Error
.results[0].units[0].unit-status.workload-status.err.code: str
.results[0].units[0].unit-status.workload-status.err.info["abc"]: dict[Any, Any]
.results[0].units[0].unit-status.workload-status.err.message: str
.results[0].units[0].unit-status.workload-status.info: str
.results[0].units[0].unit-status.workload-status.kind: str
.results[0].units[0].unit-status.workload-status.life: str
.results[0].units[0].unit-status.workload-status.since: str
.results[0].units[0].unit-status.workload-status.status: str
.results[0].units[0].unit-status.workload-status.version: str
.results[0].units[0].unit-status.workload-version: str

CAASApplicationProvisioner: 1
.UpdateApplicationsUnits()
in: UpdateApplicationUnitArgs
.args[0]: UpdateApplicationUnits
.args[0].application-tag: str
.args[0].generation: int
.args[0].scale: int
.args[0].status: EntityStatus
.args[0].status.data["abc"]: dict[Any, Any]
.args[0].status.info: str
.args[0].status.since: str
.args[0].status.status: str
.args[0].units[0]: ApplicationUnitParams
.args[0].units[0].address: str
.args[0].units[0].data["abc"]: dict[Any, Any]
.args[0].units[0].filesystem-info[0]: KubernetesFilesystemInfo
.args[0].units[0].filesystem-info[0].data["abc"]: dict[Any, Any]
.args[0].units[0].filesystem-info[0].filesystem-id: str
.args[0].units[0].filesystem-info[0].info: str
.args[0].units[0].filesystem-info[0].mount-point: str
.args[0].units[0].filesystem-info[0].pool: str
.args[0].units[0].filesystem-info[0].read-only: bool
.args[0].units[0].filesystem-info[0].size: int
.args[0].units[0].filesystem-info[0].status: str
.args[0].units[0].filesystem-info[0].storagename: str
.args[0].units[0].filesystem-info[0].volume: KubernetesVolumeInfo
.args[0].units[0].filesystem-info[0].volume.data["abc"]: dict[Any, Any]
.args[0].units[0].filesystem-info[0].volume.info: str
.args[0].units[0].filesystem-info[0].volume.persistent: bool
.args[0].units[0].filesystem-info[0].volume.pool: str
.args[0].units[0].filesystem-info[0].volume.size: int
.args[0].units[0].filesystem-info[0].volume.status: str
.args[0].units[0].filesystem-info[0].volume.volume-id: str
.args[0].units[0].info: str
.args[0].units[0].ports[0]: str
.args[0].units[0].provider-id: str
.args[0].units[0].stateful: bool
.args[0].units[0].status: str
.args[0].units[0].unit-tag: str
out: UpdateApplicationUnitResults
.results[0]: UpdateApplicationUnitResult
.results[0].error: Error
.results[0].error.code: str
.results[0].error.info["abc"]: dict[Any, Any]
.results[0].error.message: str
.results[0].info: UpdateApplicationUnitsInfo
.results[0].info.units[0]: ApplicationUnitInfo
.results[0].info.units[0].provider-id: str
.results[0].info.units[0].unit-tag: str

CAASApplicationProvisioner: 1
.Watch()
in: Entities
.entities[0]: Entity
.entities[0].tag: str
out: NotifyWatchResults
.results[0]: NotifyWatchResult
.results[0].NotifyWatcherId: str
.results[0].error: Error
.results[0].error.code: str
.results[0].error.info["abc"]: dict[Any, Any]
.results[0].error.message: str

CAASApplicationProvisioner: 1
.WatchApplications()
in: None
out: StringsWatchResult
.changes[0]: str
.error: Error
.error.code: str
.error.info["abc"]: dict[Any, Any]
.error.message: str
.watcher-id: str

CAASApplicationProvisioner: 1
.WatchProvisioningInfo()
in: Entities
.entities[0]: Entity
.entities[0].tag: str
out: NotifyWatchResults
.results[0]: NotifyWatchResult
.results[0].NotifyWatcherId: str
.results[0].error: Error
.results[0].error.code: str
.results[0].error.info["abc"]: dict[Any, Any]
.results[0].error.message: str

CAASApplicationProvisioner: 1
.WatchUnits()
in: Entities
.entities[0]: Entity
.entities[0].tag: str
out: StringsWatchResults
.results[0]: StringsWatchResult
.results[0].changes[0]: str
.results[0].error: Error
.results[0].error.code: str
.results[0].error.info["abc"]: dict[Any, Any]
.results[0].error.message: str
.results[0].watcher-id: str

CAASModelOperator: 1
.APIAddresses()
in: None
out: StringsResult
.error: Error
.error.code: str
.error.info["abc"]: dict[Any, Any]
.error.message: str
.result[0]: str

CAASModelOperator: 1
.APIHostPorts()
in: None
out: APIHostPortsResult
.servers[0][0]: HostPort
.servers[0][0].Address: Address
.servers[0][0].Address.cidr: str
.servers[0][0].Address.config-type: str
.servers[0][0].Address.is-secondary: bool
.servers[0][0].Address.scope: str
.servers[0][0].Address.space-id: str
.servers[0][0].Address.space-name: str
.servers[0][0].Address.type: str
.servers[0][0].Address.value: str
.servers[0][0].cidr: str
.servers[0][0].config-type: str
.servers[0][0].is-secondary: bool
.servers[0][0].port: int
.servers[0][0].scope: str
.servers[0][0].space-id: str
.servers[0][0].space-name: str
.servers[0][0].type: str
.servers[0][0].value: str

CAASModelOperator: 1
.ModelOperatorProvisioningInfo()
in: None
out: ModelOperatorInfo
.api-addresses[0]: str
.image-details: DockerImageInfo
.image-details.auth: str
.image-details.email: str
.image-details.identitytoken: str
.image-details.image-name: str
.image-details.password: str
.image-details.registrytoken: str
.image-details.repository: str
.image-details.serveraddress: str
.image-details.username: str
.version: Number
.version.Build: int
.version.Major: int
.version.Minor: int
.version.Patch: int
.version.Tag: str

CAASModelOperator: 1
.ModelUUID()
in: None
out: StringResult
.error: Error
.error.code: str
.error.info["abc"]: dict[Any, Any]
.error.message: str
.result: str

CAASModelOperator: 1
.SetPasswords()
in: EntityPasswords
.changes[0]: EntityPassword
.changes[0].password: str
.changes[0].tag: str
out: ErrorResults
.results[0]: ErrorResult
.results[0].error: Error
.results[0].error.code: str
.results[0].error.info["abc"]: dict[Any, Any]
.results[0].error.message: str

CAASModelOperator: 1
.WatchAPIHostPorts()
in: None
out: NotifyWatchResult
.NotifyWatcherId: str
.error: Error
.error.code: str
.error.info["abc"]: dict[Any, Any]
.error.message: str

CAASModelOperator: 1
.WatchModelOperatorProvisioningInfo()
in: None
out: NotifyWatchResult
.NotifyWatcherId: str
.error: Error
.error.code: str
.error.info["abc"]: dict[Any, Any]
.error.message: str

CAASOperator: 1
.APIAddresses()
in: None
out: StringsResult
.error: Error
.error.code: str
.error.info["abc"]: dict[Any, Any]
.error.message: str
.result[0]: str

CAASOperator: 1
.APIHostPorts()
in: None
out: APIHostPortsResult
.servers[0][0]: HostPort
.servers[0][0].Address: Address
.servers[0][0].Address.cidr: str
.servers[0][0].Address.config-type: str
.servers[0][0].Address.is-secondary: bool
.servers[0][0].Address.scope: str
.servers[0][0].Address.space-id: str
.servers[0][0].Address.space-name: str
.servers[0][0].Address.type: str
.servers[0][0].Address.value: str
.servers[0][0].cidr: str
.servers[0][0].config-type: str
.servers[0][0].is-secondary: bool
.servers[0][0].port: int
.servers[0][0].scope: str
.servers[0][0].space-id: str
.servers[0][0].space-name: str
.servers[0][0].type: str
.servers[0][0].value: str

CAASOperator: 1
.Charm()
in: Entities
.entities[0]: Entity
.entities[0].tag: str
out: ApplicationCharmResults
.results[0]: ApplicationCharmResult
.results[0].error: Error
.results[0].error.code: str
.results[0].error.info["abc"]: dict[Any, Any]
.results[0].error.message: str
.results[0].result: ApplicationCharm
.results[0].result.charm-modified-version: int
.results[0].result.deployment-mode: str
.results[0].result.force-upgrade: bool
.results[0].result.sha256: str
.results[0].result.url: str

CAASOperator: 1
.CurrentModel()
in: None
out: ModelResult
.error: Error
.error.code: str
.error.info["abc"]: dict[Any, Any]
.error.message: str
.name: str
.type: str
.uuid: str

CAASOperator: 1
.Life()
in: Entities
.entities[0]: Entity
.entities[0].tag: str
out: LifeResults
.results[0]: LifeResult
.results[0].error: Error
.results[0].error.code: str
.results[0].error.info["abc"]: dict[Any, Any]
.results[0].error.message: str
.results[0].life: str

CAASOperator: 1
.ModelUUID()
in: None
out: StringResult
.error: Error
.error.code: str
.error.info["abc"]: dict[Any, Any]
.error.message: str
.result: str

CAASOperator: 1
.Remove()
in: Entities
.entities[0]: Entity
.entities[0].tag: str
out: ErrorResults
.results[0]: ErrorResult
.results[0].error: Error
.results[0].error.code: str
.results[0].error.info["abc"]: dict[Any, Any]
.results[0].error.message: str

CAASOperator: 1
.SetPodSpec()
in: SetPodSpecParams
.specs[0]: EntityString
.specs[0].tag: str
.specs[0].value: str
out: ErrorResults
.results[0]: ErrorResult
.results[0].error: Error
.results[0].error.code: str
.results[0].error.info["abc"]: dict[Any, Any]
.results[0].error.message: str

CAASOperator: 1
.SetStatus()
in: SetStatus
.entities[0]: EntityStatusArgs
.entities[0].data["abc"]: dict[Any, Any]
.entities[0].info: str
.entities[0].status: str
.entities[0].tag: str
out: ErrorResults
.results[0]: ErrorResult
.results[0].error: Error
.results[0].error.code: str
.results[0].error.info["abc"]: dict[Any, Any]
.results[0].error.message: str

CAASOperator: 1
.SetTools()
in: EntitiesVersion
.agent-tools[0]: EntityVersion
.agent-tools[0].tag: str
.agent-tools[0].tools: Version
.agent-tools[0].tools.version: Binary
.agent-tools[0].tools.version.Arch: str
.agent-tools[0].tools.version.Build: int
.agent-tools[0].tools.version.Major: int
.agent-tools[0].tools.version.Minor: int
.agent-tools[0].tools.version.Number: Number
.agent-tools[0].tools.version.Number.Build: int
.agent-tools[0].tools.version.Number.Major: int
.agent-tools[0].tools.version.Number.Minor: int
.agent-tools[0].tools.version.Number.Patch: int
.agent-tools[0].tools.version.Number.Tag: str
.agent-tools[0].tools.version.Patch: int
.agent-tools[0].tools.version.Release: str
.agent-tools[0].tools.version.Tag: str
out: ErrorResults
.results[0]: ErrorResult
.results[0].error: Error
.results[0].error.code: str
.results[0].error.info["abc"]: dict[Any, Any]
.results[0].error.message: str

CAASOperator: 1
.Watch()
in: Entities
.entities[0]: Entity
.entities[0].tag: str
out: NotifyWatchResults
.results[0]: NotifyWatchResult
.results[0].NotifyWatcherId: str
.results[0].error: Error
.results[0].error.code: str
.results[0].error.info["abc"]: dict[Any, Any]
.results[0].error.message: str

CAASOperator: 1
.WatchAPIHostPorts()
in: None
out: NotifyWatchResult
.NotifyWatcherId: str
.error: Error
.error.code: str
.error.info["abc"]: dict[Any, Any]
.error.message: str

CAASOperator: 1
.WatchContainerStart()
in: WatchContainerStartArgs
.args[0]: WatchContainerStartArg
.args[0].container: str
.args[0].entity: Entity
.args[0].entity.tag: str
out: StringsWatchResults
.results[0]: StringsWatchResult
.results[0].changes[0]: str
.results[0].error: Error
.results[0].error.code: str
.results[0].error.info["abc"]: dict[Any, Any]
.results[0].error.message: str
.results[0].watcher-id: str

CAASOperator: 1
.WatchUnits()
in: Entities
.entities[0]: Entity
.entities[0].tag: str
out: StringsWatchResults
.results[0]: StringsWatchResult
.results[0].changes[0]: str
.results[0].error: Error
.results[0].error.code: str
.results[0].error.info["abc"]: dict[Any, Any]
.results[0].error.message: str
.results[0].watcher-id: str

CAASOperatorProvisioner: 1
.APIAddresses()
in: None
out: StringsResult
.error: Error
.error.code: str
.error.info["abc"]: dict[Any, Any]
.error.message: str
.result[0]: str

CAASOperatorProvisioner: 1
.APIHostPorts()
in: None
out: APIHostPortsResult
.servers[0][0]: HostPort
.servers[0][0].Address: Address
.servers[0][0].Address.cidr: str
.servers[0][0].Address.config-type: str
.servers[0][0].Address.is-secondary: bool
.servers[0][0].Address.scope: str
.servers[0][0].Address.space-id: str
.servers[0][0].Address.space-name: str
.servers[0][0].Address.type: str
.servers[0][0].Address.value: str
.servers[0][0].cidr: str
.servers[0][0].config-type: str
.servers[0][0].is-secondary: bool
.servers[0][0].port: int
.servers[0][0].scope: str
.servers[0][0].space-id: str
.servers[0][0].space-name: str
.servers[0][0].type: str
.servers[0][0].value: str

CAASOperatorProvisioner: 1
.ApplicationCharmInfo()
in: Entity
.tag: str
out: Charm
.actions: CharmActions
.actions.specs["abc"]: CharmActionSpec
.actions.specs["abc"].description: str
.actions.specs["abc"].params["abc"]: dict[Any, Any]
.config["abc"]: CharmOption
.config["abc"].default: dict[Any, Any]
.config["abc"].description: str
.config["abc"].type: str
.lxd-profile: CharmLXDProfile
.lxd-profile.config["abc"]: str
.lxd-profile.description: str
.lxd-profile.devices["abc"]["abc"]: str
.manifest: CharmManifest
.manifest.bases[0]: CharmBase
.manifest.bases[0].architectures[0]: str
.manifest.bases[0].channel: str
.manifest.bases[0].name: str
.meta: CharmMeta
.meta.assumes-expr: ExpressionTree
.meta.assumes-expr.Expression: dict[Any, Any]
.meta.categories[0]: str
.meta.charm-user: str
.meta.containers["abc"]: CharmContainer
.meta.containers["abc"].gid: int
.meta.containers["abc"].mounts[0]: CharmMount
.meta.containers["abc"].mounts[0].location: str
.meta.containers["abc"].mounts[0].storage: str
.meta.containers["abc"].resource: str
.meta.containers["abc"].uid: int
.meta.deployment: CharmDeployment
.meta.deployment.min-version: str
.meta.deployment.mode: str
.meta.deployment.service: str
.meta.deployment.type: str
.meta.description: str
.meta.devices["abc"]: CharmDevice
.meta.devices["abc"].CountMax: int
.meta.devices["abc"].CountMin: int
.meta.devices["abc"].Description: str
.meta.devices["abc"].Name: str
.meta.devices["abc"].Type: str
.meta.extra-bindings["abc"]: str
.meta.min-juju-version: str
.meta.name: str
.meta.payload-classes["abc"]: CharmPayloadClass
.meta.payload-classes["abc"].name: str
.meta.payload-classes["abc"].type: str
.meta.peers["abc"]: CharmRelation
.meta.peers["abc"].interface: str
.meta.peers["abc"].limit: int
.meta.peers["abc"].name: str
.meta.peers["abc"].optional: bool
.meta.peers["abc"].role: str
.meta.peers["abc"].scope: str
.meta.provides["abc"]: CharmRelation
.meta.provides["abc"].interface: str
.meta.provides["abc"].limit: int
.meta.provides["abc"].name: str
.meta.provides["abc"].optional: bool
.meta.provides["abc"].role: str
.meta.provides["abc"].scope: str
.meta.requires["abc"]: CharmRelation
.meta.requires["abc"].interface: str
.meta.requires["abc"].limit: int
.meta.requires["abc"].name: str
.meta.requires["abc"].optional: bool
.meta.requires["abc"].role: str
.meta.requires["abc"].scope: str
.meta.resources["abc"]: CharmResourceMeta
.meta.resources["abc"].description: str
.meta.resources["abc"].name: str
.meta.resources["abc"].path: str
.meta.resources["abc"].type: str
.meta.series[0]: str
.meta.storage["abc"]: CharmStorage
.meta.storage["abc"].count-max: int
.meta.storage["abc"].count-min: int
.meta.storage["abc"].description: str
.meta.storage["abc"].location: str
.meta.storage["abc"].minimum-size: int
.meta.storage["abc"].name: str
.meta.storage["abc"].properties[0]: str
.meta.storage["abc"].read-only: bool
.meta.storage["abc"].shared: bool
.meta.storage["abc"].type: str
.meta.subordinate: bool
.meta.summary: str
.meta.tags[0]: str
.meta.terms[0]: str
.metrics: CharmMetrics
.metrics.metrics["abc"]: CharmMetric
.metrics.metrics["abc"].description: str
.metrics.metrics["abc"].type: str
.metrics.plan: CharmPlan
.metrics.plan.required: bool
.revision: int
.url: str

CAASOperatorProvisioner: 1
.CharmInfo()
in: CharmURL
.url: str
out: Charm
.actions: CharmActions
.actions.specs["abc"]: CharmActionSpec
.actions.specs["abc"].description: str
.actions.specs["abc"].params["abc"]: dict[Any, Any]
.config["abc"]: CharmOption
.config["abc"].default: dict[Any, Any]
.config["abc"].description: str
.config["abc"].type: str
.lxd-profile: CharmLXDProfile
.lxd-profile.config["abc"]: str
.lxd-profile.description: str
.lxd-profile.devices["abc"]["abc"]: str
.manifest: CharmManifest
.manifest.bases[0]: CharmBase
.manifest.bases[0].architectures[0]: str
.manifest.bases[0].channel: str
.manifest.bases[0].name: str
.meta: CharmMeta
.meta.assumes-expr: ExpressionTree
.meta.assumes-expr.Expression: dict[Any, Any]
.meta.categories[0]: str
.meta.charm-user: str
.meta.containers["abc"]: CharmContainer
.meta.containers["abc"].gid: int
.meta.containers["abc"].mounts[0]: CharmMount
.meta.containers["abc"].mounts[0].location: str
.meta.containers["abc"].mounts[0].storage: str
.meta.containers["abc"].resource: str
.meta.containers["abc"].uid: int
.meta.deployment: CharmDeployment
.meta.deployment.min-version: str
.meta.deployment.mode: str
.meta.deployment.service: str
.meta.deployment.type: str
.meta.description: str
.meta.devices["abc"]: CharmDevice
.meta.devices["abc"].CountMax: int
.meta.devices["abc"].CountMin: int
.meta.devices["abc"].Description: str
.meta.devices["abc"].Name: str
.meta.devices["abc"].Type: str
.meta.extra-bindings["abc"]: str
.meta.min-juju-version: str
.meta.name: str
.meta.payload-classes["abc"]: CharmPayloadClass
.meta.payload-classes["abc"].name: str
.meta.payload-classes["abc"].type: str
.meta.peers["abc"]: CharmRelation
.meta.peers["abc"].interface: str
.meta.peers["abc"].limit: int
.meta.peers["abc"].name: str
.meta.peers["abc"].optional: bool
.meta.peers["abc"].role: str
.meta.peers["abc"].scope: str
.meta.provides["abc"]: CharmRelation
.meta.provides["abc"].interface: str
.meta.provides["abc"].limit: int
.meta.provides["abc"].name: str
.meta.provides["abc"].optional: bool
.meta.provides["abc"].role: str
.meta.provides["abc"].scope: str
.meta.requires["abc"]: CharmRelation
.meta.requires["abc"].interface: str
.meta.requires["abc"].limit: int
.meta.requires["abc"].name: str
.meta.requires["abc"].optional: bool
.meta.requires["abc"].role: str
.meta.requires["abc"].scope: str
.meta.resources["abc"]: CharmResourceMeta
.meta.resources["abc"].description: str
.meta.resources["abc"].name: str
.meta.resources["abc"].path: str
.meta.resources["abc"].type: str
.meta.series[0]: str
.meta.storage["abc"]: CharmStorage
.meta.storage["abc"].count-max: int
.meta.storage["abc"].count-min: int
.meta.storage["abc"].description: str
.meta.storage["abc"].location: str
.meta.storage["abc"].minimum-size: int
.meta.storage["abc"].name: str
.meta.storage["abc"].properties[0]: str
.meta.storage["abc"].read-only: bool
.meta.storage["abc"].shared: bool
.meta.storage["abc"].type: str
.meta.subordinate: bool
.meta.summary: str
.meta.tags[0]: str
.meta.terms[0]: str
.metrics: CharmMetrics
.metrics.metrics["abc"]: CharmMetric
.metrics.metrics["abc"].description: str
.metrics.metrics["abc"].type: str
.metrics.plan: CharmPlan
.metrics.plan.required: bool
.revision: int
.url: str

CAASOperatorProvisioner: 1
.IssueOperatorCertificate()
in: Entities
.entities[0]: Entity
.entities[0].tag: str
out: IssueOperatorCertificateResults
.results[0]: IssueOperatorCertificateResult
.results[0].ca-cert: str
.results[0].cert: str
.results[0].error: Error
.results[0].error.code: str
.results[0].error.info["abc"]: dict[Any, Any]
.results[0].error.message: str
.results[0].private-key: str

CAASOperatorProvisioner: 1
.Life()
in: Entities
.entities[0]: Entity
.entities[0].tag: str
out: LifeResults
.results[0]: LifeResult
.results[0].error: Error
.results[0].error.code: str
.results[0].error.info["abc"]: dict[Any, Any]
.results[0].error.message: str
.results[0].life: str

CAASOperatorProvisioner: 1
.ModelUUID()
in: None
out: StringResult
.error: Error
.error.code: str
.error.info["abc"]: dict[Any, Any]
.error.message: str
.result: str

CAASOperatorProvisioner: 1
.OperatorProvisioningInfo()
in: Entities
.entities[0]: Entity
.entities[0].tag: str
out: OperatorProvisioningInfoResults
.results[0]: OperatorProvisioningInfo
.results[0].api-addresses[0]: str
.results[0].base-image-details: DockerImageInfo
.results[0].base-image-details.auth: str
.results[0].base-image-details.email: str
.results[0].base-image-details.identitytoken: str
.results[0].base-image-details.image-name: str
.results[0].base-image-details.password: str
.results[0].base-image-details.registrytoken: str
.results[0].base-image-details.repository: str
.results[0].base-image-details.serveraddress: str
.results[0].base-image-details.username: str
.results[0].charm-storage: KubernetesFilesystemParams
.results[0].charm-storage.attachment: KubernetesFilesystemAttachmentParams
.results[0].charm-storage.attachment.mount-point: str
.results[0].charm-storage.attachment.provider: str
.results[0].charm-storage.attachment.read-only: bool
.results[0].charm-storage.attributes["abc"]: dict[Any, Any]
.results[0].charm-storage.provider: str
.results[0].charm-storage.size: int
.results[0].charm-storage.storagename: str
.results[0].charm-storage.tags["abc"]: str
.results[0].error: Error
.results[0].error.code: str
.results[0].error.info["abc"]: dict[Any, Any]
.results[0].error.message: str
.results[0].image-details: DockerImageInfo
.results[0].image-details.auth: str
.results[0].image-details.email: str
.results[0].image-details.identitytoken: str
.results[0].image-details.image-name: str
.results[0].image-details.password: str
.results[0].image-details.registrytoken: str
.results[0].image-details.repository: str
.results[0].image-details.serveraddress: str
.results[0].image-details.username: str
.results[0].tags["abc"]: str
.results[0].version: Number
.results[0].version.Build: int
.results[0].version.Major: int
.results[0].version.Minor: int
.results[0].version.Patch: int
.results[0].version.Tag: str

CAASOperatorProvisioner: 1
.SetPasswords()
in: EntityPasswords
.changes[0]: EntityPassword
.changes[0].password: str
.changes[0].tag: str
out: ErrorResults
.results[0]: ErrorResult
.results[0].error: Error
.results[0].error.code: str
.results[0].error.info["abc"]: dict[Any, Any]
.results[0].error.message: str

CAASOperatorProvisioner: 1
.WatchAPIHostPorts()
in: None
out: NotifyWatchResult
.NotifyWatcherId: str
.error: Error
.error.code: str
.error.info["abc"]: dict[Any, Any]
.error.message: str

CAASOperatorProvisioner: 1
.WatchApplications()
in: None
out: StringsWatchResult
.changes[0]: str
.error: Error
.error.code: str
.error.info["abc"]: dict[Any, Any]
.error.message: str
.watcher-id: str

CAASOperatorUpgrader: 1
.UpgradeOperator()
in: KubernetesUpgradeArg
.agent-tag: str
.version: Number
.version.Build: int
.version.Major: int
.version.Minor: int
.version.Patch: int
.version.Tag: str
out: ErrorResult
.error: Error
.error.code: str
.error.info["abc"]: dict[Any, Any]
.error.message: str

CAASUnitProvisioner: 2
.ApplicationCharmInfo()
in: Entity
.tag: str
out: Charm
.actions: CharmActions
.actions.specs["abc"]: CharmActionSpec
.actions.specs["abc"].description: str
.actions.specs["abc"].params["abc"]: dict[Any, Any]
.config["abc"]: CharmOption
.config["abc"].default: dict[Any, Any]
.config["abc"].description: str
.config["abc"].type: str
.lxd-profile: CharmLXDProfile
.lxd-profile.config["abc"]: str
.lxd-profile.description: str
.lxd-profile.devices["abc"]["abc"]: str
.manifest: CharmManifest
.manifest.bases[0]: CharmBase
.manifest.bases[0].architectures[0]: str
.manifest.bases[0].channel: str
.manifest.bases[0].name: str
.meta: CharmMeta
.meta.assumes-expr: ExpressionTree
.meta.assumes-expr.Expression: dict[Any, Any]
.meta.categories[0]: str
.meta.charm-user: str
.meta.containers["abc"]: CharmContainer
.meta.containers["abc"].gid: int
.meta.containers["abc"].mounts[0]: CharmMount
.meta.containers["abc"].mounts[0].location: str
.meta.containers["abc"].mounts[0].storage: str
.meta.containers["abc"].resource: str
.meta.containers["abc"].uid: int
.meta.deployment: CharmDeployment
.meta.deployment.min-version: str
.meta.deployment.mode: str
.meta.deployment.service: str
.meta.deployment.type: str
.meta.description: str
.meta.devices["abc"]: CharmDevice
.meta.devices["abc"].CountMax: int
.meta.devices["abc"].CountMin: int
.meta.devices["abc"].Description: str
.meta.devices["abc"].Name: str
.meta.devices["abc"].Type: str
.meta.extra-bindings["abc"]: str
.meta.min-juju-version: str
.meta.name: str
.meta.payload-classes["abc"]: CharmPayloadClass
.meta.payload-classes["abc"].name: str
.meta.payload-classes["abc"].type: str
.meta.peers["abc"]: CharmRelation
.meta.peers["abc"].interface: str
.meta.peers["abc"].limit: int
.meta.peers["abc"].name: str
.meta.peers["abc"].optional: bool
.meta.peers["abc"].role: str
.meta.peers["abc"].scope: str
.meta.provides["abc"]: CharmRelation
.meta.provides["abc"].interface: str
.meta.provides["abc"].limit: int
.meta.provides["abc"].name: str
.meta.provides["abc"].optional: bool
.meta.provides["abc"].role: str
.meta.provides["abc"].scope: str
.meta.requires["abc"]: CharmRelation
.meta.requires["abc"].interface: str
.meta.requires["abc"].limit: int
.meta.requires["abc"].name: str
.meta.requires["abc"].optional: bool
.meta.requires["abc"].role: str
.meta.requires["abc"].scope: str
.meta.resources["abc"]: CharmResourceMeta
.meta.resources["abc"].description: str
.meta.resources["abc"].name: str
.meta.resources["abc"].path: str
.meta.resources["abc"].type: str
.meta.series[0]: str
.meta.storage["abc"]: CharmStorage
.meta.storage["abc"].count-max: int
.meta.storage["abc"].count-min: int
.meta.storage["abc"].description: str
.meta.storage["abc"].location: str
.meta.storage["abc"].minimum-size: int
.meta.storage["abc"].name: str
.meta.storage["abc"].properties[0]: str
.meta.storage["abc"].read-only: bool
.meta.storage["abc"].shared: bool
.meta.storage["abc"].type: str
.meta.subordinate: bool
.meta.summary: str
.meta.tags[0]: str
.meta.terms[0]: str
.metrics: CharmMetrics
.metrics.metrics["abc"]: CharmMetric
.metrics.metrics["abc"].description: str
.metrics.metrics["abc"].type: str
.metrics.plan: CharmPlan
.metrics.plan.required: bool
.revision: int
.url: str

CAASUnitProvisioner: 2
.ApplicationsConfig()
in: Entities
.entities[0]: Entity
.entities[0].tag: str
out: ApplicationGetConfigResults
.Results[0]: ConfigResult
.Results[0].config["abc"]: dict[Any, Any]
.Results[0].error: Error
.Results[0].error.code: str
.Results[0].error.info["abc"]: dict[Any, Any]
.Results[0].error.message: str

CAASUnitProvisioner: 2
.ApplicationsScale()
in: Entities
.entities[0]: Entity
.entities[0].tag: str
out: IntResults
.results[0]: IntResult
.results[0].error: Error
.results[0].error.code: str
.results[0].error.info["abc"]: dict[Any, Any]
.results[0].error.message: str
.results[0].result: int

CAASUnitProvisioner: 2
.ApplicationsTrust()
in: Entities
.entities[0]: Entity
.entities[0].tag: str
out: BoolResults
.results[0]: BoolResult
.results[0].error: Error
.results[0].error.code: str
.results[0].error.info["abc"]: dict[Any, Any]
.results[0].error.message: str
.results[0].result: bool

CAASUnitProvisioner: 2
.CharmInfo()
in: CharmURL
.url: str
out: Charm
.actions: CharmActions
.actions.specs["abc"]: CharmActionSpec
.actions.specs["abc"].description: str
.actions.specs["abc"].params["abc"]: dict[Any, Any]
.config["abc"]: CharmOption
.config["abc"].default: dict[Any, Any]
.config["abc"].description: str
.config["abc"].type: str
.lxd-profile: CharmLXDProfile
.lxd-profile.config["abc"]: str
.lxd-profile.description: str
.lxd-profile.devices["abc"]["abc"]: str
.manifest: CharmManifest
.manifest.bases[0]: CharmBase
.manifest.bases[0].architectures[0]: str
.manifest.bases[0].channel: str
.manifest.bases[0].name: str
.meta: CharmMeta
.meta.assumes-expr: ExpressionTree
.meta.assumes-expr.Expression: dict[Any, Any]
.meta.categories[0]: str
.meta.charm-user: str
.meta.containers["abc"]: CharmContainer
.meta.containers["abc"].gid: int
.meta.containers["abc"].mounts[0]: CharmMount
.meta.containers["abc"].mounts[0].location: str
.meta.containers["abc"].mounts[0].storage: str
.meta.containers["abc"].resource: str
.meta.containers["abc"].uid: int
.meta.deployment: CharmDeployment
.meta.deployment.min-version: str
.meta.deployment.mode: str
.meta.deployment.service: str
.meta.deployment.type: str
.meta.description: str
.meta.devices["abc"]: CharmDevice
.meta.devices["abc"].CountMax: int
.meta.devices["abc"].CountMin: int
.meta.devices["abc"].Description: str
.meta.devices["abc"].Name: str
.meta.devices["abc"].Type: str
.meta.extra-bindings["abc"]: str
.meta.min-juju-version: str
.meta.name: str
.meta.payload-classes["abc"]: CharmPayloadClass
.meta.payload-classes["abc"].name: str
.meta.payload-classes["abc"].type: str
.meta.peers["abc"]: CharmRelation
.meta.peers["abc"].interface: str
.meta.peers["abc"].limit: int
.meta.peers["abc"].name: str
.meta.peers["abc"].optional: bool
.meta.peers["abc"].role: str
.meta.peers["abc"].scope: str
.meta.provides["abc"]: CharmRelation
.meta.provides["abc"].interface: str
.meta.provides["abc"].limit: int
.meta.provides["abc"].name: str
.meta.provides["abc"].optional: bool
.meta.provides["abc"].role: str
.meta.provides["abc"].scope: str
.meta.requires["abc"]: CharmRelation
.meta.requires["abc"].interface: str
.meta.requires["abc"].limit: int
.meta.requires["abc"].name: str
.meta.requires["abc"].optional: bool
.meta.requires["abc"].role: str
.meta.requires["abc"].scope: str
.meta.resources["abc"]: CharmResourceMeta
.meta.resources["abc"].description: str
.meta.resources["abc"].name: str
.meta.resources["abc"].path: str
.meta.resources["abc"].type: str
.meta.series[0]: str
.meta.storage["abc"]: CharmStorage
.meta.storage["abc"].count-max: int
.meta.storage["abc"].count-min: int
.meta.storage["abc"].description: str
.meta.storage["abc"].location: str
.meta.storage["abc"].minimum-size: int
.meta.storage["abc"].name: str
.meta.storage["abc"].properties[0]: str
.meta.storage["abc"].read-only: bool
.meta.storage["abc"].shared: bool
.meta.storage["abc"].type: str
.meta.subordinate: bool
.meta.summary: str
.meta.tags[0]: str
.meta.terms[0]: str
.metrics: CharmMetrics
.metrics.metrics["abc"]: CharmMetric
.metrics.metrics["abc"].description: str
.metrics.metrics["abc"].type: str
.metrics.plan: CharmPlan
.metrics.plan.required: bool
.revision: int
.url: str

CAASUnitProvisioner: 2
.ClearApplicationsResources()
in: Entities
.entities[0]: Entity
.entities[0].tag: str
out: ErrorResults
.results[0]: ErrorResult
.results[0].error: Error
.results[0].error.code: str
.results[0].error.info["abc"]: dict[Any, Any]
.results[0].error.message: str

CAASUnitProvisioner: 2
.DeploymentMode()
in: Entities
.entities[0]: Entity
.entities[0].tag: str
out: StringResults
.results[0]: StringResult
.results[0].error: Error
.results[0].error.code: str
.results[0].error.info["abc"]: dict[Any, Any]
.results[0].error.message: str
.results[0].result: str

CAASUnitProvisioner: 2
.Life()
in: Entities
.entities[0]: Entity
.entities[0].tag: str
out: LifeResults
.results[0]: LifeResult
.results[0].error: Error
.results[0].error.code: str
.results[0].error.info["abc"]: dict[Any, Any]
.results[0].error.message: str
.results[0].life: str

CAASUnitProvisioner: 2
.ProvisioningInfo()
in: Entities
.entities[0]: Entity
.entities[0].tag: str
out: KubernetesProvisioningInfoResults
.results[0]: KubernetesProvisioningInfoResult
.results[0].error: Error
.results[0].error.code: str
.results[0].error.info["abc"]: dict[Any, Any]
.results[0].error.message: str
.results[0].result: KubernetesProvisioningInfo
.results[0].result.charm-modified-version: int
.results[0].result.constraints: Value
.results[0].result.constraints.allocate-public-ip: bool
.results[0].result.constraints.arch: str
.results[0].result.constraints.container: str
.results[0].result.constraints.cores: int
.results[0].result.constraints.cpu-power: int
.results[0].result.constraints.image-id: str
.results[0].result.constraints.instance-role: str
.results[0].result.constraints.instance-type: str
.results[0].result.constraints.mem: int
.results[0].result.constraints.root-disk: int
.results[0].result.constraints.root-disk-source: str
.results[0].result.constraints.spaces[0]: str
.results[0].result.constraints.tags[0]: str
.results[0].result.constraints.virt-type: str
.results[0].result.constraints.zones[0]: str
.results[0].result.deployment-info: KubernetesDeploymentInfo
.results[0].result.deployment-info.deployment-type: str
.results[0].result.deployment-info.service-type: str
.results[0].result.devices[0]: KubernetesDeviceParams
.results[0].result.devices[0].Attributes["abc"]: str
.results[0].result.devices[0].Count: int
.results[0].result.devices[0].Type: str
.results[0].result.filesystems[0]: KubernetesFilesystemParams
.results[0].result.filesystems[0].attachment: KubernetesFilesystemAttachmentParams
.results[0].result.filesystems[0].attachment.mount-point: str
.results[0].result.filesystems[0].attachment.provider: str
.results[0].result.filesystems[0].attachment.read-only: bool
.results[0].result.filesystems[0].attributes["abc"]: dict[Any, Any]
.results[0].result.filesystems[0].provider: str
.results[0].result.filesystems[0].size: int
.results[0].result.filesystems[0].storagename: str
.results[0].result.filesystems[0].tags["abc"]: str
.results[0].result.image-repo: DockerImageInfo
.results[0].result.image-repo.auth: str
.results[0].result.image-repo.email: str
.results[0].result.image-repo.identitytoken: str
.results[0].result.image-repo.image-name: str
.results[0].result.image-repo.password: str
.results[0].result.image-repo.registrytoken: str
.results[0].result.image-repo.repository: str
.results[0].result.image-repo.serveraddress: str
.results[0].result.image-repo.username: str
.results[0].result.pod-spec: str
.results[0].result.raw-k8s-spec: str
.results[0].result.tags["abc"]: str
.results[0].result.volumes[0]: KubernetesVolumeParams
.results[0].result.volumes[0].attachment: KubernetesVolumeAttachmentParams
.results[0].result.volumes[0].attachment.provider: str
.results[0].result.volumes[0].attachment.read-only: bool
.results[0].result.volumes[0].attributes["abc"]: dict[Any, Any]
.results[0].result.volumes[0].provider: str
.results[0].result.volumes[0].size: int
.results[0].result.volumes[0].storagename: str
.results[0].result.volumes[0].tags["abc"]: str

CAASUnitProvisioner: 2
.SetOperatorStatus()
in: SetStatus
.entities[0]: EntityStatusArgs
.entities[0].data["abc"]: dict[Any, Any]
.entities[0].info: str
.entities[0].status: str
.entities[0].tag: str
out: ErrorResults
.results[0]: ErrorResult
.results[0].error: Error
.results[0].error.code: str
.results[0].error.info["abc"]: dict[Any, Any]
.results[0].error.message: str

CAASUnitProvisioner: 2
.UpdateApplicationsService()
in: UpdateApplicationServiceArgs
.args[0]: UpdateApplicationServiceArg
.args[0].addresses[0]: Address
.args[0].addresses[0].cidr: str
.args[0].addresses[0].config-type: str
.args[0].addresses[0].is-secondary: bool
.args[0].addresses[0].scope: str
.args[0].addresses[0].space-id: str
.args[0].addresses[0].space-name: str
.args[0].addresses[0].type: str
.args[0].addresses[0].value: str
.args[0].application-tag: str
.args[0].generation: int
.args[0].provider-id: str
.args[0].scale: int
out: ErrorResults
.results[0]: ErrorResult
.results[0].error: Error
.results[0].error.code: str
.results[0].error.info["abc"]: dict[Any, Any]
.results[0].error.message: str

CAASUnitProvisioner: 2
.UpdateApplicationsUnits()
in: UpdateApplicationUnitArgs
.args[0]: UpdateApplicationUnits
.args[0].application-tag: str
.args[0].generation: int
.args[0].scale: int
.args[0].status: EntityStatus
.args[0].status.data["abc"]: dict[Any, Any]
.args[0].status.info: str
.args[0].status.since: str
.args[0].status.status: str
.args[0].units[0]: ApplicationUnitParams
.args[0].units[0].address: str
.args[0].units[0].data["abc"]: dict[Any, Any]
.args[0].units[0].filesystem-info[0]: KubernetesFilesystemInfo
.args[0].units[0].filesystem-info[0].data["abc"]: dict[Any, Any]
.args[0].units[0].filesystem-info[0].filesystem-id: str
.args[0].units[0].filesystem-info[0].info: str
.args[0].units[0].filesystem-info[0].mount-point: str
.args[0].units[0].filesystem-info[0].pool: str
.args[0].units[0].filesystem-info[0].read-only: bool
.args[0].units[0].filesystem-info[0].size: int
.args[0].units[0].filesystem-info[0].status: str
.args[0].units[0].filesystem-info[0].storagename: str
.args[0].units[0].filesystem-info[0].volume: KubernetesVolumeInfo
.args[0].units[0].filesystem-info[0].volume.data["abc"]: dict[Any, Any]
.args[0].units[0].filesystem-info[0].volume.info: str
.args[0].units[0].filesystem-info[0].volume.persistent: bool
.args[0].units[0].filesystem-info[0].volume.pool: str
.args[0].units[0].filesystem-info[0].volume.size: int
.args[0].units[0].filesystem-info[0].volume.status: str
.args[0].units[0].filesystem-info[0].volume.volume-id: str
.args[0].units[0].info: str
.args[0].units[0].ports[0]: str
.args[0].units[0].provider-id: str
.args[0].units[0].stateful: bool
.args[0].units[0].status: str
.args[0].units[0].unit-tag: str
out: UpdateApplicationUnitResults
.results[0]: UpdateApplicationUnitResult
.results[0].error: Error
.results[0].error.code: str
.results[0].error.info["abc"]: dict[Any, Any]
.results[0].error.message: str
.results[0].info: UpdateApplicationUnitsInfo
.results[0].info.units[0]: ApplicationUnitInfo
.results[0].info.units[0].provider-id: str
.results[0].info.units[0].unit-tag: str

CAASUnitProvisioner: 2
.Watch()
in: Entities
.entities[0]: Entity
.entities[0].tag: str
out: NotifyWatchResults
.results[0]: NotifyWatchResult
.results[0].NotifyWatcherId: str
.results[0].error: Error
.results[0].error.code: str
.results[0].error.info["abc"]: dict[Any, Any]
.results[0].error.message: str

CAASUnitProvisioner: 2
.WatchApplications()
in: None
out: StringsWatchResult
.changes[0]: str
.error: Error
.error.code: str
.error.info["abc"]: dict[Any, Any]
.error.message: str
.watcher-id: str

CAASUnitProvisioner: 2
.WatchApplicationsScale()
in: Entities
.entities[0]: Entity
.entities[0].tag: str
out: NotifyWatchResults
.results[0]: NotifyWatchResult
.results[0].NotifyWatcherId: str
.results[0].error: Error
.results[0].error.code: str
.results[0].error.info["abc"]: dict[Any, Any]
.results[0].error.message: str

CAASUnitProvisioner: 2
.WatchApplicationsTrustHash()
in: Entities
.entities[0]: Entity
.entities[0].tag: str
out: StringsWatchResults
.results[0]: StringsWatchResult
.results[0].changes[0]: str
.results[0].error: Error
.results[0].error.code: str
.results[0].error.info["abc"]: dict[Any, Any]
.results[0].error.message: str
.results[0].watcher-id: str

CAASUnitProvisioner: 2
.WatchPodSpec()
in: Entities
.entities[0]: Entity
.entities[0].tag: str
out: NotifyWatchResults
.results[0]: NotifyWatchResult
.results[0].NotifyWatcherId: str
.results[0].error: Error
.results[0].error.code: str
.results[0].error.info["abc"]: dict[Any, Any]
.results[0].error.message: str

CharmDownloader: 1
.DownloadApplicationCharms()
in: Entities
.entities[0]: Entity
.entities[0].tag: str
out: ErrorResults
.results[0]: ErrorResult
.results[0].error: Error
.results[0].error.code: str
.results[0].error.info["abc"]: dict[Any, Any]
.results[0].error.message: str

CharmDownloader: 1
.WatchApplicationsWithPendingCharms()
in: None
out: StringsWatchResult
.changes[0]: str
.error: Error
.error.code: str
.error.info["abc"]: dict[Any, Any]
.error.message: str
.watcher-id: str

Charms: 7
.AddCharm()
in: AddCharmWithOrigin
.charm-origin: CharmOrigin
.charm-origin.architecture: str
.charm-origin.base: Base
.charm-origin.base.channel: str
.charm-origin.base.name: str
.charm-origin.branch: str
.charm-origin.hash: str
.charm-origin.id: str
.charm-origin.instance-key: str
.charm-origin.revision: int
.charm-origin.risk: str
.charm-origin.source: str
.charm-origin.track: str
.charm-origin.type: str
.force: bool
.url: str
out: CharmOriginResult
.charm-origin: CharmOrigin
.charm-origin.architecture: str
.charm-origin.base: Base
.charm-origin.base.channel: str
.charm-origin.base.name: str
.charm-origin.branch: str
.charm-origin.hash: str
.charm-origin.id: str
.charm-origin.instance-key: str
.charm-origin.revision: int
.charm-origin.risk: str
.charm-origin.source: str
.charm-origin.track: str
.charm-origin.type: str
.error: Error
.error.code: str
.error.info["abc"]: dict[Any, Any]
.error.message: str

Charms: 7
.CharmInfo()
in: CharmURL
.url: str
out: Charm
.actions: CharmActions
.actions.specs["abc"]: CharmActionSpec
.actions.specs["abc"].description: str
.actions.specs["abc"].params["abc"]: dict[Any, Any]
.config["abc"]: CharmOption
.config["abc"].default: dict[Any, Any]
.config["abc"].description: str
.config["abc"].type: str
.lxd-profile: CharmLXDProfile
.lxd-profile.config["abc"]: str
.lxd-profile.description: str
.lxd-profile.devices["abc"]["abc"]: str
.manifest: CharmManifest
.manifest.bases[0]: CharmBase
.manifest.bases[0].architectures[0]: str
.manifest.bases[0].channel: str
.manifest.bases[0].name: str
.meta: CharmMeta
.meta.assumes-expr: ExpressionTree
.meta.assumes-expr.Expression: dict[Any, Any]
.meta.categories[0]: str
.meta.charm-user: str
.meta.containers["abc"]: CharmContainer
.meta.containers["abc"].gid: int
.meta.containers["abc"].mounts[0]: CharmMount
.meta.containers["abc"].mounts[0].location: str
.meta.containers["abc"].mounts[0].storage: str
.meta.containers["abc"].resource: str
.meta.containers["abc"].uid: int
.meta.deployment: CharmDeployment
.meta.deployment.min-version: str
.meta.deployment.mode: str
.meta.deployment.service: str
.meta.deployment.type: str
.meta.description: str
.meta.devices["abc"]: CharmDevice
.meta.devices["abc"].CountMax: int
.meta.devices["abc"].CountMin: int
.meta.devices["abc"].Description: str
.meta.devices["abc"].Name: str
.meta.devices["abc"].Type: str
.meta.extra-bindings["abc"]: str
.meta.min-juju-version: str
.meta.name: str
.meta.payload-classes["abc"]: CharmPayloadClass
.meta.payload-classes["abc"].name: str
.meta.payload-classes["abc"].type: str
.meta.peers["abc"]: CharmRelation
.meta.peers["abc"].interface: str
.meta.peers["abc"].limit: int
.meta.peers["abc"].name: str
.meta.peers["abc"].optional: bool
.meta.peers["abc"].role: str
.meta.peers["abc"].scope: str
.meta.provides["abc"]: CharmRelation
.meta.provides["abc"].interface: str
.meta.provides["abc"].limit: int
.meta.provides["abc"].name: str
.meta.provides["abc"].optional: bool
.meta.provides["abc"].role: str
.meta.provides["abc"].scope: str
.meta.requires["abc"]: CharmRelation
.meta.requires["abc"].interface: str
.meta.requires["abc"].limit: int
.meta.requires["abc"].name: str
.meta.requires["abc"].optional: bool
.meta.requires["abc"].role: str
.meta.requires["abc"].scope: str
.meta.resources["abc"]: CharmResourceMeta
.meta.resources["abc"].description: str
.meta.resources["abc"].name: str
.meta.resources["abc"].path: str
.meta.resources["abc"].type: str
.meta.series[0]: str
.meta.storage["abc"]: CharmStorage
.meta.storage["abc"].count-max: int
.meta.storage["abc"].count-min: int
.meta.storage["abc"].description: str
.meta.storage["abc"].location: str
.meta.storage["abc"].minimum-size: int
.meta.storage["abc"].name: str
.meta.storage["abc"].properties[0]: str
.meta.storage["abc"].read-only: bool
.meta.storage["abc"].shared: bool
.meta.storage["abc"].type: str
.meta.subordinate: bool
.meta.summary: str
.meta.tags[0]: str
.meta.terms[0]: str
.metrics: CharmMetrics
.metrics.metrics["abc"]: CharmMetric
.metrics.metrics["abc"].description: str
.metrics.metrics["abc"].type: str
.metrics.plan: CharmPlan
.metrics.plan.required: bool
.revision: int
.url: str

Charms: 7
.CheckCharmPlacement()
in: ApplicationCharmPlacements
.placements[0]: ApplicationCharmPlacement
.placements[0].application: str
.placements[0].charm-url: str
out: ErrorResults
.results[0]: ErrorResult
.results[0].error: Error
.results[0].error.code: str
.results[0].error.info["abc"]: dict[Any, Any]
.results[0].error.message: str

Charms: 7
.GetDownloadInfos()
in: CharmURLAndOrigins
.entities[0]: CharmURLAndOrigin
.entities[0].charm-origin: CharmOrigin
.entities[0].charm-origin.architecture: str
.entities[0].charm-origin.base: Base
.entities[0].charm-origin.base.channel: str
.entities[0].charm-origin.base.name: str
.entities[0].charm-origin.branch: str
.entities[0].charm-origin.hash: str
.entities[0].charm-origin.id: str
.entities[0].charm-origin.instance-key: str
.entities[0].charm-origin.revision: int
.entities[0].charm-origin.risk: str
.entities[0].charm-origin.source: str
.entities[0].charm-origin.track: str
.entities[0].charm-origin.type: str
.entities[0].charm-url: str
.entities[0].macaroon: Macaroon
.entities[0].macaroon: dict[Any, Any]
out: DownloadInfoResults
.results[0]: DownloadInfoResult
.results[0].charm-origin: CharmOrigin
.results[0].charm-origin.architecture: str
.results[0].charm-origin.base: Base
.results[0].charm-origin.base.channel: str
.results[0].charm-origin.base.name: str
.results[0].charm-origin.branch: str
.results[0].charm-origin.hash: str
.results[0].charm-origin.id: str
.results[0].charm-origin.instance-key: str
.results[0].charm-origin.revision: int
.results[0].charm-origin.risk: str
.results[0].charm-origin.source: str
.results[0].charm-origin.track: str
.results[0].charm-origin.type: str
.results[0].url: str

Charms: 7
.IsMetered()
in: CharmURL
.url: str
out: IsMeteredResult
.metered: bool

Charms: 7
.List()
in: CharmsList
.names[0]: str
out: CharmsListResult
.charm-urls[0]: str

Charms: 7
.ListCharmResources()
in: CharmURLAndOrigins
.entities[0]: CharmURLAndOrigin
.entities[0].charm-origin: CharmOrigin
.entities[0].charm-origin.architecture: str
.entities[0].charm-origin.base: Base
.entities[0].charm-origin.base.channel: str
.entities[0].charm-origin.base.name: str
.entities[0].charm-origin.branch: str
.entities[0].charm-origin.hash: str
.entities[0].charm-origin.id: str
.entities[0].charm-origin.instance-key: str
.entities[0].charm-origin.revision: int
.entities[0].charm-origin.risk: str
.entities[0].charm-origin.source: str
.entities[0].charm-origin.track: str
.entities[0].charm-origin.type: str
.entities[0].charm-url: str
.entities[0].macaroon: Macaroon
.entities[0].macaroon: dict[Any, Any]
out: CharmResourcesResults
.results[0][0]: CharmResourceResult
.results[0][0].CharmResource: CharmResource
.results[0][0].CharmResource.description: str
.results[0][0].CharmResource.fingerprint[0]: int
.results[0][0].CharmResource.name: str
.results[0][0].CharmResource.origin: str
.results[0][0].CharmResource.path: str
.results[0][0].CharmResource.revision: int
.results[0][0].CharmResource.size: int
.results[0][0].CharmResource.type: str
.results[0][0].ErrorResult: ErrorResult
.results[0][0].ErrorResult.error: Error
.results[0][0].ErrorResult.error.code: str
.results[0][0].ErrorResult.error.info["abc"]: dict[Any, Any]
.results[0][0].ErrorResult.error.message: str
.results[0][0].description: str
.results[0][0].error: Error
.results[0][0].error.code: str
.results[0][0].error.info["abc"]: dict[Any, Any]
.results[0][0].error.message: str
.results[0][0].fingerprint[0]: int
.results[0][0].name: str
.results[0][0].origin: str
.results[0][0].path: str
.results[0][0].revision: int
.results[0][0].size: int
.results[0][0].type: str

Charms: 7
.ResolveCharms()
in: ResolveCharmsWithChannel
.macaroon: Macaroon
.macaroon: dict[Any, Any]
.resolve[0]: ResolveCharmWithChannel
.resolve[0].charm-origin: CharmOrigin
.resolve[0].charm-origin.architecture: str
.resolve[0].charm-origin.base: Base
.resolve[0].charm-origin.base.channel: str
.resolve[0].charm-origin.base.name: str
.resolve[0].charm-origin.branch: str
.resolve[0].charm-origin.hash: str
.resolve[0].charm-origin.id: str
.resolve[0].charm-origin.instance-key: str
.resolve[0].charm-origin.revision: int
.resolve[0].charm-origin.risk: str
.resolve[0].charm-origin.source: str
.resolve[0].charm-origin.track: str
.resolve[0].charm-origin.type: str
.resolve[0].reference: str
.resolve[0].switch-charm: bool
out: ResolveCharmWithChannelResults
.Results[0]: ResolveCharmWithChannelResult
.Results[0].charm-origin: CharmOrigin
.Results[0].charm-origin.architecture: str
.Results[0].charm-origin.base: Base
.Results[0].charm-origin.base.channel: str
.Results[0].charm-origin.base.name: str
.Results[0].charm-origin.branch: str
.Results[0].charm-origin.hash: str
.Results[0].charm-origin.id: str
.Results[0].charm-origin.instance-key: str
.Results[0].charm-origin.revision: int
.Results[0].charm-origin.risk: str
.Results[0].charm-origin.source: str
.Results[0].charm-origin.track: str
.Results[0].charm-origin.type: str
.Results[0].error: Error
.Results[0].error.code: str
.Results[0].error.info["abc"]: dict[Any, Any]
.Results[0].error.message: str
.Results[0].supported-bases[0]: Base
.Results[0].supported-bases[0].channel: str
.Results[0].supported-bases[0].name: str
.Results[0].url: str

Client: 7
.FindTools()
in: FindToolsParams
.agentstream: str
.arch: str
.major: int
.number: Number
.number.Build: int
.number.Major: int
.number.Minor: int
.number.Patch: int
.number.Tag: str
.os-type: str
out: FindToolsResult
.error: Error
.error.code: str
.error.info["abc"]: dict[Any, Any]
.error.message: str
.list[0]: Tools
.list[0].sha256: str
.list[0].size: int
.list[0].url: str
.list[0].version: Binary
.list[0].version.Arch: str
.list[0].version.Build: int
.list[0].version.Major: int
.list[0].version.Minor: int
.list[0].version.Number: Number
.list[0].version.Number.Build: int
.list[0].version.Number.Major: int
.list[0].version.Number.Minor: int
.list[0].version.Number.Patch: int
.list[0].version.Number.Tag: str
.list[0].version.Patch: int
.list[0].version.Release: str
.list[0].version.Tag: str

Client: 7
.FullStatus()
in: StatusParams
.include-storage: bool
.patterns[0]: str
out: FullStatus
.applications["abc"]: ApplicationStatus
.applications["abc"].base: Base
.applications["abc"].base.channel: str
.applications["abc"].base.name: str
.applications["abc"].can-upgrade-to: str
.applications["abc"].charm: str
.applications["abc"].charm-channel: str
.applications["abc"].charm-profile: str
.applications["abc"].charm-version: str
.applications["abc"].endpoint-bindings["abc"]: str
.applications["abc"].err: Error
.applications["abc"].err.code: str
.applications["abc"].err.info["abc"]: dict[Any, Any]
.applications["abc"].err.message: str
.applications["abc"].exposed: bool
.applications["abc"].exposed-endpoints["abc"]: ExposedEndpoint
.applications["abc"].exposed-endpoints["abc"].expose-to-cidrs[0]: str
.applications["abc"].exposed-endpoints["abc"].expose-to-spaces[0]: str
.applications["abc"].int: int
.applications["abc"].life: str
.applications["abc"].meter-statuses["abc"]: MeterStatus
.applications["abc"].meter-statuses["abc"].color: str
.applications["abc"].meter-statuses["abc"].message: str
.applications["abc"].provider-id: str
.applications["abc"].public-address: str
.applications["abc"].relations["abc"][0]: str
.applications["abc"].status: DetailedStatus
.applications["abc"].status.data["abc"]: dict[Any, Any]
.applications["abc"].status.err: Error
.applications["abc"].status.err.code: str
.applications["abc"].status.err.info["abc"]: dict[Any, Any]
.applications["abc"].status.err.message: str
.applications["abc"].status.info: str
.applications["abc"].status.kind: str
.applications["abc"].status.life: str
.applications["abc"].status.since: str
.applications["abc"].status.status: str
.applications["abc"].status.version: str
.applications["abc"].subordinate-to[0]: str
.applications["abc"].units["abc"]: UnitStatus
.applications["abc"].units["abc"].address: str
.applications["abc"].units["abc"].agent-status: DetailedStatus
.applications["abc"].units["abc"].agent-status.data["abc"]: dict[Any, Any]
.applications["abc"].units["abc"].agent-status.err: Error
.applications["abc"].units["abc"].agent-status.err.code: str
.applications["abc"].units["abc"].agent-status.err.info["abc"]: dict[Any, Any]
.applications["abc"].units["abc"].agent-status.err.message: str
.applications["abc"].units["abc"].agent-status.info: str
.applications["abc"].units["abc"].agent-status.kind: str
.applications["abc"].units["abc"].agent-status.life: str
.applications["abc"].units["abc"].agent-status.since: str
.applications["abc"].units["abc"].agent-status.status: str
.applications["abc"].units["abc"].agent-status.version: str
.applications["abc"].units["abc"].charm: str
.applications["abc"].units["abc"].leader: bool
.applications["abc"].units["abc"].machine: str
.applications["abc"].units["abc"].opened-ports[0]: str
.applications["abc"].units["abc"].provider-id: str
.applications["abc"].units["abc"].public-address: str
.applications["abc"].units["abc"].subordinates["abc"]: UnitStatus
.applications["abc"].units["abc"].workload-status: DetailedStatus
.applications["abc"].units["abc"].workload-status.data["abc"]: dict[Any, Any]
.applications["abc"].units["abc"].workload-status.err: Error
.applications["abc"].units["abc"].workload-status.err.code: str
.applications["abc"].units["abc"].workload-status.err.info["abc"]: dict[Any, Any]
.applications["abc"].units["abc"].workload-status.err.message: str
.applications["abc"].units["abc"].workload-status.info: str
.applications["abc"].units["abc"].workload-status.kind: str
.applications["abc"].units["abc"].workload-status.life: str
.applications["abc"].units["abc"].workload-status.since: str
.applications["abc"].units["abc"].workload-status.status: str
.applications["abc"].units["abc"].workload-status.version: str
.applications["abc"].units["abc"].workload-version: str
.applications["abc"].workload-version: str
.branches["abc"]: BranchStatus
.branches["abc"].assigned-units["abc"][0]: str
.branches["abc"].created: int
.branches["abc"].created-by: str
.controller-timestamp: str
.filesystems[0]: FilesystemDetails
.filesystems[0].filesystem-tag: str
.filesystems[0].info: FilesystemInfo
.filesystems[0].info.filesystem-id: str
.filesystems[0].info.pool: str
.filesystems[0].info.size: int
.filesystems[0].life: str
.filesystems[0].machine-attachments["abc"]: FilesystemAttachmentDetails
.filesystems[0].machine-attachments["abc"].FilesystemAttachmentInfo: FilesystemAttachmentInfo
.filesystems[0].machine-attachments["abc"].FilesystemAttachmentInfo.mount-point: str
.filesystems[0].machine-attachments["abc"].FilesystemAttachmentInfo.read-only: bool
.filesystems[0].machine-attachments["abc"].life: str
.filesystems[0].machine-attachments["abc"].mount-point: str
.filesystems[0].machine-attachments["abc"].read-only: bool
.filesystems[0].status: EntityStatus
.filesystems[0].status.data["abc"]: dict[Any, Any]
.filesystems[0].status.info: str
.filesystems[0].status.since: str
.filesystems[0].status.status: str
.filesystems[0].storage: StorageDetails
.filesystems[0].storage.attachments["abc"]: StorageAttachmentDetails
.filesystems[0].storage.attachments["abc"].life: str
.filesystems[0].storage.attachments["abc"].location: str
.filesystems[0].storage.attachments["abc"].machine-tag: str
.filesystems[0].storage.attachments["abc"].storage-tag: str
.filesystems[0].storage.attachments["abc"].unit-tag: str
.filesystems[0].storage.kind: int
.filesystems[0].storage.life: str
.filesystems[0].storage.owner-tag: str
.filesystems[0].storage.persistent: bool
.filesystems[0].storage.status: EntityStatus
.filesystems[0].storage.status.data["abc"]: dict[Any, Any]
.filesystems[0].storage.status.info: str
.filesystems[0].storage.status.since: str
.filesystems[0].storage.status.status: str
.filesystems[0].storage.storage-tag: str
.filesystems[0].unit-attachments["abc"]: FilesystemAttachmentDetails
.filesystems[0].unit-attachments["abc"].FilesystemAttachmentInfo: FilesystemAttachmentInfo
.filesystems[0].unit-attachments["abc"].FilesystemAttachmentInfo.mount-point: str
.filesystems[0].unit-attachments["abc"].FilesystemAttachmentInfo.read-only: bool
.filesystems[0].unit-attachments["abc"].life: str
.filesystems[0].unit-attachments["abc"].mount-point: str
.filesystems[0].unit-attachments["abc"].read-only: bool
.filesystems[0].volume-tag: str
.machines["abc"]: MachineStatus
.machines["abc"].agent-status: DetailedStatus
.machines["abc"].agent-status.data["abc"]: dict[Any, Any]
.machines["abc"].agent-status.err: Error
.machines["abc"].agent-status.err.code: str
.machines["abc"].agent-status.err.info["abc"]: dict[Any, Any]
.machines["abc"].agent-status.err.message: str
.machines["abc"].agent-status.info: str
.machines["abc"].agent-status.kind: str
.machines["abc"].agent-status.life: str
.machines["abc"].agent-status.since: str
.machines["abc"].agent-status.status: str
.machines["abc"].agent-status.version: str
.machines["abc"].base: Base
.machines["abc"].base.channel: str
.machines["abc"].base.name: str
.machines["abc"].constraints: str
.machines["abc"].containers["abc"]: MachineStatus
.machines["abc"].display-name: str
.machines["abc"].dns-name: str
.machines["abc"].hardware: str
.machines["abc"].has-vote: bool
.machines["abc"].hostname: str
.machines["abc"].id: str
.machines["abc"].instance-id: str
.machines["abc"].instance-status: DetailedStatus
.machines["abc"].instance-status.data["abc"]: dict[Any, Any]
.machines["abc"].instance-status.err: Error
.machines["abc"].instance-status.err.code: str
.machines["abc"].instance-status.err.info["abc"]: dict[Any, Any]
.machines["abc"].instance-status.err.message: str
.machines["abc"].instance-status.info: str
.machines["abc"].instance-status.kind: str
.machines["abc"].instance-status.life: str
.machines["abc"].instance-status.since: str
.machines["abc"].instance-status.status: str
.machines["abc"].instance-status.version: str
.machines["abc"].ip-addresses[0]: str
.machines["abc"].jobs[0]: str
.machines["abc"].lxd-profiles["abc"]: LXDProfile
.machines["abc"].lxd-profiles["abc"].config["abc"]: str
.machines["abc"].lxd-profiles["abc"].description: str
.machines["abc"].lxd-profiles["abc"].devices["abc"]["abc"]: str
.machines["abc"].modification-status: DetailedStatus
.machines["abc"].modification-status.data["abc"]: dict[Any, Any]
.machines["abc"].modification-status.err: Error
.machines["abc"].modification-status.err.code: str
.machines["abc"].modification-status.err.info["abc"]: dict[Any, Any]
.machines["abc"].modification-status.err.message: str
.machines["abc"].modification-status.info: str
.machines["abc"].modification-status.kind: str
.machines["abc"].modification-status.life: str
.machines["abc"].modification-status.since: str
.machines["abc"].modification-status.status: str
.machines["abc"].modification-status.version: str
.machines["abc"].network-interfaces["abc"]: NetworkInterface
.machines["abc"].network-interfaces["abc"].dns-nameservers[0]: str
.machines["abc"].network-interfaces["abc"].gateway: str
.machines["abc"].network-interfaces["abc"].ip-addresses[0]: str
.machines["abc"].network-interfaces["abc"].is-up: bool
.machines["abc"].network-interfaces["abc"].mac-address: str
.machines["abc"].network-interfaces["abc"].space: str
.machines["abc"].primary-controller-machine: bool
.machines["abc"].wants-vote: bool
.model: ModelStatusInfo
.model.available-version: str
.model.cloud-tag: str
.model.meter-status: MeterStatus
.model.meter-status.color: str
.model.meter-status.message: str
.model.model-status: DetailedStatus
.model.model-status.data["abc"]: dict[Any, Any]
.model.model-status.err: Error
.model.model-status.err.code: str
.model.model-status.err.info["abc"]: dict[Any, Any]
.model.model-status.err.message: str
.model.model-status.info: str
.model.model-status.kind: str
.model.model-status.life: str
.model.model-status.since: str
.model.model-status.status: str
.model.model-status.version: str
.model.name: str
.model.region: str
.model.sla: str
.model.type: str
.model.version: str
.offers["abc"]: ApplicationOfferStatus
.offers["abc"].active-connected-count: int
.offers["abc"].application-name: str
.offers["abc"].charm: str
.offers["abc"].endpoints["abc"]: RemoteEndpoint
.offers["abc"].endpoints["abc"].interface: str
.offers["abc"].endpoints["abc"].limit: int
.offers["abc"].endpoints["abc"].name: str
.offers["abc"].endpoints["abc"].role: str
.offers["abc"].err: Error
.offers["abc"].err.code: str
.offers["abc"].err.info["abc"]: dict[Any, Any]
.offers["abc"].err.message: str
.offers["abc"].offer-name: str
.offers["abc"].total-connected-count: int
.relations[0]: RelationStatus
.relations[0].endpoints[0]: EndpointStatus
.relations[0].endpoints[0].application: str
.relations[0].endpoints[0].name: str
.relations[0].endpoints[0].role: str
.relations[0].endpoints[0].subordinate: bool
.relations[0].id: int
.relations[0].interface: str
.relations[0].key: str
.relations[0].scope: str
.relations[0].status: DetailedStatus
.relations[0].status.data["abc"]: dict[Any, Any]
.relations[0].status.err: Error
.relations[0].status.err.code: str
.relations[0].status.err.info["abc"]: dict[Any, Any]
.relations[0].status.err.message: str
.relations[0].status.info: str
.relations[0].status.kind: str
.relations[0].status.life: str
.relations[0].status.since: str
.relations[0].status.status: str
.relations[0].status.version: str
.remote-applications["abc"]: RemoteApplicationStatus
.remote-applications["abc"].endpoints[0]: RemoteEndpoint
.remote-applications["abc"].endpoints[0].interface: str
.remote-applications["abc"].endpoints[0].limit: int
.remote-applications["abc"].endpoints[0].name: str
.remote-applications["abc"].endpoints[0].role: str
.remote-applications["abc"].err: Error
.remote-applications["abc"].err.code: str
.remote-applications["abc"].err.info["abc"]: dict[Any, Any]
.remote-applications["abc"].err.message: str
.remote-applications["abc"].life: str
.remote-applications["abc"].offer-name: str
.remote-applications["abc"].offer-url: str
.remote-applications["abc"].relations["abc"][0]: str
.remote-applications["abc"].status: DetailedStatus
.remote-applications["abc"].status.data["abc"]: dict[Any, Any]
.remote-applications["abc"].status.err: Error
.remote-applications["abc"].status.err.code: str
.remote-applications["abc"].status.err.info["abc"]: dict[Any, Any]
.remote-applications["abc"].status.err.message: str
.remote-applications["abc"].status.info: str
.remote-applications["abc"].status.kind: str
.remote-applications["abc"].status.life: str
.remote-applications["abc"].status.since: str
.remote-applications["abc"].status.status: str
.remote-applications["abc"].status.version: str
.storage[0]: StorageDetails
.storage[0].attachments["abc"]: StorageAttachmentDetails
.storage[0].attachments["abc"].life: str
.storage[0].attachments["abc"].location: str
.storage[0].attachments["abc"].machine-tag: str
.storage[0].attachments["abc"].storage-tag: str
.storage[0].attachments["abc"].unit-tag: str
.storage[0].kind: int
.storage[0].life: str
.storage[0].owner-tag: str
.storage[0].persistent: bool
.storage[0].status: EntityStatus
.storage[0].status.data["abc"]: dict[Any, Any]
.storage[0].status.info: str
.storage[0].status.since: str
.storage[0].status.status: str
.storage[0].storage-tag: str
.volumes[0]: VolumeDetails
.volumes[0].info: VolumeInfo
.volumes[0].info.hardware-id: str
.volumes[0].info.persistent: bool
.volumes[0].info.pool: str
.volumes[0].info.size: int
.volumes[0].info.volume-id: str
.volumes[0].info.wwn: str
.volumes[0].life: str
.volumes[0].machine-attachments["abc"]: VolumeAttachmentDetails
.volumes[0].machine-attachments["abc"].VolumeAttachmentInfo: VolumeAttachmentInfo
.volumes[0].machine-attachments["abc"].VolumeAttachmentInfo.bus-address: str
.volumes[0].machine-attachments["abc"].VolumeAttachmentInfo.device-link: str
.volumes[0].machine-attachments["abc"].VolumeAttachmentInfo.device-name: str
.volumes[0].machine-attachments["abc"].VolumeAttachmentInfo.plan-info: VolumeAttachmentPlanInfo
.volumes[0].machine-attachments["abc"].VolumeAttachmentInfo.plan-info.device-attributes["abc"]: str
.volumes[0].machine-attachments["abc"].VolumeAttachmentInfo.plan-info.device-type: str
.volumes[0].machine-attachments["abc"].VolumeAttachmentInfo.read-only: bool
.volumes[0].machine-attachments["abc"].bus-address: str
.volumes[0].machine-attachments["abc"].device-link: str
.volumes[0].machine-attachments["abc"].device-name: str
.volumes[0].machine-attachments["abc"].life: str
.volumes[0].machine-attachments["abc"].plan-info: VolumeAttachmentPlanInfo
.volumes[0].machine-attachments["abc"].plan-info.device-attributes["abc"]: str
.volumes[0].machine-attachments["abc"].plan-info.device-type: str
.volumes[0].machine-attachments["abc"].read-only: bool
.volumes[0].status: EntityStatus
.volumes[0].status.data["abc"]: dict[Any, Any]
.volumes[0].status.info: str
.volumes[0].status.since: str
.volumes[0].status.status: str
.volumes[0].storage: StorageDetails
.volumes[0].storage.attachments["abc"]: StorageAttachmentDetails
.volumes[0].storage.attachments["abc"].life: str
.volumes[0].storage.attachments["abc"].location: str
.volumes[0].storage.attachments["abc"].machine-tag: str
.volumes[0].storage.attachments["abc"].storage-tag: str
.volumes[0].storage.attachments["abc"].unit-tag: str
.volumes[0].storage.kind: int
.volumes[0].storage.life: str
.volumes[0].storage.owner-tag: str
.volumes[0].storage.persistent: bool
.volumes[0].storage.status: EntityStatus
.volumes[0].storage.status.data["abc"]: dict[Any, Any]
.volumes[0].storage.status.info: str
.volumes[0].storage.status.since: str
.volumes[0].storage.status.status: str
.volumes[0].storage.storage-tag: str
.volumes[0].unit-attachments["abc"]: VolumeAttachmentDetails
.volumes[0].unit-attachments["abc"].VolumeAttachmentInfo: VolumeAttachmentInfo
.volumes[0].unit-attachments["abc"].VolumeAttachmentInfo.bus-address: str
.volumes[0].unit-attachments["abc"].VolumeAttachmentInfo.device-link: str
.volumes[0].unit-attachments["abc"].VolumeAttachmentInfo.device-name: str
.volumes[0].unit-attachments["abc"].VolumeAttachmentInfo.plan-info: VolumeAttachmentPlanInfo
.volumes[0].unit-attachments["abc"].VolumeAttachmentInfo.plan-info.device-attributes["abc"]: str
.volumes[0].unit-attachments["abc"].VolumeAttachmentInfo.plan-info.device-type: str
.volumes[0].unit-attachments["abc"].VolumeAttachmentInfo.read-only: bool
.volumes[0].unit-attachments["abc"].bus-address: str
.volumes[0].unit-attachments["abc"].device-link: str
.volumes[0].unit-attachments["abc"].device-name: str
.volumes[0].unit-attachments["abc"].life: str
.volumes[0].unit-attachments["abc"].plan-info: VolumeAttachmentPlanInfo
.volumes[0].unit-attachments["abc"].plan-info.device-attributes["abc"]: str
.volumes[0].unit-attachments["abc"].plan-info.device-type: str
.volumes[0].unit-attachments["abc"].read-only: bool
.volumes[0].volume-tag: str

Client: 7
.StatusHistory()
in: StatusHistoryRequests
.requests[0]: StatusHistoryRequest
.requests[0].filter: StatusHistoryFilter
.requests[0].filter.date: str
.requests[0].filter.delta: int
.requests[0].filter.exclude[0]: str
.requests[0].filter.size: int
.requests[0].historyKind: str
.requests[0].size: int
.requests[0].tag: str
out: StatusHistoryResults
.results[0]: StatusHistoryResult
.results[0].error: Error
.results[0].error.code: str
.results[0].error.info["abc"]: dict[Any, Any]
.results[0].error.message: str
.results[0].history: History
.results[0].history.error: Error
.results[0].history.error.code: str
.results[0].history.error.info["abc"]: dict[Any, Any]
.results[0].history.error.message: str
.results[0].history.statuses[0]: DetailedStatus
.results[0].history.statuses[0].data["abc"]: dict[Any, Any]
.results[0].history.statuses[0].err: Error
.results[0].history.statuses[0].err.code: str
.results[0].history.statuses[0].err.info["abc"]: dict[Any, Any]
.results[0].history.statuses[0].err.message: str
.results[0].history.statuses[0].info: str
.results[0].history.statuses[0].kind: str
.results[0].history.statuses[0].life: str
.results[0].history.statuses[0].since: str
.results[0].history.statuses[0].status: str
.results[0].history.statuses[0].version: str

Client: 7
.WatchAll()
in: None
out: AllWatcherId
.watcher-id: str

CredentialManager: 1
.InvalidateModelCredential()
in: InvalidateCredentialArg
.reason: str
out: ErrorResult
.error: Error
.error.code: str
.error.info["abc"]: dict[Any, Any]
.error.message: str

CredentialValidator: 2
.InvalidateModelCredential()
in: InvalidateCredentialArg
.reason: str
out: ErrorResult
.error: Error
.error.code: str
.error.info["abc"]: dict[Any, Any]
.error.message: str

CredentialValidator: 2
.ModelCredential()
in: None
out: ModelCredential
.credential-tag: str
.exists: bool
.model-tag: str
.valid: bool

CredentialValidator: 2
.WatchCredential()
in: Entity
.tag: str
out: NotifyWatchResult
.NotifyWatcherId: str
.error: Error
.error.code: str
.error.info["abc"]: dict[Any, Any]
.error.message: str

CredentialValidator: 2
.WatchModelCredential()
in: None
out: NotifyWatchResult
.NotifyWatcherId: str
.error: Error
.error.code: str
.error.info["abc"]: dict[Any, Any]
.error.message: str

CrossModelRelations: 3
.PublishIngressNetworkChanges()
in: IngressNetworksChanges
.changes[0]: IngressNetworksChangeEvent
.changes[0].bakery-version: int
.changes[0].ingress-required: bool
.changes[0].macaroons[0]: Macaroon
.changes[0].macaroons[0]: dict[Any, Any]
.changes[0].networks[0]: str
.changes[0].relation-token: str
out: ErrorResults
.results[0]: ErrorResult
.results[0].error: Error
.results[0].error.code: str
.results[0].error.info["abc"]: dict[Any, Any]
.results[0].error.message: str

CrossModelRelations: 3
.PublishRelationChanges()
in: RemoteRelationsChanges
.changes[0]: RemoteRelationChangeEvent
.changes[0].application-settings["abc"]: dict[Any, Any]
.changes[0].application-token: str
.changes[0].bakery-version: int
.changes[0].changed-units[0]: RemoteRelationUnitChange
.changes[0].changed-units[0].settings["abc"]: dict[Any, Any]
.changes[0].changed-units[0].unit-id: int
.changes[0].departed-units[0]: int
.changes[0].force-cleanup: bool
.changes[0].life: str
.changes[0].macaroons[0]: Macaroon
.changes[0].macaroons[0]: dict[Any, Any]
.changes[0].relation-token: str
.changes[0].suspended: bool
.changes[0].suspended-reason: str
.changes[0].unit-count: int
out: ErrorResults
.results[0]: ErrorResult
.results[0].error: Error
.results[0].error.code: str
.results[0].error.info["abc"]: dict[Any, Any]
.results[0].error.message: str

CrossModelRelations: 3
.RegisterRemoteRelations()
in: RegisterRemoteRelationArgs
.relations[0]: RegisterRemoteRelationArg
.relations[0].application-token: str
.relations[0].bakery-version: int
.relations[0].consume-version: int
.relations[0].local-endpoint-name: str
.relations[0].macaroons[0]: Macaroon
.relations[0].macaroons[0]: dict[Any, Any]
.relations[0].offer-uuid: str
.relations[0].relation-token: str
.relations[0].remote-endpoint: RemoteEndpoint
.relations[0].remote-endpoint.interface: str
.relations[0].remote-endpoint.limit: int
.relations[0].remote-endpoint.name: str
.relations[0].remote-endpoint.role: str
.relations[0].source-model-tag: str
out: RegisterRemoteRelationResults
.results[0]: RegisterRemoteRelationResult
.results[0].error: Error
.results[0].error.code: str
.results[0].error.info["abc"]: dict[Any, Any]
.results[0].error.message: str
.results[0].result: RemoteRelationDetails
.results[0].result.bakery-version: int
.results[0].result.macaroon: Macaroon
.results[0].result.macaroon: dict[Any, Any]
.results[0].result.relation-token: str

CrossModelRelations: 3
.WatchConsumedSecretsChanges()
in: WatchRemoteSecretChangesArgs
.relations[0]: WatchRemoteSecretChangesArg
.relations[0].application-token: str
.relations[0].bakery-version: int
.relations[0].macaroons[0]: Macaroon
.relations[0].macaroons[0]: dict[Any, Any]
.relations[0].relation-token: str
out: SecretRevisionWatchResults
.results[0]: SecretRevisionWatchResult
.results[0].changes[0]: SecretRevisionChange
.results[0].changes[0].revision: int
.results[0].changes[0].uri: str
.results[0].error: Error
.results[0].error.code: str
.results[0].error.info["abc"]: dict[Any, Any]
.results[0].error.message: str
.results[0].watcher-id: str

CrossModelRelations: 3
.WatchEgressAddressesForRelations()
in: RemoteEntityArgs
.args[0]: RemoteEntityArg
.args[0].bakery-version: int
.args[0].macaroons[0]: Macaroon
.args[0].macaroons[0]: dict[Any, Any]
.args[0].relation-token: str
out: StringsWatchResults
.results[0]: StringsWatchResult
.results[0].changes[0]: str
.results[0].error: Error
.results[0].error.code: str
.results[0].error.info["abc"]: dict[Any, Any]
.results[0].error.message: str
.results[0].watcher-id: str

CrossModelRelations: 3
.WatchOfferStatus()
in: OfferArgs
.args[0]: OfferArg
.args[0].bakery-version: int
.args[0].macaroons[0]: Macaroon
.args[0].macaroons[0]: dict[Any, Any]
.args[0].offer-uuid: str
out: OfferStatusWatchResults
.results[0]: OfferStatusWatchResult
.results[0].changes[0]: OfferStatusChange
.results[0].changes[0].offer-name: str
.results[0].changes[0].status: EntityStatus
.results[0].changes[0].status.data["abc"]: dict[Any, Any]
.results[0].changes[0].status.info: str
.results[0].changes[0].status.since: str
.results[0].changes[0].status.status: str
.results[0].error: Error
.results[0].error.code: str
.results[0].error.info["abc"]: dict[Any, Any]
.results[0].error.message: str
.results[0].watcher-id: str

CrossModelRelations: 3
.WatchRelationChanges()
in: RemoteEntityArgs
.args[0]: RemoteEntityArg
.args[0].bakery-version: int
.args[0].macaroons[0]: Macaroon
.args[0].macaroons[0]: dict[Any, Any]
.args[0].relation-token: str
out: RemoteRelationWatchResults
.results[0]: RemoteRelationWatchResult
.results[0].changes: RemoteRelationChangeEvent
.results[0].changes.application-settings["abc"]: dict[Any, Any]
.results[0].changes.application-token: str
.results[0].changes.bakery-version: int
.results[0].changes.changed-units[0]: RemoteRelationUnitChange
.results[0].changes.changed-units[0].settings["abc"]: dict[Any, Any]
.results[0].changes.changed-units[0].unit-id: int
.results[0].changes.departed-units[0]: int
.results[0].changes.force-cleanup: bool
.results[0].changes.life: str
.results[0].changes.macaroons[0]: Macaroon
.results[0].changes.macaroons[0]: dict[Any, Any]
.results[0].changes.relation-token: str
.results[0].changes.suspended: bool
.results[0].changes.suspended-reason: str
.results[0].changes.unit-count: int
.results[0].error: Error
.results[0].error.code: str
.results[0].error.info["abc"]: dict[Any, Any]
.results[0].error.message: str
.results[0].watcher-id: str

CrossModelRelations: 3
.WatchRelationsSuspendedStatus()
in: RemoteEntityArgs
.args[0]: RemoteEntityArg
.args[0].bakery-version: int
.args[0].macaroons[0]: Macaroon
.args[0].macaroons[0]: dict[Any, Any]
.args[0].relation-token: str
out: RelationStatusWatchResults
.results[0]: RelationLifeSuspendedStatusWatchResult
.results[0].changes[0]: RelationLifeSuspendedStatusChange
.results[0].changes[0].key: str
.results[0].changes[0].life: str
.results[0].changes[0].suspended: bool
.results[0].changes[0].suspended-reason: str
.results[0].error: Error
.results[0].error.code: str
.results[0].error.info["abc"]: dict[Any, Any]
.results[0].error.message: str
.results[0].watcher-id: str

CrossModelSecrets: 1
.GetSecretAccessScope()
in: GetRemoteSecretAccessArgs
.relations[0]: GetRemoteSecretAccessArg
.relations[0].application-token: str
.relations[0].unit-id: int
.relations[0].uri: str
out: StringResults
.results[0]: StringResult
.results[0].error: Error
.results[0].error.code: str
.results[0].error.info["abc"]: dict[Any, Any]
.results[0].error.message: str
.results[0].result: str

CrossModelSecrets: 1
.GetSecretContentInfo()
in: GetRemoteSecretContentArgs
.relations[0]: GetRemoteSecretContentArg
.relations[0].application-token: str
.relations[0].bakery-version: int
.relations[0].macaroons[0]: Macaroon
.relations[0].macaroons[0]: dict[Any, Any]
.relations[0].peek: bool
.relations[0].refresh: bool
.relations[0].revision: int
.relations[0].source-controller-uuid: str
.relations[0].unit-id: int
.relations[0].uri: str
out: SecretContentResults
.results[0]: SecretContentResult
.results[0].backend-config: SecretBackendConfigResult
.results[0].backend-config.config: SecretBackendConfig
.results[0].backend-config.config.params["abc"]: dict[Any, Any]
.results[0].backend-config.config.type: str
.results[0].backend-config.draining: bool
.results[0].backend-config.model-controller: str
.results[0].backend-config.model-name: str
.results[0].backend-config.model-uuid: str
.results[0].content: SecretContentParams
.results[0].content.data["abc"]: str
.results[0].content.value-ref: SecretValueRef
.results[0].content.value-ref.backend-id: str
.results[0].content.value-ref.revision-id: str
.results[0].error: Error
.results[0].error.code: str
.results[0].error.info["abc"]: dict[Any, Any]
.results[0].error.message: str
.results[0].latest-revision: int

EntityWatcher: 2
.Next()
in: None
out: EntitiesWatchResult
.changes[0]: str
.error: Error
.error.code: str
.error.info["abc"]: dict[Any, Any]
.error.message: str
.watcher-id: str

EntityWatcher: 2
.Stop()
in: None
out: None

FanConfigurer: 1
.FanConfig()
in: None
out: FanConfigResult
.fans[0]: FanConfigEntry
.fans[0].overlay: str
.fans[0].underlay: str

FanConfigurer: 1
.WatchForFanConfigChanges()
in: None
out: NotifyWatchResult
.NotifyWatcherId: str
.error: Error
.error.code: str
.error.info["abc"]: dict[Any, Any]
.error.message: str

FilesystemAttachmentsWatcher: 2
.Next()
in: None
out: MachineStorageIdsWatchResult
.changes[0]: MachineStorageId
.changes[0].attachment-tag: str
.changes[0].machine-tag: str
.error: Error
.error.code: str
.error.info["abc"]: dict[Any, Any]
.error.message: str
.watcher-id: str

FilesystemAttachmentsWatcher: 2
.Stop()
in: None
out: None

Firewaller: 7
.AreManuallyProvisioned()
in: Entities
.entities[0]: Entity
.entities[0].tag: str
out: BoolResults
.results[0]: BoolResult
.results[0].error: Error
.results[0].error.code: str
.results[0].error.info["abc"]: dict[Any, Any]
.results[0].error.message: str
.results[0].result: bool

Firewaller: 7
.CloudSpec()
in: Entities
.entities[0]: Entity
.entities[0].tag: str
out: CloudSpecResults
.results[0]: CloudSpecResult
.results[0].error: Error
.results[0].error.code: str
.results[0].error.info["abc"]: dict[Any, Any]
.results[0].error.message: str
.results[0].result: CloudSpec
.results[0].result.cacertificates[0]: str
.results[0].result.credential: CloudCredential
.results[0].result.credential.attrs["abc"]: str
.results[0].result.credential.auth-type: str
.results[0].result.credential.redacted[0]: str
.results[0].result.endpoint: str
.results[0].result.identity-endpoint: str
.results[0].result.is-controller-cloud: bool
.results[0].result.name: str
.results[0].result.region: str
.results[0].result.skip-tls-verify: bool
.results[0].result.storage-endpoint: str
.results[0].result.type: str

Firewaller: 7
.ControllerAPIInfoForModels()
in: Entities
.entities[0]: Entity
.entities[0].tag: str
out: ControllerAPIInfoResults
.results[0]: ControllerAPIInfoResult
.results[0].addresses[0]: str
.results[0].cacert: str
.results[0].error: Error
.results[0].error.code: str
.results[0].error.info["abc"]: dict[Any, Any]
.results[0].error.message: str

Firewaller: 7
.ControllerConfig()
in: None
out: ControllerConfigResult
.config["abc"]: dict[Any, Any]

Firewaller: 7
.GetAssignedMachine()
in: Entities
.entities[0]: Entity
.entities[0].tag: str
out: StringResults
.results[0]: StringResult
.results[0].error: Error
.results[0].error.code: str
.results[0].error.info["abc"]: dict[Any, Any]
.results[0].error.message: str
.results[0].result: str

Firewaller: 7
.GetCloudSpec()
in: ModelTag
: dict[Any, Any]
out: CloudSpecResult
.error: Error
.error.code: str
.error.info["abc"]: dict[Any, Any]
.error.message: str
.result: CloudSpec
.result.cacertificates[0]: str
.result.credential: CloudCredential
.result.credential.attrs["abc"]: str
.result.credential.auth-type: str
.result.credential.redacted[0]: str
.result.endpoint: str
.result.identity-endpoint: str
.result.is-controller-cloud: bool
.result.name: str
.result.region: str
.result.skip-tls-verify: bool
.result.storage-endpoint: str
.result.type: str

Firewaller: 7
.GetExposeInfo()
in: Entities
.entities[0]: Entity
.entities[0].tag: str
out: ExposeInfoResults
.results[0]: ExposeInfoResult
.results[0].error: Error
.results[0].error.code: str
.results[0].error.info["abc"]: dict[Any, Any]
.results[0].error.message: str
.results[0].exposed: bool
.results[0].exposed-endpoints["abc"]: ExposedEndpoint
.results[0].exposed-endpoints["abc"].expose-to-cidrs[0]: str
.results[0].exposed-endpoints["abc"].expose-to-spaces[0]: str

Firewaller: 7
.InstanceId()
in: Entities
.entities[0]: Entity
.entities[0].tag: str
out: StringResults
.results[0]: StringResult
.results[0].error: Error
.results[0].error.code: str
.results[0].error.info["abc"]: dict[Any, Any]
.results[0].error.message: str
.results[0].result: str

Firewaller: 7
.Life()
in: Entities
.entities[0]: Entity
.entities[0].tag: str
out: LifeResults
.results[0]: LifeResult
.results[0].error: Error
.results[0].error.code: str
.results[0].error.info["abc"]: dict[Any, Any]
.results[0].error.message: str
.results[0].life: str

Firewaller: 7
.MacaroonForRelations()
in: Entities
.entities[0]: Entity
.entities[0].tag: str
out: MacaroonResults
.results[0]: MacaroonResult
.results[0].error: Error
.results[0].error.code: str
.results[0].error.info["abc"]: dict[Any, Any]
.results[0].error.message: str
.results[0].result: Macaroon
.results[0].result: dict[Any, Any]

Firewaller: 7
.ModelConfig()
in: None
out: ModelConfigResult
.config["abc"]: dict[Any, Any]

Firewaller: 7
.ModelFirewallRules()
in: None
out: IngressRulesResult
.error: Error
.error.code: str
.error.info["abc"]: dict[Any, Any]
.error.message: str
.rules[0]: IngressRule
.rules[0].port-range: PortRange
.rules[0].port-range.from-port: int
.rules[0].port-range.protocol: str
.rules[0].port-range.to-port: int
.rules[0].source-cidrs[0]: str

Firewaller: 7
.OpenedMachinePortRanges()
in: Entities
.entities[0]: Entity
.entities[0].tag: str
out: OpenMachinePortRangesResults
.results[0]: OpenMachinePortRangesResult
.results[0].error: Error
.results[0].error.code: str
.results[0].error.info["abc"]: dict[Any, Any]
.results[0].error.message: str
.results[0].unit-port-ranges["abc"][0]: OpenUnitPortRanges
.results[0].unit-port-ranges["abc"][0].endpoint: str
.results[0].unit-port-ranges["abc"][0].port-ranges[0]: PortRange
.results[0].unit-port-ranges["abc"][0].port-ranges[0].from-port: int
.results[0].unit-port-ranges["abc"][0].port-ranges[0].protocol: str
.results[0].unit-port-ranges["abc"][0].port-ranges[0].to-port: int
.results[0].unit-port-ranges["abc"][0].subnet-cidrs[0]: str

Firewaller: 7
.SetRelationsStatus()
in: SetStatus
.entities[0]: EntityStatusArgs
.entities[0].data["abc"]: dict[Any, Any]
.entities[0].info: str
.entities[0].status: str
.entities[0].tag: str
out: ErrorResults
.results[0]: ErrorResult
.results[0].error: Error
.results[0].error.code: str
.results[0].error.info["abc"]: dict[Any, Any]
.results[0].error.message: str

Firewaller: 7
.SpaceInfos()
in: SpaceInfosParams
.space-ids[0]: str
out: SpaceInfos
.space-infos[0]: SpaceInfo
.space-infos[0].id: str
.space-infos[0].name: str
.space-infos[0].provider-id: str
.space-infos[0].subnets[0]: SubnetV3
.space-infos[0].subnets[0].Subnet: Subnet
.space-infos[0].subnets[0].Subnet.cidr: str
.space-infos[0].subnets[0].Subnet.life: str
.space-infos[0].subnets[0].Subnet.provider-id: str
.space-infos[0].subnets[0].Subnet.provider-network-id: str
.space-infos[0].subnets[0].Subnet.provider-space-id: str
.space-infos[0].subnets[0].Subnet.space-tag: str
.space-infos[0].subnets[0].Subnet.status: str
.space-infos[0].subnets[0].Subnet.vlan-tag: int
.space-infos[0].subnets[0].Subnet.zones[0]: str
.space-infos[0].subnets[0].SubnetV2: SubnetV2
.space-infos[0].subnets[0].SubnetV2.Subnet: Subnet
.space-infos[0].subnets[0].SubnetV2.Subnet.cidr: str
.space-infos[0].subnets[0].SubnetV2.Subnet.life: str
.space-infos[0].subnets[0].SubnetV2.Subnet.provider-id: str
.space-infos[0].subnets[0].SubnetV2.Subnet.provider-network-id: str
.space-infos[0].subnets[0].SubnetV2.Subnet.provider-space-id: str
.space-infos[0].subnets[0].SubnetV2.Subnet.space-tag: str
.space-infos[0].subnets[0].SubnetV2.Subnet.status: str
.space-infos[0].subnets[0].SubnetV2.Subnet.vlan-tag: int
.space-infos[0].subnets[0].SubnetV2.Subnet.zones[0]: str
.space-infos[0].subnets[0].SubnetV2.cidr: str
.space-infos[0].subnets[0].SubnetV2.id: str
.space-infos[0].subnets[0].SubnetV2.life: str
.space-infos[0].subnets[0].SubnetV2.provider-id: str
.space-infos[0].subnets[0].SubnetV2.provider-network-id: str
.space-infos[0].subnets[0].SubnetV2.provider-space-id: str
.space-infos[0].subnets[0].SubnetV2.space-tag: str
.space-infos[0].subnets[0].SubnetV2.status: str
.space-infos[0].subnets[0].SubnetV2.vlan-tag: int
.space-infos[0].subnets[0].SubnetV2.zones[0]: str
.space-infos[0].subnets[0].cidr: str
.space-infos[0].subnets[0].fan-info: FanConfigEntry
.space-infos[0].subnets[0].fan-info.overlay: str
.space-infos[0].subnets[0].fan-info.underlay: str
.space-infos[0].subnets[0].id: str
.space-infos[0].subnets[0].is-public: bool
.space-infos[0].subnets[0].life: str
.space-infos[0].subnets[0].provider-id: str
.space-infos[0].subnets[0].provider-network-id: str
.space-infos[0].subnets[0].provider-space-id: str
.space-infos[0].subnets[0].space-id: str
.space-infos[0].subnets[0].space-tag: str
.space-infos[0].subnets[0].status: str
.space-infos[0].subnets[0].vlan-tag: int
.space-infos[0].subnets[0].zones[0]: str

Firewaller: 7
.Watch()
in: Entities
.entities[0]: Entity
.entities[0].tag: str
out: NotifyWatchResults
.results[0]: NotifyWatchResult
.results[0].NotifyWatcherId: str
.results[0].error: Error
.results[0].error.code: str
.results[0].error.info["abc"]: dict[Any, Any]
.results[0].error.message: str

Firewaller: 7
.WatchCloudSpecsChanges()
in: Entities
.entities[0]: Entity
.entities[0].tag: str
out: NotifyWatchResults
.results[0]: NotifyWatchResult
.results[0].NotifyWatcherId: str
.results[0].error: Error
.results[0].error.code: str
.results[0].error.info["abc"]: dict[Any, Any]
.results[0].error.message: str

Firewaller: 7
.WatchEgressAddressesForRelations()
in: Entities
.entities[0]: Entity
.entities[0].tag: str
out: StringsWatchResults
.results[0]: StringsWatchResult
.results[0].changes[0]: str
.results[0].error: Error
.results[0].error.code: str
.results[0].error.info["abc"]: dict[Any, Any]
.results[0].error.message: str
.results[0].watcher-id: str

Firewaller: 7
.WatchForModelConfigChanges()
in: None
out: NotifyWatchResult
.NotifyWatcherId: str
.error: Error
.error.code: str
.error.info["abc"]: dict[Any, Any]
.error.message: str

Firewaller: 7
.WatchIngressAddressesForRelations()
in: Entities
.entities[0]: Entity
.entities[0].tag: str
out: StringsWatchResults
.results[0]: StringsWatchResult
.results[0].changes[0]: str
.results[0].error: Error
.results[0].error.code: str
.results[0].error.info["abc"]: dict[Any, Any]
.results[0].error.message: str
.results[0].watcher-id: str

Firewaller: 7
.WatchModelFirewallRules()
in: None
out: NotifyWatchResult
.NotifyWatcherId: str
.error: Error
.error.code: str
.error.info["abc"]: dict[Any, Any]
.error.message: str

Firewaller: 7
.WatchModelMachineStartTimes()
in: None
out: StringsWatchResult
.changes[0]: str
.error: Error
.error.code: str
.error.info["abc"]: dict[Any, Any]
.error.message: str
.watcher-id: str

Firewaller: 7
.WatchModelMachines()
in: None
out: StringsWatchResult
.changes[0]: str
.error: Error
.error.code: str
.error.info["abc"]: dict[Any, Any]
.error.message: str
.watcher-id: str

Firewaller: 7
.WatchOpenedPorts()
in: Entities
.entities[0]: Entity
.entities[0].tag: str
out: StringsWatchResults
.results[0]: StringsWatchResult
.results[0].changes[0]: str
.results[0].error: Error
.results[0].error.code: str
.results[0].error.info["abc"]: dict[Any, Any]
.results[0].error.message: str
.results[0].watcher-id: str

Firewaller: 7
.WatchSubnets()
in: Entities
.entities[0]: Entity
.entities[0].tag: str
out: StringsWatchResult
.changes[0]: str
.error: Error
.error.code: str
.error.info["abc"]: dict[Any, Any]
.error.message: str
.watcher-id: str

Firewaller: 7
.WatchUnits()
in: Entities
.entities[0]: Entity
.entities[0].tag: str
out: StringsWatchResults
.results[0]: StringsWatchResult
.results[0].changes[0]: str
.results[0].error: Error
.results[0].error.code: str
.results[0].error.info["abc"]: dict[Any, Any]
.results[0].error.message: str
.results[0].watcher-id: str

HighAvailability: 2
.EnableHA()
in: ControllersSpecs
.specs[0]: ControllersSpec
.specs[0].constraints: Value
.specs[0].constraints.allocate-public-ip: bool
.specs[0].constraints.arch: str
.specs[0].constraints.container: str
.specs[0].constraints.cores: int
.specs[0].constraints.cpu-power: int
.specs[0].constraints.image-id: str
.specs[0].constraints.instance-role: str
.specs[0].constraints.instance-type: str
.specs[0].constraints.mem: int
.specs[0].constraints.root-disk: int
.specs[0].constraints.root-disk-source: str
.specs[0].constraints.spaces[0]: str
.specs[0].constraints.tags[0]: str
.specs[0].constraints.virt-type: str
.specs[0].constraints.zones[0]: str
.specs[0].num-controllers: int
.specs[0].placement[0]: str
out: ControllersChangeResults
.results[0]: ControllersChangeResult
.results[0].error: Error
.results[0].error.code: str
.results[0].error.info["abc"]: dict[Any, Any]
.results[0].error.message: str
.results[0].result: ControllersChanges
.results[0].result.added[0]: str
.results[0].result.converted[0]: str
.results[0].result.maintained[0]: str
.results[0].result.removed[0]: str

HostKeyReporter: 1
.ReportKeys()
in: SSHHostKeySet
.entity-keys[0]: SSHHostKeys
.entity-keys[0].public-keys[0]: str
.entity-keys[0].tag: str
out: ErrorResults
.results[0]: ErrorResult
.results[0].error: Error
.results[0].error.code: str
.results[0].error.info["abc"]: dict[Any, Any]
.results[0].error.message: str

ImageMetadataManager: 1
.Delete()
in: MetadataImageIds
.image-ids[0]: str
out: ErrorResults
.results[0]: ErrorResult
.results[0].error: Error
.results[0].error.code: str
.results[0].error.info["abc"]: dict[Any, Any]
.results[0].error.message: str

ImageMetadataManager: 1
.List()
in: ImageMetadataFilter
.arches[0]: str
.region: str
.root-storage-type: str
.stream: str
.versions[0]: str
.virt-type: str
out: ListCloudImageMetadataResult
.result[0]: CloudImageMetadata
.result[0].arch: str
.result[0].image-id: str
.result[0].priority: int
.result[0].region: str
.result[0].root-storage-size: int
.result[0].root-storage-type: str
.result[0].source: str
.result[0].stream: str
.result[0].version: str
.result[0].virt-type: str

ImageMetadataManager: 1
.Save()
in: MetadataSaveParams
.metadata[0]: CloudImageMetadataList
.metadata[0].metadata[0]: CloudImageMetadata
.metadata[0].metadata[0].arch: str
.metadata[0].metadata[0].image-id: str
.metadata[0].metadata[0].priority: int
.metadata[0].metadata[0].region: str
.metadata[0].metadata[0].root-storage-size: int
.metadata[0].metadata[0].root-storage-type: str
.metadata[0].metadata[0].source: str
.metadata[0].metadata[0].stream: str
.metadata[0].metadata[0].version: str
.metadata[0].metadata[0].virt-type: str
out: ErrorResults
.results[0]: ErrorResult
.results[0].error: Error
.results[0].error.code: str
.results[0].error.info["abc"]: dict[Any, Any]
.results[0].error.message: str

InstancePoller: 4
.AreManuallyProvisioned()
in: Entities
.entities[0]: Entity
.entities[0].tag: str
out: BoolResults
.results[0]: BoolResult
.results[0].error: Error
.results[0].error.code: str
.results[0].error.info["abc"]: dict[Any, Any]
.results[0].error.message: str
.results[0].result: bool

InstancePoller: 4
.InstanceId()
in: Entities
.entities[0]: Entity
.entities[0].tag: str
out: StringResults
.results[0]: StringResult
.results[0].error: Error
.results[0].error.code: str
.results[0].error.info["abc"]: dict[Any, Any]
.results[0].error.message: str
.results[0].result: str

InstancePoller: 4
.InstanceStatus()
in: Entities
.entities[0]: Entity
.entities[0].tag: str
out: StatusResults
.results[0]: StatusResult
.results[0].data["abc"]: dict[Any, Any]
.results[0].error: Error
.results[0].error.code: str
.results[0].error.info["abc"]: dict[Any, Any]
.results[0].error.message: str
.results[0].id: str
.results[0].info: str
.results[0].life: str
.results[0].since: str
.results[0].status: str

InstancePoller: 4
.Life()
in: Entities
.entities[0]: Entity
.entities[0].tag: str
out: LifeResults
.results[0]: LifeResult
.results[0].error: Error
.results[0].error.code: str
.results[0].error.info["abc"]: dict[Any, Any]
.results[0].error.message: str
.results[0].life: str

InstancePoller: 4
.ModelConfig()
in: None
out: ModelConfigResult
.config["abc"]: dict[Any, Any]

InstancePoller: 4
.ProviderAddresses()
in: Entities
.entities[0]: Entity
.entities[0].tag: str
out: MachineAddressesResults
.results[0]: MachineAddressesResult
.results[0].addresses[0]: Address
.results[0].addresses[0].cidr: str
.results[0].addresses[0].config-type: str
.results[0].addresses[0].is-secondary: bool
.results[0].addresses[0].scope: str
.results[0].addresses[0].space-id: str
.results[0].addresses[0].space-name: str
.results[0].addresses[0].type: str
.results[0].addresses[0].value: str
.results[0].error: Error
.results[0].error.code: str
.results[0].error.info["abc"]: dict[Any, Any]
.results[0].error.message: str

InstancePoller: 4
.SetInstanceStatus()
in: SetStatus
.entities[0]: EntityStatusArgs
.entities[0].data["abc"]: dict[Any, Any]
.entities[0].info: str
.entities[0].status: str
.entities[0].tag: str
out: ErrorResults
.results[0]: ErrorResult
.results[0].error: Error
.results[0].error.code: str
.results[0].error.info["abc"]: dict[Any, Any]
.results[0].error.message: str

InstancePoller: 4
.SetProviderAddresses()
in: SetMachinesAddresses
.machine-addresses[0]: MachineAddresses
.machine-addresses[0].addresses[0]: Address
.machine-addresses[0].addresses[0].cidr: str
.machine-addresses[0].addresses[0].config-type: str
.machine-addresses[0].addresses[0].is-secondary: bool
.machine-addresses[0].addresses[0].scope: str
.machine-addresses[0].addresses[0].space-id: str
.machine-addresses[0].addresses[0].space-name: str
.machine-addresses[0].addresses[0].type: str
.machine-addresses[0].addresses[0].value: str
.machine-addresses[0].tag: str
out: ErrorResults
.results[0]: ErrorResult
.results[0].error: Error
.results[0].error.code: str
.results[0].error.info["abc"]: dict[Any, Any]
.results[0].error.message: str

InstancePoller: 4
.SetProviderNetworkConfig()
in: SetProviderNetworkConfig
.args[0]: ProviderNetworkConfig
.args[0].config[0]: NetworkConfig
.args[0].config[0].address: str
.args[0].config[0].addresses[0]: Address
.args[0].config[0].addresses[0].cidr: str
.args[0].config[0].addresses[0].config-type: str
.args[0].config[0].addresses[0].is-secondary: bool
.args[0].config[0].addresses[0].scope: str
.args[0].config[0].addresses[0].space-id: str
.args[0].config[0].addresses[0].space-name: str
.args[0].config[0].addresses[0].type: str
.args[0].config[0].addresses[0].value: str
.args[0].config[0].cidr: str
.args[0].config[0].config-type: str
.args[0].config[0].device-index: int
.args[0].config[0].disabled: bool
.args[0].config[0].dns-search-domains[0]: str
.args[0].config[0].dns-servers[0]: str
.args[0].config[0].gateway-address: str
.args[0].config[0].interface-name: str
.args[0].config[0].interface-type: str
.args[0].config[0].is-default-gateway: bool
.args[0].config[0].mac-address: str
.args[0].config[0].mtu: int
.args[0].config[0].no-auto-start: bool
.args[0].config[0].origin: str
.args[0].config[0].parent-interface-name: str
.args[0].config[0].provider-address-id: str
.args[0].config[0].provider-id: str
.args[0].config[0].provider-network-id: str
.args[0].config[0].provider-space-id: str
.args[0].config[0].provider-subnet-id: str
.args[0].config[0].provider-vlan-id: str
.args[0].config[0].routes[0]: NetworkRoute
.args[0].config[0].routes[0].destination-cidr: str
.args[0].config[0].routes[0].gateway-ip: str
.args[0].config[0].routes[0].metric: int
.args[0].config[0].shadow-addresses[0]: Address
.args[0].config[0].shadow-addresses[0].cidr: str
.args[0].config[0].shadow-addresses[0].config-type: str
.args[0].config[0].shadow-addresses[0].is-secondary: bool
.args[0].config[0].shadow-addresses[0].scope: str
.args[0].config[0].shadow-addresses[0].space-id: str
.args[0].config[0].shadow-addresses[0].space-name: str
.args[0].config[0].shadow-addresses[0].type: str
.args[0].config[0].shadow-addresses[0].value: str
.args[0].config[0].virtual-port-type: str
.args[0].config[0].vlan-tag: int
.args[0].tag: str
out: SetProviderNetworkConfigResults
.results[0]: SetProviderNetworkConfigResult
.results[0].addresses[0]: Address
.results[0].addresses[0].cidr: str
.results[0].addresses[0].config-type: str
.results[0].addresses[0].is-secondary: bool
.results[0].addresses[0].scope: str
.results[0].addresses[0].space-id: str
.results[0].addresses[0].space-name: str
.results[0].addresses[0].type: str
.results[0].addresses[0].value: str
.results[0].error: Error
.results[0].error.code: str
.results[0].error.info["abc"]: dict[Any, Any]
.results[0].error.message: str
.results[0].modified: bool

InstancePoller: 4
.Status()
in: Entities
.entities[0]: Entity
.entities[0].tag: str
out: StatusResults
.results[0]: StatusResult
.results[0].data["abc"]: dict[Any, Any]
.results[0].error: Error
.results[0].error.code: str
.results[0].error.info["abc"]: dict[Any, Any]
.results[0].error.message: str
.results[0].id: str
.results[0].info: str
.results[0].life: str
.results[0].since: str
.results[0].status: str

InstancePoller: 4
.WatchForModelConfigChanges()
in: None
out: NotifyWatchResult
.NotifyWatcherId: str
.error: Error
.error.code: str
.error.info["abc"]: dict[Any, Any]
.error.message: str

InstancePoller: 4
.WatchModelMachineStartTimes()
in: None
out: StringsWatchResult
.changes[0]: str
.error: Error
.error.code: str
.error.info["abc"]: dict[Any, Any]
.error.message: str
.watcher-id: str

InstancePoller: 4
.WatchModelMachines()
in: None
out: StringsWatchResult
.changes[0]: str
.error: Error
.error.code: str
.error.info["abc"]: dict[Any, Any]
.error.message: str
.watcher-id: str

KeyManager: 1
.AddKeys()
in: ModifyUserSSHKeys
.ssh-keys[0]: str
.user: str
out: ErrorResults
.results[0]: ErrorResult
.results[0].error: Error
.results[0].error.code: str
.results[0].error.info["abc"]: dict[Any, Any]
.results[0].error.message: str

KeyManager: 1
.DeleteKeys()
in: ModifyUserSSHKeys
.ssh-keys[0]: str
.user: str
out: ErrorResults
.results[0]: ErrorResult
.results[0].error: Error
.results[0].error.code: str
.results[0].error.info["abc"]: dict[Any, Any]
.results[0].error.message: str

KeyManager: 1
.ImportKeys()
in: ModifyUserSSHKeys
.ssh-keys[0]: str
.user: str
out: ErrorResults
.results[0]: ErrorResult
.results[0].error: Error
.results[0].error.code: str
.results[0].error.info["abc"]: dict[Any, Any]
.results[0].error.message: str

KeyManager: 1
.ListKeys()
in: ListSSHKeys
.entities: Entities
.entities.entities[0]: Entity
.entities.entities[0].tag: str
.mode: bool
out: StringsResults
.results[0]: StringsResult
.results[0].error: Error
.results[0].error.code: str
.results[0].error.info["abc"]: dict[Any, Any]
.results[0].error.message: str
.results[0].result[0]: str

LeadershipService: 2
.BlockUntilLeadershipReleased()
in: ApplicationTag
.Name: str
out: ErrorResult
.error: Error
.error.code: str
.error.info["abc"]: dict[Any, Any]
.error.message: str

LeadershipService: 2
.ClaimLeadership()
in: ClaimLeadershipBulkParams
.params[0]: ClaimLeadershipParams
.params[0].application-tag: str
.params[0].duration: float
.params[0].unit-tag: str
out: ClaimLeadershipBulkResults
.results[0]: ErrorResult
.results[0].error: Error
.results[0].error.code: str
.results[0].error.info["abc"]: dict[Any, Any]
.results[0].error.message: str

Logger: 1
.LoggingConfig()
in: Entities
.entities[0]: Entity
.entities[0].tag: str
out: StringResults
.results[0]: StringResult
.results[0].error: Error
.results[0].error.code: str
.results[0].error.info["abc"]: dict[Any, Any]
.results[0].error.message: str
.results[0].result: str

Logger: 1
.WatchLoggingConfig()
in: Entities
.entities[0]: Entity
.entities[0].tag: str
out: NotifyWatchResults
.results[0]: NotifyWatchResult
.results[0].NotifyWatcherId: str
.results[0].error: Error
.results[0].error.code: str
.results[0].error.info["abc"]: dict[Any, Any]
.results[0].error.message: str

MachineManager: 10
.AddMachines()
in: AddMachines
.params[0]: AddMachineParams
.params[0].addresses[0]: Address
.params[0].addresses[0].cidr: str
.params[0].addresses[0].config-type: str
.params[0].addresses[0].is-secondary: bool
.params[0].addresses[0].scope: str
.params[0].addresses[0].space-id: str
.params[0].addresses[0].space-name: str
.params[0].addresses[0].type: str
.params[0].addresses[0].value: str
.params[0].base: Base
.params[0].base.channel: str
.params[0].base.name: str
.params[0].constraints: Value
.params[0].constraints.allocate-public-ip: bool
.params[0].constraints.arch: str
.params[0].constraints.container: str
.params[0].constraints.cores: int
.params[0].constraints.cpu-power: int
.params[0].constraints.image-id: str
.params[0].constraints.instance-role: str
.params[0].constraints.instance-type: str
.params[0].constraints.mem: int
.params[0].constraints.root-disk: int
.params[0].constraints.root-disk-source: str
.params[0].constraints.spaces[0]: str
.params[0].constraints.tags[0]: str
.params[0].constraints.virt-type: str
.params[0].constraints.zones[0]: str
.params[0].container-type: str
.params[0].disks[0]: Constraints
.params[0].disks[0].Count: int
.params[0].disks[0].Pool: str
.params[0].disks[0].Size: int
.params[0].hardware-characteristics: HardwareCharacteristics
.params[0].hardware-characteristics.arch: str
.params[0].hardware-characteristics.availability-zone: str
.params[0].hardware-characteristics.cpu-cores: int
.params[0].hardware-characteristics.cpu-power: int
.params[0].hardware-characteristics.mem: int
.params[0].hardware-characteristics.root-disk: int
.params[0].hardware-characteristics.root-disk-source: str
.params[0].hardware-characteristics.tags[0]: str
.params[0].hardware-characteristics.virt-type: str
.params[0].instance-id: str
.params[0].jobs[0]: str
.params[0].nonce: str
.params[0].parent-id: str
.params[0].placement: Placement
.params[0].placement.directive: str
.params[0].placement.scope: str
out: AddMachinesResults
.machines[0]: AddMachinesResult
.machines[0].error: Error
.machines[0].error.code: str
.machines[0].error.info["abc"]: dict[Any, Any]
.machines[0].error.message: str
.machines[0].machine: str

MachineManager: 10
.DestroyMachineWithParams()
in: DestroyMachinesParams
.dry-run: bool
.force: bool
.keep: bool
.machine-tags[0]: str
.max-wait: int
out: DestroyMachineResults
.results[0]: DestroyMachineResult
.results[0].error: Error
.results[0].error.code: str
.results[0].error.info["abc"]: dict[Any, Any]
.results[0].error.message: str
.results[0].info: DestroyMachineInfo
.results[0].info.destroyed-containers[0]: DestroyMachineResult
.results[0].info.destroyed-storage[0]: Entity
.results[0].info.destroyed-storage[0].tag: str
.results[0].info.destroyed-units[0]: Entity
.results[0].info.destroyed-units[0].tag: str
.results[0].info.detached-storage[0]: Entity
.results[0].info.detached-storage[0].tag: str
.results[0].info.machine-id: str

MachineManager: 10
.GetUpgradeSeriesMessages()
in: UpgradeSeriesNotificationParams
.params[0]: UpgradeSeriesNotificationParam
.params[0].entity: Entity
.params[0].entity.tag: str
.params[0].watcher-id: str
out: StringsResults
.results[0]: StringsResult
.results[0].error: Error
.results[0].error.code: str
.results[0].error.info["abc"]: dict[Any, Any]
.results[0].error.message: str
.results[0].result[0]: str

MachineManager: 10
.InstanceTypes()
in: ModelInstanceTypesConstraints
.constraints[0]: ModelInstanceTypesConstraint
.constraints[0].value: Value
.constraints[0].value.allocate-public-ip: bool
.constraints[0].value.arch: str
.constraints[0].value.container: str
.constraints[0].value.cores: int
.constraints[0].value.cpu-power: int
.constraints[0].value.image-id: str
.constraints[0].value.instance-role: str
.constraints[0].value.instance-type: str
.constraints[0].value.mem: int
.constraints[0].value.root-disk: int
.constraints[0].value.root-disk-source: str
.constraints[0].value.spaces[0]: str
.constraints[0].value.tags[0]: str
.constraints[0].value.virt-type: str
.constraints[0].value.zones[0]: str
out: InstanceTypesResults
.results[0]: InstanceTypesResult
.results[0].cost-currency: str
.results[0].cost-divisor: int
.results[0].cost-unit: str
.results[0].error: Error
.results[0].error.code: str
.results[0].error.info["abc"]: dict[Any, Any]
.results[0].error.message: str
.results[0].instance-types[0]: InstanceType
.results[0].instance-types[0].arches[0]: str
.results[0].instance-types[0].cost: int
.results[0].instance-types[0].cpu-cores: int
.results[0].instance-types[0].memory: int
.results[0].instance-types[0].name: str
.results[0].instance-types[0].root-disk: int
.results[0].instance-types[0].virt-type: str

MachineManager: 10
.ProvisioningScript()
in: ProvisioningScriptParams
.data-dir: str
.disable-package-commands: bool
.machine-id: str
.nonce: str
out: ProvisioningScriptResult
.script: str

MachineManager: 10
.RetryProvisioning()
in: RetryProvisioningArgs
.all: bool
.machines[0]: str
out: ErrorResults
.results[0]: ErrorResult
.results[0].error: Error
.results[0].error.code: str
.results[0].error.info["abc"]: dict[Any, Any]
.results[0].error.message: str

MachineManager: 10
.UpgradeSeriesComplete()
in: UpdateChannelArg
.channel: str
.force: bool
.tag: Entity
.tag.tag: str
out: ErrorResult
.error: Error
.error.code: str
.error.info["abc"]: dict[Any, Any]
.error.message: str

MachineManager: 10
.UpgradeSeriesPrepare()
in: UpdateChannelArg
.channel: str
.force: bool
.tag: Entity
.tag.tag: str
out: ErrorResult
.error: Error
.error.code: str
.error.info["abc"]: dict[Any, Any]
.error.message: str

MachineManager: 10
.UpgradeSeriesValidate()
in: UpdateChannelArgs
.args[0]: UpdateChannelArg
.args[0].channel: str
.args[0].force: bool
.args[0].tag: Entity
.args[0].tag.tag: str
out: UpgradeSeriesUnitsResults
.Results[0]: UpgradeSeriesUnitsResult
.Results[0].error: Error
.Results[0].error.code: str
.Results[0].error.info["abc"]: dict[Any, Any]
.Results[0].error.message: str
.Results[0].unit-names[0]: str

MachineManager: 10
.WatchUpgradeSeriesNotifications()
in: Entities
.entities[0]: Entity
.entities[0].tag: str
out: NotifyWatchResults
.results[0]: NotifyWatchResult
.results[0].NotifyWatcherId: str
.results[0].error: Error
.results[0].error.code: str
.results[0].error.info["abc"]: dict[Any, Any]
.results[0].error.message: str

Machiner: 5
.APIAddresses()
in: None
out: StringsResult
.error: Error
.error.code: str
.error.info["abc"]: dict[Any, Any]
.error.message: str
.result[0]: str

Machiner: 5
.APIHostPorts()
in: None
out: APIHostPortsResult
.servers[0][0]: HostPort
.servers[0][0].Address: Address
.servers[0][0].Address.cidr: str
.servers[0][0].Address.config-type: str
.servers[0][0].Address.is-secondary: bool
.servers[0][0].Address.scope: str
.servers[0][0].Address.space-id: str
.servers[0][0].Address.space-name: str
.servers[0][0].Address.type: str
.servers[0][0].Address.value: str
.servers[0][0].cidr: str
.servers[0][0].config-type: str
.servers[0][0].is-secondary: bool
.servers[0][0].port: int
.servers[0][0].scope: str
.servers[0][0].space-id: str
.servers[0][0].space-name: str
.servers[0][0].type: str
.servers[0][0].value: str

Machiner: 5
.EnsureDead()
in: Entities
.entities[0]: Entity
.entities[0].tag: str
out: ErrorResults
.results[0]: ErrorResult
.results[0].error: Error
.results[0].error.code: str
.results[0].error.info["abc"]: dict[Any, Any]
.results[0].error.message: str

Machiner: 5
.Jobs()
in: Entities
.entities[0]: Entity
.entities[0].tag: str
out: JobsResults
.results[0]: JobsResult
.results[0].error: Error
.results[0].error.code: str
.results[0].error.info["abc"]: dict[Any, Any]
.results[0].error.message: str
.results[0].jobs[0]: str

Machiner: 5
.Life()
in: Entities
.entities[0]: Entity
.entities[0].tag: str
out: LifeResults
.results[0]: LifeResult
.results[0].error: Error
.results[0].error.code: str
.results[0].error.info["abc"]: dict[Any, Any]
.results[0].error.message: str
.results[0].life: str

Machiner: 5
.RecordAgentStartInformation()
in: RecordAgentStartInformationArgs
.args[0]: RecordAgentStartInformationArg
.args[0].hostname: str
.args[0].tag: str
out: ErrorResults
.results[0]: ErrorResult
.results[0].error: Error
.results[0].error.code: str
.results[0].error.info["abc"]: dict[Any, Any]
.results[0].error.message: str

Machiner: 5
.RecordAgentStartTime()
in: Entities
.entities[0]: Entity
.entities[0].tag: str
out: ErrorResults
.results[0]: ErrorResult
.results[0].error: Error
.results[0].error.code: str
.results[0].error.info["abc"]: dict[Any, Any]
.results[0].error.message: str

Machiner: 5
.SetMachineAddresses()
in: SetMachinesAddresses
.machine-addresses[0]: MachineAddresses
.machine-addresses[0].addresses[0]: Address
.machine-addresses[0].addresses[0].cidr: str
.machine-addresses[0].addresses[0].config-type: str
.machine-addresses[0].addresses[0].is-secondary: bool
.machine-addresses[0].addresses[0].scope: str
.machine-addresses[0].addresses[0].space-id: str
.machine-addresses[0].addresses[0].space-name: str
.machine-addresses[0].addresses[0].type: str
.machine-addresses[0].addresses[0].value: str
.machine-addresses[0].tag: str
out: ErrorResults
.results[0]: ErrorResult
.results[0].error: Error
.results[0].error.code: str
.results[0].error.info["abc"]: dict[Any, Any]
.results[0].error.message: str

Machiner: 5
.SetObservedNetworkConfig()
in: SetMachineNetworkConfig
.config[0]: NetworkConfig
.config[0].address: str
.config[0].addresses[0]: Address
.config[0].addresses[0].cidr: str
.config[0].addresses[0].config-type: str
.config[0].addresses[0].is-secondary: bool
.config[0].addresses[0].scope: str
.config[0].addresses[0].space-id: str
.config[0].addresses[0].space-name: str
.config[0].addresses[0].type: str
.config[0].addresses[0].value: str
.config[0].cidr: str
.config[0].config-type: str
.config[0].device-index: int
.config[0].disabled: bool
.config[0].dns-search-domains[0]: str
.config[0].dns-servers[0]: str
.config[0].gateway-address: str
.config[0].interface-name: str
.config[0].interface-type: str
.config[0].is-default-gateway: bool
.config[0].mac-address: str
.config[0].mtu: int
.config[0].no-auto-start: bool
.config[0].origin: str
.config[0].parent-interface-name: str
.config[0].provider-address-id: str
.config[0].provider-id: str
.config[0].provider-network-id: str
.config[0].provider-space-id: str
.config[0].provider-subnet-id: str
.config[0].provider-vlan-id: str
.config[0].routes[0]: NetworkRoute
.config[0].routes[0].destination-cidr: str
.config[0].routes[0].gateway-ip: str
.config[0].routes[0].metric: int
.config[0].shadow-addresses[0]: Address
.config[0].shadow-addresses[0].cidr: str
.config[0].shadow-addresses[0].config-type: str
.config[0].shadow-addresses[0].is-secondary: bool
.config[0].shadow-addresses[0].scope: str
.config[0].shadow-addresses[0].space-id: str
.config[0].shadow-addresses[0].space-name: str
.config[0].shadow-addresses[0].type: str
.config[0].shadow-addresses[0].value: str
.config[0].virtual-port-type: str
.config[0].vlan-tag: int
.tag: str
out: None

Machiner: 5
.SetStatus()
in: SetStatus
.entities[0]: EntityStatusArgs
.entities[0].data["abc"]: dict[Any, Any]
.entities[0].info: str
.entities[0].status: str
.entities[0].tag: str
out: ErrorResults
.results[0]: ErrorResult
.results[0].error: Error
.results[0].error.code: str
.results[0].error.info["abc"]: dict[Any, Any]
.results[0].error.message: str

Machiner: 5
.Watch()
in: Entities
.entities[0]: Entity
.entities[0].tag: str
out: NotifyWatchResults
.results[0]: NotifyWatchResult
.results[0].NotifyWatcherId: str
.results[0].error: Error
.results[0].error.code: str
.results[0].error.info["abc"]: dict[Any, Any]
.results[0].error.message: str

Machiner: 5
.WatchAPIHostPorts()
in: None
out: NotifyWatchResult
.NotifyWatcherId: str
.error: Error
.error.code: str
.error.info["abc"]: dict[Any, Any]
.error.message: str

MeterStatus: 2
.GetMeterStatus()
in: Entities
.entities[0]: Entity
.entities[0].tag: str
out: MeterStatusResults
.results[0]: MeterStatusResult
.results[0].code: str
.results[0].error: Error
.results[0].error.code: str
.results[0].error.info["abc"]: dict[Any, Any]
.results[0].error.message: str
.results[0].info: str

MeterStatus: 2
.SetState()
in: SetUnitStateArgs
.args[0]: SetUnitStateArg
.args[0].charm-state["abc"]: str
.args[0].meter-status-state: str
.args[0].relation-state["abc"]: str
.args[0].secret-state: str
.args[0].storage-state: str
.args[0].tag: str
.args[0].uniter-state: str
out: ErrorResults
.results[0]: ErrorResult
.results[0].error: Error
.results[0].error.code: str
.results[0].error.info["abc"]: dict[Any, Any]
.results[0].error.message: str

MeterStatus: 2
.State()
in: Entities
.entities[0]: Entity
.entities[0].tag: str
out: UnitStateResults
.results[0]: UnitStateResult
.results[0].charm-state["abc"]: str
.results[0].error: Error
.results[0].error.code: str
.results[0].error.info["abc"]: dict[Any, Any]
.results[0].error.message: str
.results[0].meter-status-state: str
.results[0].relation-state["abc"]: str
.results[0].secret-state: str
.results[0].storage-state: str
.results[0].uniter-state: str

MeterStatus: 2
.WatchMeterStatus()
in: Entities
.entities[0]: Entity
.entities[0].tag: str
out: NotifyWatchResults
.results[0]: NotifyWatchResult
.results[0].NotifyWatcherId: str
.results[0].error: Error
.results[0].error.code: str
.results[0].error.info["abc"]: dict[Any, Any]
.results[0].error.message: str

MetricsDebug: 2
.GetMetrics()
in: Entities
.entities[0]: Entity
.entities[0].tag: str
out: MetricResults
.results[0]: EntityMetrics
.results[0].error: Error
.results[0].error.code: str
.results[0].error.info["abc"]: dict[Any, Any]
.results[0].error.message: str
.results[0].metrics[0]: MetricResult
.results[0].metrics[0].key: str
.results[0].metrics[0].labels["abc"]: str
.results[0].metrics[0].time: str
.results[0].metrics[0].unit: str
.results[0].metrics[0].value: str

MetricsDebug: 2
.SetMeterStatus()
in: MeterStatusParams
.statues[0]: MeterStatusParam
.statues[0].code: str
.statues[0].info: str
.statues[0].tag: str
out: ErrorResults
.results[0]: ErrorResult
.results[0].error: Error
.results[0].error.code: str
.results[0].error.info["abc"]: dict[Any, Any]
.results[0].error.message: str

MigrationFlag: 1
.Phase()
in: Entities
.entities[0]: Entity
.entities[0].tag: str
out: PhaseResults
.results[0]: PhaseResult
.results[0].error: Error
.results[0].error.code: str
.results[0].error.info["abc"]: dict[Any, Any]
.results[0].error.message: str
.results[0].phase: str

MigrationFlag: 1
.Watch()
in: Entities
.entities[0]: Entity
.entities[0].tag: str
out: NotifyWatchResults
.results[0]: NotifyWatchResult
.results[0].NotifyWatcherId: str
.results[0].error: Error
.results[0].error.code: str
.results[0].error.info["abc"]: dict[Any, Any]
.results[0].error.message: str

MigrationMaster: 3
.Export()
in: None
out: SerializedModel
.bytes[0]: int
.charms[0]: str
.resources[0]: SerializedModelResource
.resources[0].application: str
.resources[0].application-revision: SerializedModelResourceRevision
.resources[0].application-revision.description: str
.resources[0].application-revision.fingerprint: str
.resources[0].application-revision.origin: str
.resources[0].application-revision.path: str
.resources[0].application-revision.revision: int
.resources[0].application-revision.size: int
.resources[0].application-revision.timestamp: str
.resources[0].application-revision.type: str
.resources[0].application-revision.username: str
.resources[0].charmstore-revision: SerializedModelResourceRevision
.resources[0].charmstore-revision.description: str
.resources[0].charmstore-revision.fingerprint: str
.resources[0].charmstore-revision.origin: str
.resources[0].charmstore-revision.path: str
.resources[0].charmstore-revision.revision: int
.resources[0].charmstore-revision.size: int
.resources[0].charmstore-revision.timestamp: str
.resources[0].charmstore-revision.type: str
.resources[0].charmstore-revision.username: str
.resources[0].name: str
.resources[0].unit-revisions["abc"]: SerializedModelResourceRevision
.resources[0].unit-revisions["abc"].description: str
.resources[0].unit-revisions["abc"].fingerprint: str
.resources[0].unit-revisions["abc"].origin: str
.resources[0].unit-revisions["abc"].path: str
.resources[0].unit-revisions["abc"].revision: int
.resources[0].unit-revisions["abc"].size: int
.resources[0].unit-revisions["abc"].timestamp: str
.resources[0].unit-revisions["abc"].type: str
.resources[0].unit-revisions["abc"].username: str
.tools[0]: SerializedModelTools
.tools[0].uri: str
.tools[0].version: str

MigrationMaster: 3
.MigrationStatus()
in: None
out: MasterMigrationStatus
.migration-id: str
.phase: str
.phase-changed-time: str
.spec: MigrationSpec
.spec.model-tag: str
.spec.target-info: MigrationTargetInfo
.spec.target-info.addrs[0]: str
.spec.target-info.auth-tag: str
.spec.target-info.ca-cert: str
.spec.target-info.controller-alias: str
.spec.target-info.controller-tag: str
.spec.target-info.macaroons: str
.spec.target-info.password: str

MigrationMaster: 3
.MinionReportTimeout()
in: None
out: StringResult
.error: Error
.error.code: str
.error.info["abc"]: dict[Any, Any]
.error.message: str
.result: str

MigrationMaster: 3
.MinionReports()
in: None
out: MinionReports
.failed[0]: str
.migration-id: str
.phase: str
.success-count: int
.unknown-count: int
.unknown-sample[0]: str

MigrationMaster: 3
.ModelInfo()
in: None
out: MigrationModelInfo
.agent-version: Number
.agent-version.Build: int
.agent-version.Major: int
.agent-version.Minor: int
.agent-version.Patch: int
.agent-version.Tag: str
.controller-agent-version: Number
.controller-agent-version.Build: int
.controller-agent-version.Major: int
.controller-agent-version.Minor: int
.controller-agent-version.Patch: int
.controller-agent-version.Tag: str
.facade-versions["abc"][0]: int
.name: str
.owner-tag: str
.uuid: str

MigrationMaster: 3
.Prechecks()
in: PrechecksArgs
.target-controller-version: Number
.target-controller-version.Build: int
.target-controller-version.Major: int
.target-controller-version.Minor: int
.target-controller-version.Patch: int
.target-controller-version.Tag: str
out: None

MigrationMaster: 3
.ProcessRelations()
in: ProcessRelations
.controller-alias: str
out: None

MigrationMaster: 3
.Reap()
in: None
out: None

MigrationMaster: 3
.SetPhase()
in: SetMigrationPhaseArgs
.phase: str
out: None

MigrationMaster: 3
.SetStatusMessage()
in: SetMigrationStatusMessageArgs
.message: str
out: None

MigrationMaster: 3
.SourceControllerInfo()
in: None
out: MigrationSourceInfo
.addrs[0]: str
.ca-cert: str
.controller-alias: str
.controller-tag: str
.local-related-models[0]: str

MigrationMaster: 3
.Watch()
in: None
out: NotifyWatchResult
.NotifyWatcherId: str
.error: Error
.error.code: str
.error.info["abc"]: dict[Any, Any]
.error.message: str

MigrationMaster: 3
.WatchMinionReports()
in: None
out: NotifyWatchResult
.NotifyWatcherId: str
.error: Error
.error.code: str
.error.info["abc"]: dict[Any, Any]
.error.message: str

MigrationMinion: 1
.Report()
in: MinionReport
.migration-id: str
.phase: str
.success: bool
out: None

MigrationMinion: 1
.Watch()
in: None
out: NotifyWatchResult
.NotifyWatcherId: str
.error: Error
.error.code: str
.error.info["abc"]: dict[Any, Any]
.error.message: str

MigrationStatusWatcher: 1
.Next()
in: None
out: MigrationStatus
.attempt: int
.migration-id: str
.phase: str
.source-api-addrs[0]: str
.source-ca-cert: str
.target-api-addrs[0]: str
.target-ca-cert: str

MigrationStatusWatcher: 1
.Stop()
in: None
out: None

ModelConfig: 3
.GetModelConstraints()
in: None
out: GetConstraintsResults
.constraints: Value
.constraints.allocate-public-ip: bool
.constraints.arch: str
.constraints.container: str
.constraints.cores: int
.constraints.cpu-power: int
.constraints.image-id: str
.constraints.instance-role: str
.constraints.instance-type: str
.constraints.mem: int
.constraints.root-disk: int
.constraints.root-disk-source: str
.constraints.spaces[0]: str
.constraints.tags[0]: str
.constraints.virt-type: str
.constraints.zones[0]: str

ModelConfig: 3
.ModelGet()
in: None
out: ModelConfigResults
.config["abc"]: ConfigValue
.config["abc"].source: str
.config["abc"].value: dict[Any, Any]

ModelConfig: 3
.ModelSet()
in: ModelSet
.config["abc"]: dict[Any, Any]
out: None

ModelConfig: 3
.ModelUnset()
in: ModelUnset
.keys[0]: str
out: None

ModelConfig: 3
.SLALevel()
in: None
out: StringResult
.error: Error
.error.code: str
.error.info["abc"]: dict[Any, Any]
.error.message: str
.result: str

ModelConfig: 3
.Sequences()
in: None
out: ModelSequencesResult
.sequences["abc"]: int

ModelConfig: 3
.SetModelConstraints()
in: SetConstraints
.application: str
.constraints: Value
.constraints.allocate-public-ip: bool
.constraints.arch: str
.constraints.container: str
.constraints.cores: int
.constraints.cpu-power: int
.constraints.image-id: str
.constraints.instance-role: str
.constraints.instance-type: str
.constraints.mem: int
.constraints.root-disk: int
.constraints.root-disk-source: str
.constraints.spaces[0]: str
.constraints.tags[0]: str
.constraints.virt-type: str
.constraints.zones[0]: str
out: None

ModelConfig: 3
.SetSLALevel()
in: ModelSLA
.ModelSLAInfo: ModelSLAInfo
.ModelSLAInfo.level: str
.ModelSLAInfo.owner: str
.creds[0]: int
.level: str
.owner: str
out: None

ModelGeneration: 4
.AbortBranch()
in: BranchArg
.branch: str
out: ErrorResult
.error: Error
.error.code: str
.error.info["abc"]: dict[Any, Any]
.error.message: str

ModelGeneration: 4
.AddBranch()
in: BranchArg
.branch: str
out: ErrorResult
.error: Error
.error.code: str
.error.info["abc"]: dict[Any, Any]
.error.message: str

ModelGeneration: 4
.BranchInfo()
in: BranchInfoArgs
.branches[0]: str
.detailed: bool
out: BranchResults
.error: Error
.error.code: str
.error.info["abc"]: dict[Any, Any]
.error.message: str
.generations[0]: Generation
.generations[0].applications[0]: GenerationApplication
.generations[0].applications[0].application: str
.generations[0].applications[0].config["abc"]: dict[Any, Any]
.generations[0].applications[0].pending[0]: str
.generations[0].applications[0].progress: str
.generations[0].applications[0].tracking[0]: str
.generations[0].branch: str
.generations[0].completed: int
.generations[0].completed-by: str
.generations[0].created: int
.generations[0].created-by: str
.generations[0].generation-id: int

ModelGeneration: 4
.CommitBranch()
in: BranchArg
.branch: str
out: IntResult
.error: Error
.error.code: str
.error.info["abc"]: dict[Any, Any]
.error.message: str
.result: int

ModelGeneration: 4
.HasActiveBranch()
in: BranchArg
.branch: str
out: BoolResult
.error: Error
.error.code: str
.error.info["abc"]: dict[Any, Any]
.error.message: str
.result: bool

ModelGeneration: 4
.ListCommits()
in: None
out: BranchResults
.error: Error
.error.code: str
.error.info["abc"]: dict[Any, Any]
.error.message: str
.generations[0]: Generation
.generations[0].applications[0]: GenerationApplication
.generations[0].applications[0].application: str
.generations[0].applications[0].config["abc"]: dict[Any, Any]
.generations[0].applications[0].pending[0]: str
.generations[0].applications[0].progress: str
.generations[0].applications[0].tracking[0]: str
.generations[0].branch: str
.generations[0].completed: int
.generations[0].completed-by: str
.generations[0].created: int
.generations[0].created-by: str
.generations[0].generation-id: int

ModelGeneration: 4
.ShowCommit()
in: GenerationId
.generation-id: int
out: GenerationResult
.error: Error
.error.code: str
.error.info["abc"]: dict[Any, Any]
.error.message: str
.generation: Generation
.generation.applications[0]: GenerationApplication
.generation.applications[0].application: str
.generation.applications[0].config["abc"]: dict[Any, Any]
.generation.applications[0].pending[0]: str
.generation.applications[0].progress: str
.generation.applications[0].tracking[0]: str
.generation.branch: str
.generation.completed: int
.generation.completed-by: str
.generation.created: int
.generation.created-by: str
.generation.generation-id: int

ModelGeneration: 4
.TrackBranch()
in: BranchTrackArg
.branch: str
.entities[0]: Entity
.entities[0].tag: str
.num-units: int
out: ErrorResults
.results[0]: ErrorResult
.results[0].error: Error
.results[0].error.code: str
.results[0].error.info["abc"]: dict[Any, Any]
.results[0].error.message: str

NotifyWatcher: 1
.Next()
in: None
out: None

NotifyWatcher: 1
.Stop()
in: None
out: None

OfferStatusWatcher: 1
.Next()
in: None
out: OfferStatusWatchResult
.changes[0]: OfferStatusChange
.changes[0].offer-name: str
.changes[0].status: EntityStatus
.changes[0].status.data["abc"]: dict[Any, Any]
.changes[0].status.info: str
.changes[0].status.since: str
.changes[0].status.status: str
.error: Error
.error.code: str
.error.info["abc"]: dict[Any, Any]
.error.message: str
.watcher-id: str

OfferStatusWatcher: 1
.Stop()
in: None
out: None

Payloads: 1
.List()
in: PayloadListArgs
.patterns[0]: str
out: PayloadListResults
.results[0]: Payload
.results[0].class: str
.results[0].id: str
.results[0].labels[0]: str
.results[0].machine: str
.results[0].status: str
.results[0].type: str
.results[0].unit: str

PayloadsHookContext: 1
.List()
in: Entities
.entities[0]: Entity
.entities[0].tag: str
out: PayloadResults
.results[0]: PayloadResult
.results[0].Entity: Entity
.results[0].Entity.tag: str
.results[0].error: Error
.results[0].error.code: str
.results[0].error.info["abc"]: dict[Any, Any]
.results[0].error.message: str
.results[0].not-found: bool
.results[0].payload: Payload
.results[0].payload.class: str
.results[0].payload.id: str
.results[0].payload.labels[0]: str
.results[0].payload.machine: str
.results[0].payload.status: str
.results[0].payload.type: str
.results[0].payload.unit: str
.results[0].tag: str

PayloadsHookContext: 1
.LookUp()
in: LookUpPayloadArgs
.args[0]: LookUpPayloadArg
.args[0].id: str
.args[0].name: str
out: PayloadResults
.results[0]: PayloadResult
.results[0].Entity: Entity
.results[0].Entity.tag: str
.results[0].error: Error
.results[0].error.code: str
.results[0].error.info["abc"]: dict[Any, Any]
.results[0].error.message: str
.results[0].not-found: bool
.results[0].payload: Payload
.results[0].payload.class: str
.results[0].payload.id: str
.results[0].payload.labels[0]: str
.results[0].payload.machine: str
.results[0].payload.status: str
.results[0].payload.type: str
.results[0].payload.unit: str
.results[0].tag: str

PayloadsHookContext: 1
.SetStatus()
in: SetPayloadStatusArgs
.args[0]: SetPayloadStatusArg
.args[0].Entity: Entity
.args[0].Entity.tag: str
.args[0].status: str
.args[0].tag: str
out: PayloadResults
.results[0]: PayloadResult
.results[0].Entity: Entity
.results[0].Entity.tag: str
.results[0].error: Error
.results[0].error.code: str
.results[0].error.info["abc"]: dict[Any, Any]
.results[0].error.message: str
.results[0].not-found: bool
.results[0].payload: Payload
.results[0].payload.class: str
.results[0].payload.id: str
.results[0].payload.labels[0]: str
.results[0].payload.machine: str
.results[0].payload.status: str
.results[0].payload.type: str
.results[0].payload.unit: str
.results[0].tag: str

PayloadsHookContext: 1
.Track()
in: TrackPayloadArgs
.payloads[0]: Payload
.payloads[0].class: str
.payloads[0].id: str
.payloads[0].labels[0]: str
.payloads[0].machine: str
.payloads[0].status: str
.payloads[0].type: str
.payloads[0].unit: str
out: PayloadResults
.results[0]: PayloadResult
.results[0].Entity: Entity
.results[0].Entity.tag: str
.results[0].error: Error
.results[0].error.code: str
.results[0].error.info["abc"]: dict[Any, Any]
.results[0].error.message: str
.results[0].not-found: bool
.results[0].payload: Payload
.results[0].payload.class: str
.results[0].payload.id: str
.results[0].payload.labels[0]: str
.results[0].payload.machine: str
.results[0].payload.status: str
.results[0].payload.type: str
.results[0].payload.unit: str
.results[0].tag: str

PayloadsHookContext: 1
.Untrack()
in: Entities
.entities[0]: Entity
.entities[0].tag: str
out: PayloadResults
.results[0]: PayloadResult
.results[0].Entity: Entity
.results[0].Entity.tag: str
.results[0].error: Error
.results[0].error.code: str
.results[0].error.info["abc"]: dict[Any, Any]
.results[0].error.message: str
.results[0].not-found: bool
.results[0].payload: Payload
.results[0].payload.class: str
.results[0].payload.id: str
.results[0].payload.labels[0]: str
.results[0].payload.machine: str
.results[0].payload.status: str
.results[0].payload.type: str
.results[0].payload.unit: str
.results[0].tag: str

Pinger: 1
.Ping()
in: None
out: None

Pinger: 1
.Stop()
in: None
out: None

ProxyUpdater: 2
.ProxyConfig()
in: Entities
.entities[0]: Entity
.entities[0].tag: str
out: ProxyConfigResults
.results[0]: ProxyConfigResult
.results[0].apt-mirror: str
.results[0].apt-proxy-settings: ProxyConfig
.results[0].apt-proxy-settings.ftp: str
.results[0].apt-proxy-settings.http: str
.results[0].apt-proxy-settings.https: str
.results[0].apt-proxy-settings.no-proxy: str
.results[0].error: Error
.results[0].error.code: str
.results[0].error.info["abc"]: dict[Any, Any]
.results[0].error.message: str
.results[0].juju-proxy-settings: ProxyConfig
.results[0].juju-proxy-settings.ftp: str
.results[0].juju-proxy-settings.http: str
.results[0].juju-proxy-settings.https: str
.results[0].juju-proxy-settings.no-proxy: str
.results[0].legacy-proxy-settings: ProxyConfig
.results[0].legacy-proxy-settings.ftp: str
.results[0].legacy-proxy-settings.http: str
.results[0].legacy-proxy-settings.https: str
.results[0].legacy-proxy-settings.no-proxy: str
.results[0].snap-proxy-settings: ProxyConfig
.results[0].snap-proxy-settings.ftp: str
.results[0].snap-proxy-settings.http: str
.results[0].snap-proxy-settings.https: str
.results[0].snap-proxy-settings.no-proxy: str
.results[0].snap-store-assertions: str
.results[0].snap-store-id: str
.results[0].snap-store-proxy-url: str

ProxyUpdater: 2
.WatchForProxyConfigAndAPIHostPortChanges()
in: Entities
.entities[0]: Entity
.entities[0].tag: str
out: NotifyWatchResults
.results[0]: NotifyWatchResult
.results[0].NotifyWatcherId: str
.results[0].error: Error
.results[0].error.code: str
.results[0].error.info["abc"]: dict[Any, Any]
.results[0].error.message: str

RelationStatusWatcher: 1
.Next()
in: None
out: RelationLifeSuspendedStatusWatchResult
.changes[0]: RelationLifeSuspendedStatusChange
.changes[0].key: str
.changes[0].life: str
.changes[0].suspended: bool
.changes[0].suspended-reason: str
.error: Error
.error.code: str
.error.info["abc"]: dict[Any, Any]
.error.message: str
.watcher-id: str

RelationStatusWatcher: 1
.Stop()
in: None
out: None

RelationUnitsWatcher: 1
.Next()
in: None
out: RelationUnitsWatchResult
.changes: RelationUnitsChange
.changes.app-changed["abc"]: int
.changes.changed["abc"]: UnitSettings
.changes.changed["abc"].version: int
.changes.departed[0]: str
.error: Error
.error.code: str
.error.info["abc"]: dict[Any, Any]
.error.message: str
.watcher-id: str

RelationUnitsWatcher: 1
.Stop()
in: None
out: None

RemoteRelationWatcher: 1
.Next()
in: None
out: RemoteRelationWatchResult
.changes: RemoteRelationChangeEvent
.changes.application-settings["abc"]: dict[Any, Any]
.changes.application-token: str
.changes.bakery-version: int
.changes.changed-units[0]: RemoteRelationUnitChange
.changes.changed-units[0].settings["abc"]: dict[Any, Any]
.changes.changed-units[0].unit-id: int
.changes.departed-units[0]: int
.changes.force-cleanup: bool
.changes.life: str
.changes.macaroons[0]: Macaroon
.changes.macaroons[0]: dict[Any, Any]
.changes.relation-token: str
.changes.suspended: bool
.changes.suspended-reason: str
.changes.unit-count: int
.error: Error
.error.code: str
.error.info["abc"]: dict[Any, Any]
.error.message: str
.watcher-id: str

RemoteRelationWatcher: 1
.Stop()
in: None
out: None

RemoteRelations: 2
.ConsumeRemoteRelationChanges()
in: RemoteRelationsChanges
.changes[0]: RemoteRelationChangeEvent
.changes[0].application-settings["abc"]: dict[Any, Any]
.changes[0].application-token: str
.changes[0].bakery-version: int
.changes[0].changed-units[0]: RemoteRelationUnitChange
.changes[0].changed-units[0].settings["abc"]: dict[Any, Any]
.changes[0].changed-units[0].unit-id: int
.changes[0].departed-units[0]: int
.changes[0].force-cleanup: bool
.changes[0].life: str
.changes[0].macaroons[0]: Macaroon
.changes[0].macaroons[0]: dict[Any, Any]
.changes[0].relation-token: str
.changes[0].suspended: bool
.changes[0].suspended-reason: str
.changes[0].unit-count: int
out: ErrorResults
.results[0]: ErrorResult
.results[0].error: Error
.results[0].error.code: str
.results[0].error.info["abc"]: dict[Any, Any]
.results[0].error.message: str

RemoteRelations: 2
.ConsumeRemoteSecretChanges()
in: LatestSecretRevisionChanges
.changes[0]: SecretRevisionChange
.changes[0].revision: int
.changes[0].uri: str
out: ErrorResults
.results[0]: ErrorResult
.results[0].error: Error
.results[0].error.code: str
.results[0].error.info["abc"]: dict[Any, Any]
.results[0].error.message: str

RemoteRelations: 2
.ControllerAPIInfoForModels()
in: Entities
.entities[0]: Entity
.entities[0].tag: str
out: ControllerAPIInfoResults
.results[0]: ControllerAPIInfoResult
.results[0].addresses[0]: str
.results[0].cacert: str
.results[0].error: Error
.results[0].error.code: str
.results[0].error.info["abc"]: dict[Any, Any]
.results[0].error.message: str

RemoteRelations: 2
.ControllerConfig()
in: None
out: ControllerConfigResult
.config["abc"]: dict[Any, Any]

RemoteRelations: 2
.ExportEntities()
in: Entities
.entities[0]: Entity
.entities[0].tag: str
out: TokenResults
.results[0]: TokenResult
.results[0].error: Error
.results[0].error.code: str
.results[0].error.info["abc"]: dict[Any, Any]
.results[0].error.message: str
.results[0].token: str

RemoteRelations: 2
.GetTokens()
in: GetTokenArgs
.Args[0]: GetTokenArg
.Args[0].tag: str
out: StringResults
.results[0]: StringResult
.results[0].error: Error
.results[0].error.code: str
.results[0].error.info["abc"]: dict[Any, Any]
.results[0].error.message: str
.results[0].result: str

RemoteRelations: 2
.ImportRemoteEntities()
in: RemoteEntityTokenArgs
.Args[0]: RemoteEntityTokenArg
.Args[0].tag: str
.Args[0].token: str
out: ErrorResults
.results[0]: ErrorResult
.results[0].error: Error
.results[0].error.code: str
.results[0].error.info["abc"]: dict[Any, Any]
.results[0].error.message: str

RemoteRelations: 2
.Relations()
in: Entities
.entities[0]: Entity
.entities[0].tag: str
out: RemoteRelationResults
.results[0]: RemoteRelationResult
.results[0].error: Error
.results[0].error.code: str
.results[0].error.info["abc"]: dict[Any, Any]
.results[0].error.message: str
.results[0].result: RemoteRelation
.results[0].result.application-name: str
.results[0].result.endpoint: RemoteEndpoint
.results[0].result.endpoint.interface: str
.results[0].result.endpoint.limit: int
.results[0].result.endpoint.name: str
.results[0].result.endpoint.role: str
.results[0].result.id: int
.results[0].result.key: str
.results[0].result.life: str
.results[0].result.remote-application-name: str
.results[0].result.remote-endpoint-name: str
.results[0].result.source-model-uuid: str
.results[0].result.suspended: bool
.results[0].result.unit-count: int

RemoteRelations: 2
.RemoteApplications()
in: Entities
.entities[0]: Entity
.entities[0].tag: str
out: RemoteApplicationResults
.results[0]: RemoteApplicationResult
.results[0].error: Error
.results[0].error.code: str
.results[0].error.info["abc"]: dict[Any, Any]
.results[0].error.message: str
.results[0].result: RemoteApplication
.results[0].result.consume-version: int
.results[0].result.is-consumer-proxy: bool
.results[0].result.life: str
.results[0].result.macaroon: Macaroon
.results[0].result.macaroon: dict[Any, Any]
.results[0].result.model-uuid: str
.results[0].result.name: str
.results[0].result.offer-uuid: str
.results[0].result.status: str

RemoteRelations: 2
.SaveMacaroons()
in: EntityMacaroonArgs
.Args[0]: EntityMacaroonArg
.Args[0].macaroon: Macaroon
.Args[0].macaroon: dict[Any, Any]
.Args[0].tag: str
out: ErrorResults
.results[0]: ErrorResult
.results[0].error: Error
.results[0].error.code: str
.results[0].error.info["abc"]: dict[Any, Any]
.results[0].error.message: str

RemoteRelations: 2
.SetRemoteApplicationsStatus()
in: SetStatus
.entities[0]: EntityStatusArgs
.entities[0].data["abc"]: dict[Any, Any]
.entities[0].info: str
.entities[0].status: str
.entities[0].tag: str
out: ErrorResults
.results[0]: ErrorResult
.results[0].error: Error
.results[0].error.code: str
.results[0].error.info["abc"]: dict[Any, Any]
.results[0].error.message: str

RemoteRelations: 2
.UpdateControllersForModels()
in: UpdateControllersForModelsParams
.changes[0]: UpdateControllerForModel
.changes[0].info: ExternalControllerInfo
.changes[0].info.addrs[0]: str
.changes[0].info.ca-cert: str
.changes[0].info.controller-alias: str
.changes[0].info.controller-tag: str
.changes[0].model-tag: str
out: ErrorResults
.results[0]: ErrorResult
.results[0].error: Error
.results[0].error.code: str
.results[0].error.info["abc"]: dict[Any, Any]
.results[0].error.message: str

RemoteRelations: 2
.WatchLocalRelationChanges()
in: Entities
.entities[0]: Entity
.entities[0].tag: str
out: RemoteRelationWatchResults
.results[0]: RemoteRelationWatchResult
.results[0].changes: RemoteRelationChangeEvent
.results[0].changes.application-settings["abc"]: dict[Any, Any]
.results[0].changes.application-token: str
.results[0].changes.bakery-version: int
.results[0].changes.changed-units[0]: RemoteRelationUnitChange
.results[0].changes.changed-units[0].settings["abc"]: dict[Any, Any]
.results[0].changes.changed-units[0].unit-id: int
.results[0].changes.departed-units[0]: int
.results[0].changes.force-cleanup: bool
.results[0].changes.life: str
.results[0].changes.macaroons[0]: Macaroon
.results[0].changes.macaroons[0]: dict[Any, Any]
.results[0].changes.relation-token: str
.results[0].changes.suspended: bool
.results[0].changes.suspended-reason: str
.results[0].changes.unit-count: int
.results[0].error: Error
.results[0].error.code: str
.results[0].error.info["abc"]: dict[Any, Any]
.results[0].error.message: str
.results[0].watcher-id: str

RemoteRelations: 2
.WatchRemoteApplicationRelations()
in: Entities
.entities[0]: Entity
.entities[0].tag: str
out: StringsWatchResults
.results[0]: StringsWatchResult
.results[0].changes[0]: str
.results[0].error: Error
.results[0].error.code: str
.results[0].error.info["abc"]: dict[Any, Any]
.results[0].error.message: str
.results[0].watcher-id: str

RemoteRelations: 2
.WatchRemoteApplications()
in: None
out: StringsWatchResult
.changes[0]: str
.error: Error
.error.code: str
.error.info["abc"]: dict[Any, Any]
.error.message: str
.watcher-id: str

RemoteRelations: 2
.WatchRemoteRelations()
in: None
out: StringsWatchResult
.changes[0]: str
.error: Error
.error.code: str
.error.info["abc"]: dict[Any, Any]
.error.message: str
.watcher-id: str

Resources: 3
.AddPendingResources()
in: AddPendingResourcesArgsV2
.Entity: Entity
.Entity.tag: str
.charm-origin: CharmOrigin
.charm-origin.architecture: str
.charm-origin.base: Base
.charm-origin.base.channel: str
.charm-origin.base.name: str
.charm-origin.branch: str
.charm-origin.hash: str
.charm-origin.id: str
.charm-origin.instance-key: str
.charm-origin.revision: int
.charm-origin.risk: str
.charm-origin.source: str
.charm-origin.track: str
.charm-origin.type: str
.macaroon: Macaroon
.macaroon: dict[Any, Any]
.resources[0]: CharmResource
.resources[0].description: str
.resources[0].fingerprint[0]: int
.resources[0].name: str
.resources[0].origin: str
.resources[0].path: str
.resources[0].revision: int
.resources[0].size: int
.resources[0].type: str
.tag: str
.url: str
out: AddPendingResourcesResult
.ErrorResult: ErrorResult
.ErrorResult.error: Error
.ErrorResult.error.code: str
.ErrorResult.error.info["abc"]: dict[Any, Any]
.ErrorResult.error.message: str
.error: Error
.error.code: str
.error.info["abc"]: dict[Any, Any]
.error.message: str
.pending-ids[0]: str

Resources: 3
.ListResources()
in: ListResourcesArgs
.entities[0]: Entity
.entities[0].tag: str
out: ResourcesResults
.results[0]: ResourcesResult
.results[0].ErrorResult: ErrorResult
.results[0].ErrorResult.error: Error
.results[0].ErrorResult.error.code: str
.results[0].ErrorResult.error.info["abc"]: dict[Any, Any]
.results[0].ErrorResult.error.message: str
.results[0].charm-store-resources[0]: CharmResource
.results[0].charm-store-resources[0].description: str
.results[0].charm-store-resources[0].fingerprint[0]: int
.results[0].charm-store-resources[0].name: str
.results[0].charm-store-resources[0].origin: str
.results[0].charm-store-resources[0].path: str
.results[0].charm-store-resources[0].revision: int
.results[0].charm-store-resources[0].size: int
.results[0].charm-store-resources[0].type: str
.results[0].error: Error
.results[0].error.code: str
.results[0].error.info["abc"]: dict[Any, Any]
.results[0].error.message: str
.results[0].resources[0]: Resource
.results[0].resources[0].CharmResource: CharmResource
.results[0].resources[0].CharmResource.description: str
.results[0].resources[0].CharmResource.fingerprint[0]: int
.results[0].resources[0].CharmResource.name: str
.results[0].resources[0].CharmResource.origin: str
.results[0].resources[0].CharmResource.path: str
.results[0].resources[0].CharmResource.revision: int
.results[0].resources[0].CharmResource.size: int
.results[0].resources[0].CharmResource.type: str
.results[0].resources[0].application: str
.results[0].resources[0].description: str
.results[0].resources[0].fingerprint[0]: int
.results[0].resources[0].id: str
.results[0].resources[0].name: str
.results[0].resources[0].origin: str
.results[0].resources[0].path: str
.results[0].resources[0].pending-id: str
.results[0].resources[0].revision: int
.results[0].resources[0].size: int
.results[0].resources[0].timestamp: str
.results[0].resources[0].type: str
.results[0].resources[0].username: str
.results[0].unit-resources[0]: UnitResources
.results[0].unit-resources[0].Entity: Entity
.results[0].unit-resources[0].Entity.tag: str
.results[0].unit-resources[0].download-progress["abc"]: int
.results[0].unit-resources[0].resources[0]: Resource
.results[0].unit-resources[0].resources[0].CharmResource: CharmResource
.results[0].unit-resources[0].resources[0].CharmResource.description: str
.results[0].unit-resources[0].resources[0].CharmResource.fingerprint[0]: int
.results[0].unit-resources[0].resources[0].CharmResource.name: str
.results[0].unit-resources[0].resources[0].CharmResource.origin: str
.results[0].unit-resources[0].resources[0].CharmResource.path: str
.results[0].unit-resources[0].resources[0].CharmResource.revision: int
.results[0].unit-resources[0].resources[0].CharmResource.size: int
.results[0].unit-resources[0].resources[0].CharmResource.type: str
.results[0].unit-resources[0].resources[0].application: str
.results[0].unit-resources[0].resources[0].description: str
.results[0].unit-resources[0].resources[0].fingerprint[0]: int
.results[0].unit-resources[0].resources[0].id: str
.results[0].unit-resources[0].resources[0].name: str
.results[0].unit-resources[0].resources[0].origin: str
.results[0].unit-resources[0].resources[0].path: str
.results[0].unit-resources[0].resources[0].pending-id: str
.results[0].unit-resources[0].resources[0].revision: int
.results[0].unit-resources[0].resources[0].size: int
.results[0].unit-resources[0].resources[0].timestamp: str
.results[0].unit-resources[0].resources[0].type: str
.results[0].unit-resources[0].resources[0].username: str
.results[0].unit-resources[0].tag: str

ResourcesHookContext: 1
.GetResourceInfo()
in: ListUnitResourcesArgs
.resource-names[0]: str
out: UnitResourcesResult
.ErrorResult: ErrorResult
.ErrorResult.error: Error
.ErrorResult.error.code: str
.ErrorResult.error.info["abc"]: dict[Any, Any]
.ErrorResult.error.message: str
.error: Error
.error.code: str
.error.info["abc"]: dict[Any, Any]
.error.message: str
.resources[0]: UnitResourceResult
.resources[0].ErrorResult: ErrorResult
.resources[0].ErrorResult.error: Error
.resources[0].ErrorResult.error.code: str
.resources[0].ErrorResult.error.info["abc"]: dict[Any, Any]
.resources[0].ErrorResult.error.message: str
.resources[0].error: Error
.resources[0].error.code: str
.resources[0].error.info["abc"]: dict[Any, Any]
.resources[0].error.message: str
.resources[0].resource: Resource
.resources[0].resource.CharmResource: CharmResource
.resources[0].resource.CharmResource.description: str
.resources[0].resource.CharmResource.fingerprint[0]: int
.resources[0].resource.CharmResource.name: str
.resources[0].resource.CharmResource.origin: str
.resources[0].resource.CharmResource.path: str
.resources[0].resource.CharmResource.revision: int
.resources[0].resource.CharmResource.size: int
.resources[0].resource.CharmResource.type: str
.resources[0].resource.application: str
.resources[0].resource.description: str
.resources[0].resource.fingerprint[0]: int
.resources[0].resource.id: str
.resources[0].resource.name: str
.resources[0].resource.origin: str
.resources[0].resource.path: str
.resources[0].resource.pending-id: str
.resources[0].resource.revision: int
.resources[0].resource.size: int
.resources[0].resource.timestamp: str
.resources[0].resource.type: str
.resources[0].resource.username: str

RetryStrategy: 1
.RetryStrategy()
in: Entities
.entities[0]: Entity
.entities[0].tag: str
out: RetryStrategyResults
.results[0]: RetryStrategyResult
.results[0].error: Error
.results[0].error.code: str
.results[0].error.info["abc"]: dict[Any, Any]
.results[0].error.message: str
.results[0].result: RetryStrategy
.results[0].result.jitter-retry-time: bool
.results[0].result.max-retry-time: int
.results[0].result.min-retry-time: int
.results[0].result.retry-time-factor: int
.results[0].result.should-retry: bool

RetryStrategy: 1
.WatchRetryStrategy()
in: Entities
.entities[0]: Entity
.entities[0].tag: str
out: NotifyWatchResults
.results[0]: NotifyWatchResult
.results[0].NotifyWatcherId: str
.results[0].error: Error
.results[0].error.code: str
.results[0].error.info["abc"]: dict[Any, Any]
.results[0].error.message: str

SSHClient: 4
.AllAddresses()
in: Entities
.entities[0]: Entity
.entities[0].tag: str
out: SSHAddressesResults
.results[0]: SSHAddressesResult
.results[0].addresses[0]: str
.results[0].error: Error
.results[0].error.code: str
.results[0].error.info["abc"]: dict[Any, Any]
.results[0].error.message: str

SSHClient: 4
.ModelCredentialForSSH()
in: None
out: CloudSpecResult
.error: Error
.error.code: str
.error.info["abc"]: dict[Any, Any]
.error.message: str
.result: CloudSpec
.result.cacertificates[0]: str
.result.credential: CloudCredential
.result.credential.attrs["abc"]: str
.result.credential.auth-type: str
.result.credential.redacted[0]: str
.result.endpoint: str
.result.identity-endpoint: str
.result.is-controller-cloud: bool
.result.name: str
.result.region: str
.result.skip-tls-verify: bool
.result.storage-endpoint: str
.result.type: str

SSHClient: 4
.PrivateAddress()
in: Entities
.entities[0]: Entity
.entities[0].tag: str
out: SSHAddressResults
.results[0]: SSHAddressResult
.results[0].address: str
.results[0].error: Error
.results[0].error.code: str
.results[0].error.info["abc"]: dict[Any, Any]
.results[0].error.message: str

SSHClient: 4
.Proxy()
in: None
out: SSHProxyResult
.use-proxy: bool

SSHClient: 4
.PublicAddress()
in: Entities
.entities[0]: Entity
.entities[0].tag: str
out: SSHAddressResults
.results[0]: SSHAddressResult
.results[0].address: str
.results[0].error: Error
.results[0].error.code: str
.results[0].error.info["abc"]: dict[Any, Any]
.results[0].error.message: str

SSHClient: 4
.PublicKeys()
in: Entities
.entities[0]: Entity
.entities[0].tag: str
out: SSHPublicKeysResults
.results[0]: SSHPublicKeysResult
.results[0].error: Error
.results[0].error.code: str
.results[0].error.info["abc"]: dict[Any, Any]
.results[0].error.message: str
.results[0].public-keys[0]: str

SecretBackendsRotateWatcher: 1
.Next()
in: None
out: SecretBackendRotateWatchResult
.changes[0]: SecretBackendRotateChange
.changes[0].backend-name: str
.changes[0].id: str
.changes[0].next-trigger-time: str
.error: Error
.error.code: str
.error.info["abc"]: dict[Any, Any]
.error.message: str
.watcher-id: str

SecretBackendsRotateWatcher: 1
.Stop()
in: None
out: None

Secrets: 2
.CreateSecrets()
in: CreateSecretArgs
.args[0]: CreateSecretArg
.args[0].UpsertSecretArg: UpsertSecretArg
.args[0].UpsertSecretArg.content: SecretContentParams
.args[0].UpsertSecretArg.content.data["abc"]: str
.args[0].UpsertSecretArg.content.value-ref: SecretValueRef
.args[0].UpsertSecretArg.content.value-ref.backend-id: str
.args[0].UpsertSecretArg.content.value-ref.revision-id: str
.args[0].UpsertSecretArg.description: str
.args[0].UpsertSecretArg.expire-time: str
.args[0].UpsertSecretArg.label: str
.args[0].UpsertSecretArg.params["abc"]: dict[Any, Any]
.args[0].UpsertSecretArg.rotate-policy: str
.args[0].content: SecretContentParams
.args[0].content.data["abc"]: str
.args[0].content.value-ref: SecretValueRef
.args[0].content.value-ref.backend-id: str
.args[0].content.value-ref.revision-id: str
.args[0].description: str
.args[0].expire-time: str
.args[0].label: str
.args[0].owner-tag: str
.args[0].params["abc"]: dict[Any, Any]
.args[0].rotate-policy: str
.args[0].uri: str
out: StringResults
.results[0]: StringResult
.results[0].error: Error
.results[0].error.code: str
.results[0].error.info["abc"]: dict[Any, Any]
.results[0].error.message: str
.results[0].result: str

Secrets: 2
.GrantSecret()
in: GrantRevokeUserSecretArg
.applications[0]: str
.label: str
.uri: str
out: ErrorResults
.results[0]: ErrorResult
.results[0].error: Error
.results[0].error.code: str
.results[0].error.info["abc"]: dict[Any, Any]
.results[0].error.message: str

Secrets: 2
.ListSecrets()
in: ListSecretsArgs
.filter: SecretsFilter
.filter.label: str
.filter.owner-tag: str
.filter.revision: int
.filter.uri: str
.show-secrets: bool
out: ListSecretResults
.results[0]: ListSecretResult
.results[0].access[0]: AccessInfo
.results[0].access[0].role: str
.results[0].access[0].scope-tag: str
.results[0].access[0].target-tag: str
.results[0].create-time: str
.results[0].description: str
.results[0].label: str
.results[0].latest-expire-time: str
.results[0].latest-revision: int
.results[0].next-rotate-time: str
.results[0].owner-tag: str
.results[0].revisions[0]: SecretRevision
.results[0].revisions[0].backend-name: str
.results[0].revisions[0].create-time: str
.results[0].revisions[0].expire-time: str
.results[0].revisions[0].revision: int
.results[0].revisions[0].update-time: str
.results[0].revisions[0].value-ref: SecretValueRef
.results[0].revisions[0].value-ref.backend-id: str
.results[0].revisions[0].value-ref.revision-id: str
.results[0].rotate-policy: str
.results[0].update-time: str
.results[0].uri: str
.results[0].value: SecretValueResult
.results[0].value.data["abc"]: str
.results[0].value.error: Error
.results[0].value.error.code: str
.results[0].value.error.info["abc"]: dict[Any, Any]
.results[0].value.error.message: str
.results[0].version: int

Secrets: 2
.RemoveSecrets()
in: DeleteSecretArgs
.args[0]: DeleteSecretArg
.args[0].label: str
.args[0].revisions[0]: int
.args[0].uri: str
out: ErrorResults
.results[0]: ErrorResult
.results[0].error: Error
.results[0].error.code: str
.results[0].error.info["abc"]: dict[Any, Any]
.results[0].error.message: str

Secrets: 2
.RevokeSecret()
in: GrantRevokeUserSecretArg
.applications[0]: str
.label: str
.uri: str
out: ErrorResults
.results[0]: ErrorResult
.results[0].error: Error
.results[0].error.code: str
.results[0].error.info["abc"]: dict[Any, Any]
.results[0].error.message: str

Secrets: 2
.UpdateSecrets()
in: UpdateUserSecretArgs
.args[0]: UpdateUserSecretArg
.args[0].UpsertSecretArg: UpsertSecretArg
.args[0].UpsertSecretArg.content: SecretContentParams
.args[0].UpsertSecretArg.content.data["abc"]: str
.args[0].UpsertSecretArg.content.value-ref: SecretValueRef
.args[0].UpsertSecretArg.content.value-ref.backend-id: str
.args[0].UpsertSecretArg.content.value-ref.revision-id: str
.args[0].UpsertSecretArg.description: str
.args[0].UpsertSecretArg.expire-time: str
.args[0].UpsertSecretArg.label: str
.args[0].UpsertSecretArg.params["abc"]: dict[Any, Any]
.args[0].UpsertSecretArg.rotate-policy: str
.args[0].auto-prune: bool
.args[0].content: SecretContentParams
.args[0].content.data["abc"]: str
.args[0].content.value-ref: SecretValueRef
.args[0].content.value-ref.backend-id: str
.args[0].content.value-ref.revision-id: str
.args[0].description: str
.args[0].existing-label: str
.args[0].expire-time: str
.args[0].label: str
.args[0].params["abc"]: dict[Any, Any]
.args[0].rotate-policy: str
.args[0].uri: str
out: ErrorResults
.results[0]: ErrorResult
.results[0].error: Error
.results[0].error.code: str
.results[0].error.info["abc"]: dict[Any, Any]
.results[0].error.message: str

SecretsDrain: 1
.ChangeSecretBackend()
in: ChangeSecretBackendArgs
.args[0]: ChangeSecretBackendArg
.args[0].content: SecretContentParams
.args[0].content.data["abc"]: str
.args[0].content.value-ref: SecretValueRef
.args[0].content.value-ref.backend-id: str
.args[0].content.value-ref.revision-id: str
.args[0].revision: int
.args[0].uri: str
out: ErrorResults
.results[0]: ErrorResult
.results[0].error: Error
.results[0].error.code: str
.results[0].error.info["abc"]: dict[Any, Any]
.results[0].error.message: str

SecretsDrain: 1
.GetSecretsToDrain()
in: None
out: ListSecretResults
.results[0]: ListSecretResult
.results[0].access[0]: AccessInfo
.results[0].access[0].role: str
.results[0].access[0].scope-tag: str
.results[0].access[0].target-tag: str
.results[0].create-time: str
.results[0].description: str
.results[0].label: str
.results[0].latest-expire-time: str
.results[0].latest-revision: int
.results[0].next-rotate-time: str
.results[0].owner-tag: str
.results[0].revisions[0]: SecretRevision
.results[0].revisions[0].backend-name: str
.results[0].revisions[0].create-time: str
.results[0].revisions[0].expire-time: str
.results[0].revisions[0].revision: int
.results[0].revisions[0].update-time: str
.results[0].revisions[0].value-ref: SecretValueRef
.results[0].revisions[0].value-ref.backend-id: str
.results[0].revisions[0].value-ref.revision-id: str
.results[0].rotate-policy: str
.results[0].update-time: str
.results[0].uri: str
.results[0].value: SecretValueResult
.results[0].value.data["abc"]: str
.results[0].value.error: Error
.results[0].value.error.code: str
.results[0].value.error.info["abc"]: dict[Any, Any]
.results[0].value.error.message: str
.results[0].version: int

SecretsDrain: 1
.WatchSecretBackendChanged()
in: None
out: NotifyWatchResult
.NotifyWatcherId: str
.error: Error
.error.code: str
.error.info["abc"]: dict[Any, Any]
.error.message: str

SecretsManager: 2
.CreateSecretURIs()
in: CreateSecretURIsArg
.count: int
out: StringResults
.results[0]: StringResult
.results[0].error: Error
.results[0].error.code: str
.results[0].error.info["abc"]: dict[Any, Any]
.results[0].error.message: str
.results[0].result: str

SecretsManager: 2
.CreateSecrets()
in: CreateSecretArgs
.args[0]: CreateSecretArg
.args[0].UpsertSecretArg: UpsertSecretArg
.args[0].UpsertSecretArg.content: SecretContentParams
.args[0].UpsertSecretArg.content.data["abc"]: str
.args[0].UpsertSecretArg.content.value-ref: SecretValueRef
.args[0].UpsertSecretArg.content.value-ref.backend-id: str
.args[0].UpsertSecretArg.content.value-ref.revision-id: str
.args[0].UpsertSecretArg.description: str
.args[0].UpsertSecretArg.expire-time: str
.args[0].UpsertSecretArg.label: str
.args[0].UpsertSecretArg.params["abc"]: dict[Any, Any]
.args[0].UpsertSecretArg.rotate-policy: str
.args[0].content: SecretContentParams
.args[0].content.data["abc"]: str
.args[0].content.value-ref: SecretValueRef
.args[0].content.value-ref.backend-id: str
.args[0].content.value-ref.revision-id: str
.args[0].description: str
.args[0].expire-time: str
.args[0].label: str
.args[0].owner-tag: str
.args[0].params["abc"]: dict[Any, Any]
.args[0].rotate-policy: str
.args[0].uri: str
out: StringResults
.results[0]: StringResult
.results[0].error: Error
.results[0].error.code: str
.results[0].error.info["abc"]: dict[Any, Any]
.results[0].error.message: str
.results[0].result: str

SecretsManager: 2
.GetConsumerSecretsRevisionInfo()
in: GetSecretConsumerInfoArgs
.consumer-tag: str
.uris[0]: str
out: SecretConsumerInfoResults
.results[0]: SecretConsumerInfoResult
.results[0].error: Error
.results[0].error.code: str
.results[0].error.info["abc"]: dict[Any, Any]
.results[0].error.message: str
.results[0].label: str
.results[0].revision: int

SecretsManager: 2
.GetSecretBackendConfigs()
in: SecretBackendArgs
.backend-ids[0]: str
.for-drain: bool
out: SecretBackendConfigResults
.active-id: str
.results["abc"]: SecretBackendConfigResult
.results["abc"].config: SecretBackendConfig
.results["abc"].config.params["abc"]: dict[Any, Any]
.results["abc"].config.type: str
.results["abc"].draining: bool
.results["abc"].model-controller: str
.results["abc"].model-name: str
.results["abc"].model-uuid: str

SecretsManager: 2
.GetSecretContentInfo()
in: GetSecretContentArgs
.args[0]: GetSecretContentArg
.args[0].label: str
.args[0].peek: bool
.args[0].refresh: bool
.args[0].uri: str
out: SecretContentResults
.results[0]: SecretContentResult
.results[0].backend-config: SecretBackendConfigResult
.results[0].backend-config.config: SecretBackendConfig
.results[0].backend-config.config.params["abc"]: dict[Any, Any]
.results[0].backend-config.config.type: str
.results[0].backend-config.draining: bool
.results[0].backend-config.model-controller: str
.results[0].backend-config.model-name: str
.results[0].backend-config.model-uuid: str
.results[0].content: SecretContentParams
.results[0].content.data["abc"]: str
.results[0].content.value-ref: SecretValueRef
.results[0].content.value-ref.backend-id: str
.results[0].content.value-ref.revision-id: str
.results[0].error: Error
.results[0].error.code: str
.results[0].error.info["abc"]: dict[Any, Any]
.results[0].error.message: str
.results[0].latest-revision: int

SecretsManager: 2
.GetSecretMetadata()
in: None
out: ListSecretResults
.results[0]: ListSecretResult
.results[0].access[0]: AccessInfo
.results[0].access[0].role: str
.results[0].access[0].scope-tag: str
.results[0].access[0].target-tag: str
.results[0].create-time: str
.results[0].description: str
.results[0].label: str
.results[0].latest-expire-time: str
.results[0].latest-revision: int
.results[0].next-rotate-time: str
.results[0].owner-tag: str
.results[0].revisions[0]: SecretRevision
.results[0].revisions[0].backend-name: str
.results[0].revisions[0].create-time: str
.results[0].revisions[0].expire-time: str
.results[0].revisions[0].revision: int
.results[0].revisions[0].update-time: str
.results[0].revisions[0].value-ref: SecretValueRef
.results[0].revisions[0].value-ref.backend-id: str
.results[0].revisions[0].value-ref.revision-id: str
.results[0].rotate-policy: str
.results[0].update-time: str
.results[0].uri: str
.results[0].value: SecretValueResult
.results[0].value.data["abc"]: str
.results[0].value.error: Error
.results[0].value.error.code: str
.results[0].value.error.info["abc"]: dict[Any, Any]
.results[0].value.error.message: str
.results[0].version: int

SecretsManager: 2
.GetSecretRevisionContentInfo()
in: SecretRevisionArg
.pending-delete: bool
.revisions[0]: int
.uri: str
out: SecretContentResults
.results[0]: SecretContentResult
.results[0].backend-config: SecretBackendConfigResult
.results[0].backend-config.config: SecretBackendConfig
.results[0].backend-config.config.params["abc"]: dict[Any, Any]
.results[0].backend-config.config.type: str
.results[0].backend-config.draining: bool
.results[0].backend-config.model-controller: str
.results[0].backend-config.model-name: str
.results[0].backend-config.model-uuid: str
.results[0].content: SecretContentParams
.results[0].content.data["abc"]: str
.results[0].content.value-ref: SecretValueRef
.results[0].content.value-ref.backend-id: str
.results[0].content.value-ref.revision-id: str
.results[0].error: Error
.results[0].error.code: str
.results[0].error.info["abc"]: dict[Any, Any]
.results[0].error.message: str
.results[0].latest-revision: int

SecretsManager: 2
.RemoveSecrets()
in: DeleteSecretArgs
.args[0]: DeleteSecretArg
.args[0].label: str
.args[0].revisions[0]: int
.args[0].uri: str
out: ErrorResults
.results[0]: ErrorResult
.results[0].error: Error
.results[0].error.code: str
.results[0].error.info["abc"]: dict[Any, Any]
.results[0].error.message: str

SecretsManager: 2
.SecretsGrant()
in: GrantRevokeSecretArgs
.args[0]: GrantRevokeSecretArg
.args[0].role: str
.args[0].scope-tag: str
.args[0].subject-tags[0]: str
.args[0].uri: str
out: ErrorResults
.results[0]: ErrorResult
.results[0].error: Error
.results[0].error.code: str
.results[0].error.info["abc"]: dict[Any, Any]
.results[0].error.message: str

SecretsManager: 2
.SecretsRevoke()
in: GrantRevokeSecretArgs
.args[0]: GrantRevokeSecretArg
.args[0].role: str
.args[0].scope-tag: str
.args[0].subject-tags[0]: str
.args[0].uri: str
out: ErrorResults
.results[0]: ErrorResult
.results[0].error: Error
.results[0].error.code: str
.results[0].error.info["abc"]: dict[Any, Any]
.results[0].error.message: str

SecretsManager: 2
.SecretsRotated()
in: SecretRotatedArgs
.args[0]: SecretRotatedArg
.args[0].original-revision: int
.args[0].skip: bool
.args[0].uri: str
out: ErrorResults
.results[0]: ErrorResult
.results[0].error: Error
.results[0].error.code: str
.results[0].error.info["abc"]: dict[Any, Any]
.results[0].error.message: str

SecretsManager: 2
.UpdateSecrets()
in: UpdateSecretArgs
.args[0]: UpdateSecretArg
.args[0].UpsertSecretArg: UpsertSecretArg
.args[0].UpsertSecretArg.content: SecretContentParams
.args[0].UpsertSecretArg.content.data["abc"]: str
.args[0].UpsertSecretArg.content.value-ref: SecretValueRef
.args[0].UpsertSecretArg.content.value-ref.backend-id: str
.args[0].UpsertSecretArg.content.value-ref.revision-id: str
.args[0].UpsertSecretArg.description: str
.args[0].UpsertSecretArg.expire-time: str
.args[0].UpsertSecretArg.label: str
.args[0].UpsertSecretArg.params["abc"]: dict[Any, Any]
.args[0].UpsertSecretArg.rotate-policy: str
.args[0].content: SecretContentParams
.args[0].content.data["abc"]: str
.args[0].content.value-ref: SecretValueRef
.args[0].content.value-ref.backend-id: str
.args[0].content.value-ref.revision-id: str
.args[0].description: str
.args[0].expire-time: str
.args[0].label: str
.args[0].params["abc"]: dict[Any, Any]
.args[0].rotate-policy: str
.args[0].uri: str
out: ErrorResults
.results[0]: ErrorResult
.results[0].error: Error
.results[0].error.code: str
.results[0].error.info["abc"]: dict[Any, Any]
.results[0].error.message: str

SecretsManager: 2
.WatchConsumedSecretsChanges()
in: Entities
.entities[0]: Entity
.entities[0].tag: str
out: StringsWatchResults
.results[0]: StringsWatchResult
.results[0].changes[0]: str
.results[0].error: Error
.results[0].error.code: str
.results[0].error.info["abc"]: dict[Any, Any]
.results[0].error.message: str
.results[0].watcher-id: str

SecretsManager: 2
.WatchObsolete()
in: Entities
.entities[0]: Entity
.entities[0].tag: str
out: StringsWatchResult
.changes[0]: str
.error: Error
.error.code: str
.error.info["abc"]: dict[Any, Any]
.error.message: str
.watcher-id: str

SecretsManager: 2
.WatchSecretRevisionsExpiryChanges()
in: Entities
.entities[0]: Entity
.entities[0].tag: str
out: SecretTriggerWatchResult
.changes[0]: SecretTriggerChange
.changes[0].next-trigger-time: str
.changes[0].revision: int
.changes[0].uri: str
.error: Error
.error.code: str
.error.info["abc"]: dict[Any, Any]
.error.message: str
.watcher-id: str

SecretsManager: 2
.WatchSecretsRotationChanges()
in: Entities
.entities[0]: Entity
.entities[0].tag: str
out: SecretTriggerWatchResult
.changes[0]: SecretTriggerChange
.changes[0].next-trigger-time: str
.changes[0].revision: int
.changes[0].uri: str
.error: Error
.error.code: str
.error.info["abc"]: dict[Any, Any]
.error.message: str
.watcher-id: str

SecretsRevisionWatcher: 1
.Next()
in: None
out: SecretRevisionWatchResult
.changes[0]: SecretRevisionChange
.changes[0].revision: int
.changes[0].uri: str
.error: Error
.error.code: str
.error.info["abc"]: dict[Any, Any]
.error.message: str
.watcher-id: str

SecretsRevisionWatcher: 1
.Stop()
in: None
out: None

SecretsTriggerWatcher: 1
.Next()
in: None
out: SecretTriggerWatchResult
.changes[0]: SecretTriggerChange
.changes[0].next-trigger-time: str
.changes[0].revision: int
.changes[0].uri: str
.error: Error
.error.code: str
.error.info["abc"]: dict[Any, Any]
.error.message: str
.watcher-id: str

SecretsTriggerWatcher: 1
.Stop()
in: None
out: None

Singular: 2
.Claim()
in: SingularClaims
.claims[0]: SingularClaim
.claims[0].claimant-tag: str
.claims[0].duration: int
.claims[0].entity-tag: str
out: ErrorResults
.results[0]: ErrorResult
.results[0].error: Error
.results[0].error.code: str
.results[0].error.info["abc"]: dict[Any, Any]
.results[0].error.message: str

Singular: 2
.Wait()
in: Entities
.entities[0]: Entity
.entities[0].tag: str
out: ErrorResults
.results[0]: ErrorResult
.results[0].error: Error
.results[0].error.code: str
.results[0].error.info["abc"]: dict[Any, Any]
.results[0].error.message: str

Spaces: 6
.CreateSpaces()
in: CreateSpacesParams
.spaces[0]: CreateSpaceParams
.spaces[0].cidrs[0]: str
.spaces[0].provider-id: str
.spaces[0].public: bool
.spaces[0].space-tag: str
out: ErrorResults
.results[0]: ErrorResult
.results[0].error: Error
.results[0].error.code: str
.results[0].error.info["abc"]: dict[Any, Any]
.results[0].error.message: str

Spaces: 6
.ListSpaces()
in: None
out: ListSpacesResults
.results[0]: Space
.results[0].error: Error
.results[0].error.code: str
.results[0].error.info["abc"]: dict[Any, Any]
.results[0].error.message: str
.results[0].id: str
.results[0].name: str
.results[0].subnets[0]: Subnet
.results[0].subnets[0].cidr: str
.results[0].subnets[0].life: str
.results[0].subnets[0].provider-id: str
.results[0].subnets[0].provider-network-id: str
.results[0].subnets[0].provider-space-id: str
.results[0].subnets[0].space-tag: str
.results[0].subnets[0].status: str
.results[0].subnets[0].vlan-tag: int
.results[0].subnets[0].zones[0]: str

Spaces: 6
.MoveSubnets()
in: MoveSubnetsParams
.args[0]: MoveSubnetsParam
.args[0].force: bool
.args[0].space-tag: str
.args[0].subnets[0]: str
out: MoveSubnetsResults
.results[0]: MoveSubnetsResult
.results[0].error: Error
.results[0].error.code: str
.results[0].error.info["abc"]: dict[Any, Any]
.results[0].error.message: str
.results[0].moved-subnets[0]: MovedSubnet
.results[0].moved-subnets[0].cidr: str
.results[0].moved-subnets[0].old-space: str
.results[0].moved-subnets[0].subnet: str
.results[0].new-space: str

Spaces: 6
.ReloadSpaces()
in: None
out: None

Spaces: 6
.RemoveSpace()
in: RemoveSpaceParams
.space-param[0]: RemoveSpaceParam
.space-param[0].dry-run: bool
.space-param[0].force: bool
.space-param[0].space: Entity
.space-param[0].space.tag: str
out: RemoveSpaceResults
.results[0]: RemoveSpaceResult
.results[0].bindings[0]: Entity
.results[0].bindings[0].tag: str
.results[0].constraints[0]: Entity
.results[0].constraints[0].tag: str
.results[0].controller-settings[0]: str
.results[0].error: Error
.results[0].error.code: str
.results[0].error.info["abc"]: dict[Any, Any]
.results[0].error.message: str

Spaces: 6
.RenameSpace()
in: RenameSpacesParams
.changes[0]: RenameSpaceParams
.changes[0].from-space-tag: str
.changes[0].to-space-tag: str
out: ErrorResults
.results[0]: ErrorResult
.results[0].error: Error
.results[0].error.code: str
.results[0].error.info["abc"]: dict[Any, Any]
.results[0].error.message: str

Spaces: 6
.ShowSpace()
in: Entities
.entities[0]: Entity
.entities[0].tag: str
out: ShowSpaceResults
.results[0]: ShowSpaceResult
.results[0].applications[0]: str
.results[0].error: Error
.results[0].error.code: str
.results[0].error.info["abc"]: dict[Any, Any]
.results[0].error.message: str
.results[0].machine-count: int
.results[0].space: Space
.results[0].space.error: Error
.results[0].space.error.code: str
.results[0].space.error.info["abc"]: dict[Any, Any]
.results[0].space.error.message: str
.results[0].space.id: str
.results[0].space.name: str
.results[0].space.subnets[0]: Subnet
.results[0].space.subnets[0].cidr: str
.results[0].space.subnets[0].life: str
.results[0].space.subnets[0].provider-id: str
.results[0].space.subnets[0].provider-network-id: str
.results[0].space.subnets[0].provider-space-id: str
.results[0].space.subnets[0].space-tag: str
.results[0].space.subnets[0].status: str
.results[0].space.subnets[0].vlan-tag: int
.results[0].space.subnets[0].zones[0]: str

StatusHistory: 2
.ModelConfig()
in: None
out: ModelConfigResult
.config["abc"]: dict[Any, Any]

StatusHistory: 2
.Prune()
in: StatusHistoryPruneArgs
.max-history-mb: int
.max-history-time: int
out: None

StatusHistory: 2
.WatchForModelConfigChanges()
in: None
out: NotifyWatchResult
.NotifyWatcherId: str
.error: Error
.error.code: str
.error.info["abc"]: dict[Any, Any]
.error.message: str

Storage: 6
.AddToUnit()
in: StoragesAddParams
.storages[0]: StorageAddParams
.storages[0].name: str
.storages[0].storage: StorageConstraints
.storages[0].storage.count: int
.storages[0].storage.pool: str
.storages[0].storage.size: int
.storages[0].unit: str
out: AddStorageResults
.results[0]: AddStorageResult
.results[0].error: Error
.results[0].error.code: str
.results[0].error.info["abc"]: dict[Any, Any]
.results[0].error.message: str
.results[0].result: AddStorageDetails
.results[0].result.storage-tags[0]: str

Storage: 6
.Attach()
in: StorageAttachmentIds
.ids[0]: StorageAttachmentId
.ids[0].storage-tag: str
.ids[0].unit-tag: str
out: ErrorResults
.results[0]: ErrorResult
.results[0].error: Error
.results[0].error.code: str
.results[0].error.info["abc"]: dict[Any, Any]
.results[0].error.message: str

Storage: 6
.CreatePool()
in: StoragePoolArgs
.pools[0]: StoragePool
.pools[0].attrs["abc"]: dict[Any, Any]
.pools[0].name: str
.pools[0].provider: str
out: ErrorResults
.results[0]: ErrorResult
.results[0].error: Error
.results[0].error.code: str
.results[0].error.info["abc"]: dict[Any, Any]
.results[0].error.message: str

Storage: 6
.DetachStorage()
in: StorageDetachmentParams
.force: bool
.ids: StorageAttachmentIds
.ids.ids[0]: StorageAttachmentId
.ids.ids[0].storage-tag: str
.ids.ids[0].unit-tag: str
.max-wait: int
out: ErrorResults
.results[0]: ErrorResult
.results[0].error: Error
.results[0].error.code: str
.results[0].error.info["abc"]: dict[Any, Any]
.results[0].error.message: str

Storage: 6
.Import()
in: BulkImportStorageParams
.storage[0]: ImportStorageParams
.storage[0].kind: int
.storage[0].pool: str
.storage[0].provider-id: str
.storage[0].storage-name: str
out: ImportStorageResults
.results[0]: ImportStorageResult
.results[0].error: Error
.results[0].error.code: str
.results[0].error.info["abc"]: dict[Any, Any]
.results[0].error.message: str
.results[0].result: ImportStorageDetails
.results[0].result.storage-tag: str

Storage: 6
.ListFilesystems()
in: FilesystemFilters
.filters[0]: FilesystemFilter
.filters[0].machines[0]: str
out: FilesystemDetailsListResults
.results[0]: FilesystemDetailsListResult
.results[0].error: Error
.results[0].error.code: str
.results[0].error.info["abc"]: dict[Any, Any]
.results[0].error.message: str
.results[0].result[0]: FilesystemDetails
.results[0].result[0].filesystem-tag: str
.results[0].result[0].info: FilesystemInfo
.results[0].result[0].info.filesystem-id: str
.results[0].result[0].info.pool: str
.results[0].result[0].info.size: int
.results[0].result[0].life: str
.results[0].result[0].machine-attachments["abc"]: FilesystemAttachmentDetails
.results[0].result[0].machine-attachments["abc"].FilesystemAttachmentInfo: FilesystemAttachmentInfo
.results[0].result[0].machine-attachments["abc"].FilesystemAttachmentInfo.mount-point: str
.results[0].result[0].machine-attachments["abc"].FilesystemAttachmentInfo.read-only: bool
.results[0].result[0].machine-attachments["abc"].life: str
.results[0].result[0].machine-attachments["abc"].mount-point: str
.results[0].result[0].machine-attachments["abc"].read-only: bool
.results[0].result[0].status: EntityStatus
.results[0].result[0].status.data["abc"]: dict[Any, Any]
.results[0].result[0].status.info: str
.results[0].result[0].status.since: str
.results[0].result[0].status.status: str
.results[0].result[0].storage: StorageDetails
.results[0].result[0].storage.attachments["abc"]: StorageAttachmentDetails
.results[0].result[0].storage.attachments["abc"].life: str
.results[0].result[0].storage.attachments["abc"].location: str
.results[0].result[0].storage.attachments["abc"].machine-tag: str
.results[0].result[0].storage.attachments["abc"].storage-tag: str
.results[0].result[0].storage.attachments["abc"].unit-tag: str
.results[0].result[0].storage.kind: int
.results[0].result[0].storage.life: str
.results[0].result[0].storage.owner-tag: str
.results[0].result[0].storage.persistent: bool
.results[0].result[0].storage.status: EntityStatus
.results[0].result[0].storage.status.data["abc"]: dict[Any, Any]
.results[0].result[0].storage.status.info: str
.results[0].result[0].storage.status.since: str
.results[0].result[0].storage.status.status: str
.results[0].result[0].storage.storage-tag: str
.results[0].result[0].unit-attachments["abc"]: FilesystemAttachmentDetails
.results[0].result[0].unit-attachments["abc"].FilesystemAttachmentInfo: FilesystemAttachmentInfo
.results[0].result[0].unit-attachments["abc"].FilesystemAttachmentInfo.mount-point: str
.results[0].result[0].unit-attachments["abc"].FilesystemAttachmentInfo.read-only: bool
.results[0].result[0].unit-attachments["abc"].life: str
.results[0].result[0].unit-attachments["abc"].mount-point: str
.results[0].result[0].unit-attachments["abc"].read-only: bool
.results[0].result[0].volume-tag: str

Storage: 6
.ListPools()
in: StoragePoolFilters
.filters[0]: StoragePoolFilter
.filters[0].names[0]: str
.filters[0].providers[0]: str
out: StoragePoolsResults
.results[0]: StoragePoolsResult
.results[0].error: Error
.results[0].error.code: str
.results[0].error.info["abc"]: dict[Any, Any]
.results[0].error.message: str
.results[0].storage-pools[0]: StoragePool
.results[0].storage-pools[0].attrs["abc"]: dict[Any, Any]
.results[0].storage-pools[0].name: str
.results[0].storage-pools[0].provider: str

Storage: 6
.ListStorageDetails()
in: StorageFilters
.filters[0]: StorageFilter
.filters[0]: dict[Any, Any]
out: StorageDetailsListResults
.results[0]: StorageDetailsListResult
.results[0].error: Error
.results[0].error.code: str
.results[0].error.info["abc"]: dict[Any, Any]
.results[0].error.message: str
.results[0].result[0]: StorageDetails
.results[0].result[0].attachments["abc"]: StorageAttachmentDetails
.results[0].result[0].attachments["abc"].life: str
.results[0].result[0].attachments["abc"].location: str
.results[0].result[0].attachments["abc"].machine-tag: str
.results[0].result[0].attachments["abc"].storage-tag: str
.results[0].result[0].attachments["abc"].unit-tag: str
.results[0].result[0].kind: int
.results[0].result[0].life: str
.results[0].result[0].owner-tag: str
.results[0].result[0].persistent: bool
.results[0].result[0].status: EntityStatus
.results[0].result[0].status.data["abc"]: dict[Any, Any]
.results[0].result[0].status.info: str
.results[0].result[0].status.since: str
.results[0].result[0].status.status: str
.results[0].result[0].storage-tag: str

Storage: 6
.ListVolumes()
in: VolumeFilters
.filters[0]: VolumeFilter
.filters[0].machines[0]: str
out: VolumeDetailsListResults
.results[0]: VolumeDetailsListResult
.results[0].error: Error
.results[0].error.code: str
.results[0].error.info["abc"]: dict[Any, Any]
.results[0].error.message: str
.results[0].result[0]: VolumeDetails
.results[0].result[0].info: VolumeInfo
.results[0].result[0].info.hardware-id: str
.results[0].result[0].info.persistent: bool
.results[0].result[0].info.pool: str
.results[0].result[0].info.size: int
.results[0].result[0].info.volume-id: str
.results[0].result[0].info.wwn: str
.results[0].result[0].life: str
.results[0].result[0].machine-attachments["abc"]: VolumeAttachmentDetails
.results[0].result[0].machine-attachments["abc"].VolumeAttachmentInfo: VolumeAttachmentInfo
.results[0].result[0].machine-attachments["abc"].VolumeAttachmentInfo.bus-address: str
.results[0].result[0].machine-attachments["abc"].VolumeAttachmentInfo.device-link: str
.results[0].result[0].machine-attachments["abc"].VolumeAttachmentInfo.device-name: str
.results[0].result[0].machine-attachments["abc"].VolumeAttachmentInfo.plan-info: VolumeAttachmentPlanInfo
.results[0].result[0].machine-attachments["abc"].VolumeAttachmentInfo.plan-info.device-attributes["abc"]: str
.results[0].result[0].machine-attachments["abc"].VolumeAttachmentInfo.plan-info.device-type: str
.results[0].result[0].machine-attachments["abc"].VolumeAttachmentInfo.read-only: bool
.results[0].result[0].machine-attachments["abc"].bus-address: str
.results[0].result[0].machine-attachments["abc"].device-link: str
.results[0].result[0].machine-attachments["abc"].device-name: str
.results[0].result[0].machine-attachments["abc"].life: str
.results[0].result[0].machine-attachments["abc"].plan-info: VolumeAttachmentPlanInfo
.results[0].result[0].machine-attachments["abc"].plan-info.device-attributes["abc"]: str
.results[0].result[0].machine-attachments["abc"].plan-info.device-type: str
.results[0].result[0].machine-attachments["abc"].read-only: bool
.results[0].result[0].status: EntityStatus
.results[0].result[0].status.data["abc"]: dict[Any, Any]
.results[0].result[0].status.info: str
.results[0].result[0].status.since: str
.results[0].result[0].status.status: str
.results[0].result[0].storage: StorageDetails
.results[0].result[0].storage.attachments["abc"]: StorageAttachmentDetails
.results[0].result[0].storage.attachments["abc"].life: str
.results[0].result[0].storage.attachments["abc"].location: str
.results[0].result[0].storage.attachments["abc"].machine-tag: str
.results[0].result[0].storage.attachments["abc"].storage-tag: str
.results[0].result[0].storage.attachments["abc"].unit-tag: str
.results[0].result[0].storage.kind: int
.results[0].result[0].storage.life: str
.results[0].result[0].storage.owner-tag: str
.results[0].result[0].storage.persistent: bool
.results[0].result[0].storage.status: EntityStatus
.results[0].result[0].storage.status.data["abc"]: dict[Any, Any]
.results[0].result[0].storage.status.info: str
.results[0].result[0].storage.status.since: str
.results[0].result[0].storage.status.status: str
.results[0].result[0].storage.storage-tag: str
.results[0].result[0].unit-attachments["abc"]: VolumeAttachmentDetails
.results[0].result[0].unit-attachments["abc"].VolumeAttachmentInfo: VolumeAttachmentInfo
.results[0].result[0].unit-attachments["abc"].VolumeAttachmentInfo.bus-address: str
.results[0].result[0].unit-attachments["abc"].VolumeAttachmentInfo.device-link: str
.results[0].result[0].unit-attachments["abc"].VolumeAttachmentInfo.device-name: str
.results[0].result[0].unit-attachments["abc"].VolumeAttachmentInfo.plan-info: VolumeAttachmentPlanInfo
.results[0].result[0].unit-attachments["abc"].VolumeAttachmentInfo.plan-info.device-attributes["abc"]: str
.results[0].result[0].unit-attachments["abc"].VolumeAttachmentInfo.plan-info.device-type: str
.results[0].result[0].unit-attachments["abc"].VolumeAttachmentInfo.read-only: bool
.results[0].result[0].unit-attachments["abc"].bus-address: str
.results[0].result[0].unit-attachments["abc"].device-link: str
.results[0].result[0].unit-attachments["abc"].device-name: str
.results[0].result[0].unit-attachments["abc"].life: str
.results[0].result[0].unit-attachments["abc"].plan-info: VolumeAttachmentPlanInfo
.results[0].result[0].unit-attachments["abc"].plan-info.device-attributes["abc"]: str
.results[0].result[0].unit-attachments["abc"].plan-info.device-type: str
.results[0].result[0].unit-attachments["abc"].read-only: bool
.results[0].result[0].volume-tag: str

Storage: 6
.Remove()
in: RemoveStorage
.storage[0]: RemoveStorageInstance
.storage[0].destroy-attachments: bool
.storage[0].destroy-storage: bool
.storage[0].force: bool
.storage[0].max-wait: int
.storage[0].tag: str
out: ErrorResults
.results[0]: ErrorResult
.results[0].error: Error
.results[0].error.code: str
.results[0].error.info["abc"]: dict[Any, Any]
.results[0].error.message: str

Storage: 6
.RemovePool()
in: StoragePoolDeleteArgs
.pools[0]: StoragePoolDeleteArg
.pools[0].name: str
out: ErrorResults
.results[0]: ErrorResult
.results[0].error: Error
.results[0].error.code: str
.results[0].error.info["abc"]: dict[Any, Any]
.results[0].error.message: str

Storage: 6
.StorageDetails()
in: Entities
.entities[0]: Entity
.entities[0].tag: str
out: StorageDetailsResults
.results[0]: StorageDetailsResult
.results[0].error: Error
.results[0].error.code: str
.results[0].error.info["abc"]: dict[Any, Any]
.results[0].error.message: str
.results[0].result: StorageDetails
.results[0].result.attachments["abc"]: StorageAttachmentDetails
.results[0].result.attachments["abc"].life: str
.results[0].result.attachments["abc"].location: str
.results[0].result.attachments["abc"].machine-tag: str
.results[0].result.attachments["abc"].storage-tag: str
.results[0].result.attachments["abc"].unit-tag: str
.results[0].result.kind: int
.results[0].result.life: str
.results[0].result.owner-tag: str
.results[0].result.persistent: bool
.results[0].result.status: EntityStatus
.results[0].result.status.data["abc"]: dict[Any, Any]
.results[0].result.status.info: str
.results[0].result.status.since: str
.results[0].result.status.status: str
.results[0].result.storage-tag: str

Storage: 6
.UpdatePool()
in: StoragePoolArgs
.pools[0]: StoragePool
.pools[0].attrs["abc"]: dict[Any, Any]
.pools[0].name: str
.pools[0].provider: str
out: ErrorResults
.results[0]: ErrorResult
.results[0].error: Error
.results[0].error.code: str
.results[0].error.info["abc"]: dict[Any, Any]
.results[0].error.message: str

StorageProvisioner: 4
.AttachmentLife()
in: MachineStorageIds
.ids[0]: MachineStorageId
.ids[0].attachment-tag: str
.ids[0].machine-tag: str
out: LifeResults
.results[0]: LifeResult
.results[0].error: Error
.results[0].error.code: str
.results[0].error.info["abc"]: dict[Any, Any]
.results[0].error.message: str
.results[0].life: str

StorageProvisioner: 4
.CreateVolumeAttachmentPlans()
in: VolumeAttachmentPlans
.volume-plans[0]: VolumeAttachmentPlan
.volume-plans[0].block-device: BlockDevice
.volume-plans[0].block-device.BusAddress: str
.volume-plans[0].block-device.DeviceLinks[0]: str
.volume-plans[0].block-device.DeviceName: str
.volume-plans[0].block-device.FilesystemType: str
.volume-plans[0].block-device.HardwareId: str
.volume-plans[0].block-device.InUse: bool
.volume-plans[0].block-device.Label: str
.volume-plans[0].block-device.MountPoint: str
.volume-plans[0].block-device.SerialId: str
.volume-plans[0].block-device.Size: int
.volume-plans[0].block-device.UUID: str
.volume-plans[0].block-device.WWN: str
.volume-plans[0].life: str
.volume-plans[0].machine-tag: str
.volume-plans[0].plan-info: VolumeAttachmentPlanInfo
.volume-plans[0].plan-info.device-attributes["abc"]: str
.volume-plans[0].plan-info.device-type: str
.volume-plans[0].volume-tag: str
out: ErrorResults
.results[0]: ErrorResult
.results[0].error: Error
.results[0].error.code: str
.results[0].error.info["abc"]: dict[Any, Any]
.results[0].error.message: str

StorageProvisioner: 4
.EnsureDead()
in: Entities
.entities[0]: Entity
.entities[0].tag: str
out: ErrorResults
.results[0]: ErrorResult
.results[0].error: Error
.results[0].error.code: str
.results[0].error.info["abc"]: dict[Any, Any]
.results[0].error.message: str

StorageProvisioner: 4
.FilesystemAttachmentParams()
in: MachineStorageIds
.ids[0]: MachineStorageId
.ids[0].attachment-tag: str
.ids[0].machine-tag: str
out: FilesystemAttachmentParamsResults
.results[0]: FilesystemAttachmentParamsResult
.results[0].error: Error
.results[0].error.code: str
.results[0].error.info["abc"]: dict[Any, Any]
.results[0].error.message: str
.results[0].result: FilesystemAttachmentParams
.results[0].result.filesystem-id: str
.results[0].result.filesystem-tag: str
.results[0].result.instance-id: str
.results[0].result.machine-tag: str
.results[0].result.mount-point: str
.results[0].result.provider: str
.results[0].result.read-only: bool

StorageProvisioner: 4
.FilesystemAttachments()
in: MachineStorageIds
.ids[0]: MachineStorageId
.ids[0].attachment-tag: str
.ids[0].machine-tag: str
out: FilesystemAttachmentResults
.results[0]: FilesystemAttachmentResult
.results[0].error: Error
.results[0].error.code: str
.results[0].error.info["abc"]: dict[Any, Any]
.results[0].error.message: str
.results[0].result: FilesystemAttachment
.results[0].result.filesystem-tag: str
.results[0].result.info: FilesystemAttachmentInfo
.results[0].result.info.mount-point: str
.results[0].result.info.read-only: bool
.results[0].result.machine-tag: str

StorageProvisioner: 4
.FilesystemParams()
in: Entities
.entities[0]: Entity
.entities[0].tag: str
out: FilesystemParamsResults
.results[0]: FilesystemParamsResult
.results[0].error: Error
.results[0].error.code: str
.results[0].error.info["abc"]: dict[Any, Any]
.results[0].error.message: str
.results[0].result: FilesystemParams
.results[0].result.attachment: FilesystemAttachmentParams
.results[0].result.attachment.filesystem-id: str
.results[0].result.attachment.filesystem-tag: str
.results[0].result.attachment.instance-id: str
.results[0].result.attachment.machine-tag: str
.results[0].result.attachment.mount-point: str
.results[0].result.attachment.provider: str
.results[0].result.attachment.read-only: bool
.results[0].result.attributes["abc"]: dict[Any, Any]
.results[0].result.filesystem-tag: str
.results[0].result.provider: str
.results[0].result.size: int
.results[0].result.tags["abc"]: str
.results[0].result.volume-tag: str

StorageProvisioner: 4
.Filesystems()
in: Entities
.entities[0]: Entity
.entities[0].tag: str
out: FilesystemResults
.results[0]: FilesystemResult
.results[0].error: Error
.results[0].error.code: str
.results[0].error.info["abc"]: dict[Any, Any]
.results[0].error.message: str
.results[0].result: Filesystem
.results[0].result.filesystem-tag: str
.results[0].result.info: FilesystemInfo
.results[0].result.info.filesystem-id: str
.results[0].result.info.pool: str
.results[0].result.info.size: int
.results[0].result.volume-tag: str

StorageProvisioner: 4
.InstanceId()
in: Entities
.entities[0]: Entity
.entities[0].tag: str
out: StringResults
.results[0]: StringResult
.results[0].error: Error
.results[0].error.code: str
.results[0].error.info["abc"]: dict[Any, Any]
.results[0].error.message: str
.results[0].result: str

StorageProvisioner: 4
.Life()
in: Entities
.entities[0]: Entity
.entities[0].tag: str
out: LifeResults
.results[0]: LifeResult
.results[0].error: Error
.results[0].error.code: str
.results[0].error.info["abc"]: dict[Any, Any]
.results[0].error.message: str
.results[0].life: str

StorageProvisioner: 4
.Remove()
in: Entities
.entities[0]: Entity
.entities[0].tag: str
out: ErrorResults
.results[0]: ErrorResult
.results[0].error: Error
.results[0].error.code: str
.results[0].error.info["abc"]: dict[Any, Any]
.results[0].error.message: str

StorageProvisioner: 4
.RemoveAttachment()
in: MachineStorageIds
.ids[0]: MachineStorageId
.ids[0].attachment-tag: str
.ids[0].machine-tag: str
out: ErrorResults
.results[0]: ErrorResult
.results[0].error: Error
.results[0].error.code: str
.results[0].error.info["abc"]: dict[Any, Any]
.results[0].error.message: str

StorageProvisioner: 4
.RemoveFilesystemParams()
in: Entities
.entities[0]: Entity
.entities[0].tag: str
out: RemoveFilesystemParamsResults
.results[0]: RemoveFilesystemParamsResult
.results[0].error: Error
.results[0].error.code: str
.results[0].error.info["abc"]: dict[Any, Any]
.results[0].error.message: str
.results[0].result: RemoveFilesystemParams
.results[0].result.destroy: bool
.results[0].result.filesystem-id: str
.results[0].result.provider: str

StorageProvisioner: 4
.RemoveVolumeAttachmentPlan()
in: MachineStorageIds
.ids[0]: MachineStorageId
.ids[0].attachment-tag: str
.ids[0].machine-tag: str
out: ErrorResults
.results[0]: ErrorResult
.results[0].error: Error
.results[0].error.code: str
.results[0].error.info["abc"]: dict[Any, Any]
.results[0].error.message: str

StorageProvisioner: 4
.RemoveVolumeParams()
in: Entities
.entities[0]: Entity
.entities[0].tag: str
out: RemoveVolumeParamsResults
.results[0]: RemoveVolumeParamsResult
.results[0].error: Error
.results[0].error.code: str
.results[0].error.info["abc"]: dict[Any, Any]
.results[0].error.message: str
.results[0].result: RemoveVolumeParams
.results[0].result.destroy: bool
.results[0].result.provider: str
.results[0].result.volume-id: str

StorageProvisioner: 4
.SetFilesystemAttachmentInfo()
in: FilesystemAttachments
.filesystem-attachments[0]: FilesystemAttachment
.filesystem-attachments[0].filesystem-tag: str
.filesystem-attachments[0].info: FilesystemAttachmentInfo
.filesystem-attachments[0].info.mount-point: str
.filesystem-attachments[0].info.read-only: bool
.filesystem-attachments[0].machine-tag: str
out: ErrorResults
.results[0]: ErrorResult
.results[0].error: Error
.results[0].error.code: str
.results[0].error.info["abc"]: dict[Any, Any]
.results[0].error.message: str

StorageProvisioner: 4
.SetFilesystemInfo()
in: Filesystems
.filesystems[0]: Filesystem
.filesystems[0].filesystem-tag: str
.filesystems[0].info: FilesystemInfo
.filesystems[0].info.filesystem-id: str
.filesystems[0].info.pool: str
.filesystems[0].info.size: int
.filesystems[0].volume-tag: str
out: ErrorResults
.results[0]: ErrorResult
.results[0].error: Error
.results[0].error.code: str
.results[0].error.info["abc"]: dict[Any, Any]
.results[0].error.message: str

StorageProvisioner: 4
.SetStatus()
in: SetStatus
.entities[0]: EntityStatusArgs
.entities[0].data["abc"]: dict[Any, Any]
.entities[0].info: str
.entities[0].status: str
.entities[0].tag: str
out: ErrorResults
.results[0]: ErrorResult
.results[0].error: Error
.results[0].error.code: str
.results[0].error.info["abc"]: dict[Any, Any]
.results[0].error.message: str

StorageProvisioner: 4
.SetVolumeAttachmentInfo()
in: VolumeAttachments
.volume-attachments[0]: VolumeAttachment
.volume-attachments[0].info: VolumeAttachmentInfo
.volume-attachments[0].info.bus-address: str
.volume-attachments[0].info.device-link: str
.volume-attachments[0].info.device-name: str
.volume-attachments[0].info.plan-info: VolumeAttachmentPlanInfo
.volume-attachments[0].info.plan-info.device-attributes["abc"]: str
.volume-attachments[0].info.plan-info.device-type: str
.volume-attachments[0].info.read-only: bool
.volume-attachments[0].machine-tag: str
.volume-attachments[0].volume-tag: str
out: ErrorResults
.results[0]: ErrorResult
.results[0].error: Error
.results[0].error.code: str
.results[0].error.info["abc"]: dict[Any, Any]
.results[0].error.message: str

StorageProvisioner: 4
.SetVolumeAttachmentPlanBlockInfo()
in: VolumeAttachmentPlans
.volume-plans[0]: VolumeAttachmentPlan
.volume-plans[0].block-device: BlockDevice
.volume-plans[0].block-device.BusAddress: str
.volume-plans[0].block-device.DeviceLinks[0]: str
.volume-plans[0].block-device.DeviceName: str
.volume-plans[0].block-device.FilesystemType: str
.volume-plans[0].block-device.HardwareId: str
.volume-plans[0].block-device.InUse: bool
.volume-plans[0].block-device.Label: str
.volume-plans[0].block-device.MountPoint: str
.volume-plans[0].block-device.SerialId: str
.volume-plans[0].block-device.Size: int
.volume-plans[0].block-device.UUID: str
.volume-plans[0].block-device.WWN: str
.volume-plans[0].life: str
.volume-plans[0].machine-tag: str
.volume-plans[0].plan-info: VolumeAttachmentPlanInfo
.volume-plans[0].plan-info.device-attributes["abc"]: str
.volume-plans[0].plan-info.device-type: str
.volume-plans[0].volume-tag: str
out: ErrorResults
.results[0]: ErrorResult
.results[0].error: Error
.results[0].error.code: str
.results[0].error.info["abc"]: dict[Any, Any]
.results[0].error.message: str

StorageProvisioner: 4
.SetVolumeInfo()
in: Volumes
.volumes[0]: Volume
.volumes[0].info: VolumeInfo
.volumes[0].info.hardware-id: str
.volumes[0].info.persistent: bool
.volumes[0].info.pool: str
.volumes[0].info.size: int
.volumes[0].info.volume-id: str
.volumes[0].info.wwn: str
.volumes[0].volume-tag: str
out: ErrorResults
.results[0]: ErrorResult
.results[0].error: Error
.results[0].error.code: str
.results[0].error.info["abc"]: dict[Any, Any]
.results[0].error.message: str

StorageProvisioner: 4
.VolumeAttachmentParams()
in: MachineStorageIds
.ids[0]: MachineStorageId
.ids[0].attachment-tag: str
.ids[0].machine-tag: str
out: VolumeAttachmentParamsResults
.results[0]: VolumeAttachmentParamsResult
.results[0].error: Error
.results[0].error.code: str
.results[0].error.info["abc"]: dict[Any, Any]
.results[0].error.message: str
.results[0].result: VolumeAttachmentParams
.results[0].result.instance-id: str
.results[0].result.machine-tag: str
.results[0].result.provider: str
.results[0].result.read-only: bool
.results[0].result.volume-id: str
.results[0].result.volume-tag: str

StorageProvisioner: 4
.VolumeAttachmentPlans()
in: MachineStorageIds
.ids[0]: MachineStorageId
.ids[0].attachment-tag: str
.ids[0].machine-tag: str
out: VolumeAttachmentPlanResults
.results[0]: VolumeAttachmentPlanResult
.results[0].error: Error
.results[0].error.code: str
.results[0].error.info["abc"]: dict[Any, Any]
.results[0].error.message: str
.results[0].result: VolumeAttachmentPlan
.results[0].result.block-device: BlockDevice
.results[0].result.block-device.BusAddress: str
.results[0].result.block-device.DeviceLinks[0]: str
.results[0].result.block-device.DeviceName: str
.results[0].result.block-device.FilesystemType: str
.results[0].result.block-device.HardwareId: str
.results[0].result.block-device.InUse: bool
.results[0].result.block-device.Label: str
.results[0].result.block-device.MountPoint: str
.results[0].result.block-device.SerialId: str
.results[0].result.block-device.Size: int
.results[0].result.block-device.UUID: str
.results[0].result.block-device.WWN: str
.results[0].result.life: str
.results[0].result.machine-tag: str
.results[0].result.plan-info: VolumeAttachmentPlanInfo
.results[0].result.plan-info.device-attributes["abc"]: str
.results[0].result.plan-info.device-type: str
.results[0].result.volume-tag: str

StorageProvisioner: 4
.VolumeAttachments()
in: MachineStorageIds
.ids[0]: MachineStorageId
.ids[0].attachment-tag: str
.ids[0].machine-tag: str
out: VolumeAttachmentResults
.results[0]: VolumeAttachmentResult
.results[0].error: Error
.results[0].error.code: str
.results[0].error.info["abc"]: dict[Any, Any]
.results[0].error.message: str
.results[0].result: VolumeAttachment
.results[0].result.info: VolumeAttachmentInfo
.results[0].result.info.bus-address: str
.results[0].result.info.device-link: str
.results[0].result.info.device-name: str
.results[0].result.info.plan-info: VolumeAttachmentPlanInfo
.results[0].result.info.plan-info.device-attributes["abc"]: str
.results[0].result.info.plan-info.device-type: str
.results[0].result.info.read-only: bool
.results[0].result.machine-tag: str
.results[0].result.volume-tag: str

StorageProvisioner: 4
.VolumeBlockDevices()
in: MachineStorageIds
.ids[0]: MachineStorageId
.ids[0].attachment-tag: str
.ids[0].machine-tag: str
out: BlockDeviceResults
.results[0]: BlockDeviceResult
.results[0].error: Error
.results[0].error.code: str
.results[0].error.info["abc"]: dict[Any, Any]
.results[0].error.message: str
.results[0].result: BlockDevice
.results[0].result.BusAddress: str
.results[0].result.DeviceLinks[0]: str
.results[0].result.DeviceName: str
.results[0].result.FilesystemType: str
.results[0].result.HardwareId: str
.results[0].result.InUse: bool
.results[0].result.Label: str
.results[0].result.MountPoint: str
.results[0].result.SerialId: str
.results[0].result.Size: int
.results[0].result.UUID: str
.results[0].result.WWN: str

StorageProvisioner: 4
.VolumeParams()
in: Entities
.entities[0]: Entity
.entities[0].tag: str
out: VolumeParamsResults
.results[0]: VolumeParamsResult
.results[0].error: Error
.results[0].error.code: str
.results[0].error.info["abc"]: dict[Any, Any]
.results[0].error.message: str
.results[0].result: VolumeParams
.results[0].result.attachment: VolumeAttachmentParams
.results[0].result.attachment.instance-id: str
.results[0].result.attachment.machine-tag: str
.results[0].result.attachment.provider: str
.results[0].result.attachment.read-only: bool
.results[0].result.attachment.volume-id: str
.results[0].result.attachment.volume-tag: str
.results[0].result.attributes["abc"]: dict[Any, Any]
.results[0].result.provider: str
.results[0].result.size: int
.results[0].result.tags["abc"]: str
.results[0].result.volume-tag: str

StorageProvisioner: 4
.Volumes()
in: Entities
.entities[0]: Entity
.entities[0].tag: str
out: VolumeResults
.results[0]: VolumeResult
.results[0].error: Error
.results[0].error.code: str
.results[0].error.info["abc"]: dict[Any, Any]
.results[0].error.message: str
.results[0].result: Volume
.results[0].result.info: VolumeInfo
.results[0].result.info.hardware-id: str
.results[0].result.info.persistent: bool
.results[0].result.info.pool: str
.results[0].result.info.size: int
.results[0].result.info.volume-id: str
.results[0].result.info.wwn: str
.results[0].result.volume-tag: str

StorageProvisioner: 4
.WatchApplications()
in: None
out: StringsWatchResult
.changes[0]: str
.error: Error
.error.code: str
.error.info["abc"]: dict[Any, Any]
.error.message: str
.watcher-id: str

StorageProvisioner: 4
.WatchBlockDevices()
in: Entities
.entities[0]: Entity
.entities[0].tag: str
out: NotifyWatchResults
.results[0]: NotifyWatchResult
.results[0].NotifyWatcherId: str
.results[0].error: Error
.results[0].error.code: str
.results[0].error.info["abc"]: dict[Any, Any]
.results[0].error.message: str

StorageProvisioner: 4
.WatchFilesystemAttachments()
in: Entities
.entities[0]: Entity
.entities[0].tag: str
out: MachineStorageIdsWatchResults
.results[0]: MachineStorageIdsWatchResult
.results[0].changes[0]: MachineStorageId
.results[0].changes[0].attachment-tag: str
.results[0].changes[0].machine-tag: str
.results[0].error: Error
.results[0].error.code: str
.results[0].error.info["abc"]: dict[Any, Any]
.results[0].error.message: str
.results[0].watcher-id: str

StorageProvisioner: 4
.WatchFilesystems()
in: Entities
.entities[0]: Entity
.entities[0].tag: str
out: StringsWatchResults
.results[0]: StringsWatchResult
.results[0].changes[0]: str
.results[0].error: Error
.results[0].error.code: str
.results[0].error.info["abc"]: dict[Any, Any]
.results[0].error.message: str
.results[0].watcher-id: str

StorageProvisioner: 4
.WatchMachines()
in: Entities
.entities[0]: Entity
.entities[0].tag: str
out: NotifyWatchResults
.results[0]: NotifyWatchResult
.results[0].NotifyWatcherId: str
.results[0].error: Error
.results[0].error.code: str
.results[0].error.info["abc"]: dict[Any, Any]
.results[0].error.message: str

StorageProvisioner: 4
.WatchVolumeAttachmentPlans()
in: Entities
.entities[0]: Entity
.entities[0].tag: str
out: MachineStorageIdsWatchResults
.results[0]: MachineStorageIdsWatchResult
.results[0].changes[0]: MachineStorageId
.results[0].changes[0].attachment-tag: str
.results[0].changes[0].machine-tag: str
.results[0].error: Error
.results[0].error.code: str
.results[0].error.info["abc"]: dict[Any, Any]
.results[0].error.message: str
.results[0].watcher-id: str

StorageProvisioner: 4
.WatchVolumeAttachments()
in: Entities
.entities[0]: Entity
.entities[0].tag: str
out: MachineStorageIdsWatchResults
.results[0]: MachineStorageIdsWatchResult
.results[0].changes[0]: MachineStorageId
.results[0].changes[0].attachment-tag: str
.results[0].changes[0].machine-tag: str
.results[0].error: Error
.results[0].error.code: str
.results[0].error.info["abc"]: dict[Any, Any]
.results[0].error.message: str
.results[0].watcher-id: str

StorageProvisioner: 4
.WatchVolumes()
in: Entities
.entities[0]: Entity
.entities[0].tag: str
out: StringsWatchResults
.results[0]: StringsWatchResult
.results[0].changes[0]: str
.results[0].error: Error
.results[0].error.code: str
.results[0].error.info["abc"]: dict[Any, Any]
.results[0].error.message: str
.results[0].watcher-id: str

StringsWatcher: 1
.Next()
in: None
out: StringsWatchResult
.changes[0]: str
.error: Error
.error.code: str
.error.info["abc"]: dict[Any, Any]
.error.message: str
.watcher-id: str

StringsWatcher: 1
.Stop()
in: None
out: None

Subnets: 5
.AllZones()
in: None
out: ZoneResults
.results[0]: ZoneResult
.results[0].available: bool
.results[0].error: Error
.results[0].error.code: str
.results[0].error.info["abc"]: dict[Any, Any]
.results[0].error.message: str
.results[0].name: str

Subnets: 5
.ListSubnets()
in: SubnetsFilters
.space-tag: str
.zone: str
out: ListSubnetsResults
.results[0]: Subnet
.results[0].cidr: str
.results[0].life: str
.results[0].provider-id: str
.results[0].provider-network-id: str
.results[0].provider-space-id: str
.results[0].space-tag: str
.results[0].status: str
.results[0].vlan-tag: int
.results[0].zones[0]: str

Subnets: 5
.SubnetsByCIDR()
in: CIDRParams
.cidrs[0]: str
out: SubnetsResults
.results[0]: SubnetsResult
.results[0].error: Error
.results[0].error.code: str
.results[0].error.info["abc"]: dict[Any, Any]
.results[0].error.message: str
.results[0].subnets[0]: SubnetV2
.results[0].subnets[0].Subnet: Subnet
.results[0].subnets[0].Subnet.cidr: str
.results[0].subnets[0].Subnet.life: str
.results[0].subnets[0].Subnet.provider-id: str
.results[0].subnets[0].Subnet.provider-network-id: str
.results[0].subnets[0].Subnet.provider-space-id: str
.results[0].subnets[0].Subnet.space-tag: str
.results[0].subnets[0].Subnet.status: str
.results[0].subnets[0].Subnet.vlan-tag: int
.results[0].subnets[0].Subnet.zones[0]: str
.results[0].subnets[0].cidr: str
.results[0].subnets[0].id: str
.results[0].subnets[0].life: str
.results[0].subnets[0].provider-id: str
.results[0].subnets[0].provider-network-id: str
.results[0].subnets[0].provider-space-id: str
.results[0].subnets[0].space-tag: str
.results[0].subnets[0].status: str
.results[0].subnets[0].vlan-tag: int
.results[0].subnets[0].zones[0]: str

Undertaker: 1
.CloudSpec()
in: Entities
.entities[0]: Entity
.entities[0].tag: str
out: CloudSpecResults
.results[0]: CloudSpecResult
.results[0].error: Error
.results[0].error.code: str
.results[0].error.info["abc"]: dict[Any, Any]
.results[0].error.message: str
.results[0].result: CloudSpec
.results[0].result.cacertificates[0]: str
.results[0].result.credential: CloudCredential
.results[0].result.credential.attrs["abc"]: str
.results[0].result.credential.auth-type: str
.results[0].result.credential.redacted[0]: str
.results[0].result.endpoint: str
.results[0].result.identity-endpoint: str
.results[0].result.is-controller-cloud: bool
.results[0].result.name: str
.results[0].result.region: str
.results[0].result.skip-tls-verify: bool
.results[0].result.storage-endpoint: str
.results[0].result.type: str

Undertaker: 1
.GetCloudSpec()
in: ModelTag
: dict[Any, Any]
out: CloudSpecResult
.error: Error
.error.code: str
.error.info["abc"]: dict[Any, Any]
.error.message: str
.result: CloudSpec
.result.cacertificates[0]: str
.result.credential: CloudCredential
.result.credential.attrs["abc"]: str
.result.credential.auth-type: str
.result.credential.redacted[0]: str
.result.endpoint: str
.result.identity-endpoint: str
.result.is-controller-cloud: bool
.result.name: str
.result.region: str
.result.skip-tls-verify: bool
.result.storage-endpoint: str
.result.type: str

Undertaker: 1
.ModelConfig()
in: None
out: ModelConfigResult
.config["abc"]: dict[Any, Any]

Undertaker: 1
.ModelInfo()
in: None
out: UndertakerModelInfoResult
.error: Error
.error.code: str
.error.info["abc"]: dict[Any, Any]
.error.message: str
.result: UndertakerModelInfo
.result.destroy-timeout: int
.result.force-destroyed: bool
.result.global-name: str
.result.is-system: bool
.result.life: str
.result.name: str
.result.uuid: str

Undertaker: 1
.ProcessDyingModel()
in: None
out: None

Undertaker: 1
.RemoveModel()
in: None
out: None

Undertaker: 1
.SetStatus()
in: SetStatus
.entities[0]: EntityStatusArgs
.entities[0].data["abc"]: dict[Any, Any]
.entities[0].info: str
.entities[0].status: str
.entities[0].tag: str
out: ErrorResults
.results[0]: ErrorResult
.results[0].error: Error
.results[0].error.code: str
.results[0].error.info["abc"]: dict[Any, Any]
.results[0].error.message: str

Undertaker: 1
.WatchCloudSpecsChanges()
in: Entities
.entities[0]: Entity
.entities[0].tag: str
out: NotifyWatchResults
.results[0]: NotifyWatchResult
.results[0].NotifyWatcherId: str
.results[0].error: Error
.results[0].error.code: str
.results[0].error.info["abc"]: dict[Any, Any]
.results[0].error.message: str

Undertaker: 1
.WatchForModelConfigChanges()
in: None
out: NotifyWatchResult
.NotifyWatcherId: str
.error: Error
.error.code: str
.error.info["abc"]: dict[Any, Any]
.error.message: str

Undertaker: 1
.WatchModel()
in: None
out: NotifyWatchResults
.results[0]: NotifyWatchResult
.results[0].NotifyWatcherId: str
.results[0].error: Error
.results[0].error.code: str
.results[0].error.info["abc"]: dict[Any, Any]
.results[0].error.message: str

Undertaker: 1
.WatchModelResources()
in: None
out: NotifyWatchResults
.results[0]: NotifyWatchResult
.results[0].NotifyWatcherId: str
.results[0].error: Error
.results[0].error.code: str
.results[0].error.info["abc"]: dict[Any, Any]
.results[0].error.message: str

UnitAssigner: 1
.AssignUnits()
in: Entities
.entities[0]: Entity
.entities[0].tag: str
out: ErrorResults
.results[0]: ErrorResult
.results[0].error: Error
.results[0].error.code: str
.results[0].error.info["abc"]: dict[Any, Any]
.results[0].error.message: str

UnitAssigner: 1
.SetAgentStatus()
in: SetStatus
.entities[0]: EntityStatusArgs
.entities[0].data["abc"]: dict[Any, Any]
.entities[0].info: str
.entities[0].status: str
.entities[0].tag: str
out: ErrorResults
.results[0]: ErrorResult
.results[0].error: Error
.results[0].error.code: str
.results[0].error.info["abc"]: dict[Any, Any]
.results[0].error.message: str

UnitAssigner: 1
.WatchUnitAssignments()
in: None
out: StringsWatchResult
.changes[0]: str
.error: Error
.error.code: str
.error.info["abc"]: dict[Any, Any]
.error.message: str
.watcher-id: str

Uniter: 19
.APIAddresses()
in: None
out: StringsResult
.error: Error
.error.code: str
.error.info["abc"]: dict[Any, Any]
.error.message: str
.result[0]: str

Uniter: 19
.APIHostPorts()
in: None
out: APIHostPortsResult
.servers[0][0]: HostPort
.servers[0][0].Address: Address
.servers[0][0].Address.cidr: str
.servers[0][0].Address.config-type: str
.servers[0][0].Address.is-secondary: bool
.servers[0][0].Address.scope: str
.servers[0][0].Address.space-id: str
.servers[0][0].Address.space-name: str
.servers[0][0].Address.type: str
.servers[0][0].Address.value: str
.servers[0][0].cidr: str
.servers[0][0].config-type: str
.servers[0][0].is-secondary: bool
.servers[0][0].port: int
.servers[0][0].scope: str
.servers[0][0].space-id: str
.servers[0][0].space-name: str
.servers[0][0].type: str
.servers[0][0].value: str

Uniter: 19
.ActionStatus()
in: Entities
.entities[0]: Entity
.entities[0].tag: str
out: StringResults
.results[0]: StringResult
.results[0].error: Error
.results[0].error.code: str
.results[0].error.info["abc"]: dict[Any, Any]
.results[0].error.message: str
.results[0].result: str

Uniter: 19
.Actions()
in: Entities
.entities[0]: Entity
.entities[0].tag: str
out: ActionResults
.results[0]: ActionResult
.results[0].action: Action
.results[0].action.execution-group: str
.results[0].action.name: str
.results[0].action.parallel: bool
.results[0].action.parameters["abc"]: dict[Any, Any]
.results[0].action.receiver: str
.results[0].action.tag: str
.results[0].completed: str
.results[0].enqueued: str
.results[0].error: Error
.results[0].error.code: str
.results[0].error.info["abc"]: dict[Any, Any]
.results[0].error.message: str
.results[0].log[0]: ActionMessage
.results[0].log[0].message: str
.results[0].log[0].timestamp: str
.results[0].message: str
.results[0].output["abc"]: dict[Any, Any]
.results[0].started: str
.results[0].status: str

Uniter: 19
.AddMetricBatches()
in: MetricBatchParams
.batches[0]: MetricBatchParam
.batches[0].batch: MetricBatch
.batches[0].batch.charm-url: str
.batches[0].batch.created: str
.batches[0].batch.metrics[0]: Metric
.batches[0].batch.metrics[0].key: str
.batches[0].batch.metrics[0].labels["abc"]: str
.batches[0].batch.metrics[0].time: str
.batches[0].batch.metrics[0].value: str
.batches[0].batch.uuid: str
.batches[0].tag: str
out: ErrorResults
.results[0]: ErrorResult
.results[0].error: Error
.results[0].error.code: str
.results[0].error.info["abc"]: dict[Any, Any]
.results[0].error.message: str

Uniter: 19
.ApplicationStatus()
in: Entities
.entities[0]: Entity
.entities[0].tag: str
out: ApplicationStatusResults
.results[0]: ApplicationStatusResult
.results[0].application: StatusResult
.results[0].application.data["abc"]: dict[Any, Any]
.results[0].application.error: Error
.results[0].application.error.code: str
.results[0].application.error.info["abc"]: dict[Any, Any]
.results[0].application.error.message: str
.results[0].application.id: str
.results[0].application.info: str
.results[0].application.life: str
.results[0].application.since: str
.results[0].application.status: str
.results[0].error: Error
.results[0].error.code: str
.results[0].error.info["abc"]: dict[Any, Any]
.results[0].error.message: str
.results[0].units["abc"]: StatusResult
.results[0].units["abc"].data["abc"]: dict[Any, Any]
.results[0].units["abc"].error: Error
.results[0].units["abc"].error.code: str
.results[0].units["abc"].error.info["abc"]: dict[Any, Any]
.results[0].units["abc"].error.message: str
.results[0].units["abc"].id: str
.results[0].units["abc"].info: str
.results[0].units["abc"].life: str
.results[0].units["abc"].since: str
.results[0].units["abc"].status: str

Uniter: 19
.AssignedMachine()
in: Entities
.entities[0]: Entity
.entities[0].tag: str
out: StringResults
.results[0]: StringResult
.results[0].error: Error
.results[0].error.code: str
.results[0].error.info["abc"]: dict[Any, Any]
.results[0].error.message: str
.results[0].result: str

Uniter: 19
.AvailabilityZone()
in: Entities
.entities[0]: Entity
.entities[0].tag: str
out: StringResults
.results[0]: StringResult
.results[0].error: Error
.results[0].error.code: str
.results[0].error.info["abc"]: dict[Any, Any]
.results[0].error.message: str
.results[0].result: str

Uniter: 19
.BeginActions()
in: Entities
.entities[0]: Entity
.entities[0].tag: str
out: ErrorResults
.results[0]: ErrorResult
.results[0].error: Error
.results[0].error.code: str
.results[0].error.info["abc"]: dict[Any, Any]
.results[0].error.message: str

Uniter: 19
.CanApplyLXDProfile()
in: Entities
.entities[0]: Entity
.entities[0].tag: str
out: BoolResults
.results[0]: BoolResult
.results[0].error: Error
.results[0].error.code: str
.results[0].error.info["abc"]: dict[Any, Any]
.results[0].error.message: str
.results[0].result: bool

Uniter: 19
.CharmArchiveSha256()
in: CharmURLs
.urls[0]: CharmURL
.urls[0].url: str
out: StringResults
.results[0]: StringResult
.results[0].error: Error
.results[0].error.code: str
.results[0].error.info["abc"]: dict[Any, Any]
.results[0].error.message: str
.results[0].result: str

Uniter: 19
.CharmModifiedVersion()
in: Entities
.entities[0]: Entity
.entities[0].tag: str
out: IntResults
.results[0]: IntResult
.results[0].error: Error
.results[0].error.code: str
.results[0].error.info["abc"]: dict[Any, Any]
.results[0].error.message: str
.results[0].result: int

Uniter: 19
.CharmURL()
in: Entities
.entities[0]: Entity
.entities[0].tag: str
out: StringBoolResults
.results[0]: StringBoolResult
.results[0].error: Error
.results[0].error.code: str
.results[0].error.info["abc"]: dict[Any, Any]
.results[0].error.message: str
.results[0].ok: bool
.results[0].result: str

Uniter: 19
.ClearResolved()
in: Entities
.entities[0]: Entity
.entities[0].tag: str
out: ErrorResults
.results[0]: ErrorResult
.results[0].error: Error
.results[0].error.code: str
.results[0].error.info["abc"]: dict[Any, Any]
.results[0].error.message: str

Uniter: 19
.CloudAPIVersion()
in: None
out: StringResult
.error: Error
.error.code: str
.error.info["abc"]: dict[Any, Any]
.error.message: str
.result: str

Uniter: 19
.CloudSpec()
in: None
out: CloudSpecResult
.error: Error
.error.code: str
.error.info["abc"]: dict[Any, Any]
.error.message: str
.result: CloudSpec
.result.cacertificates[0]: str
.result.credential: CloudCredential
.result.credential.attrs["abc"]: str
.result.credential.auth-type: str
.result.credential.redacted[0]: str
.result.endpoint: str
.result.identity-endpoint: str
.result.is-controller-cloud: bool
.result.name: str
.result.region: str
.result.skip-tls-verify: bool
.result.storage-endpoint: str
.result.type: str

Uniter: 19
.CommitHookChanges()
in: CommitHookChangesArgs
.args[0]: CommitHookChangesArg
.args[0].add-storage[0]: StorageAddParams
.args[0].add-storage[0].name: str
.args[0].add-storage[0].storage: StorageConstraints
.args[0].add-storage[0].storage.count: int
.args[0].add-storage[0].storage.pool: str
.args[0].add-storage[0].storage.size: int
.args[0].add-storage[0].unit: str
.args[0].close-ports[0]: EntityPortRange
.args[0].close-ports[0].endpoint: str
.args[0].close-ports[0].from-port: int
.args[0].close-ports[0].protocol: str
.args[0].close-ports[0].tag: str
.args[0].close-ports[0].to-port: int
.args[0].open-ports[0]: EntityPortRange
.args[0].open-ports[0].endpoint: str
.args[0].open-ports[0].from-port: int
.args[0].open-ports[0].protocol: str
.args[0].open-ports[0].tag: str
.args[0].open-ports[0].to-port: int
.args[0].pod-spec: PodSpec
.args[0].pod-spec.spec: str
.args[0].pod-spec.tag: str
.args[0].relation-unit-settings[0]: RelationUnitSettings
.args[0].relation-unit-settings[0].application-settings["abc"]: str
.args[0].relation-unit-settings[0].relation: str
.args[0].relation-unit-settings[0].settings["abc"]: str
.args[0].relation-unit-settings[0].unit: str
.args[0].secret-creates[0]: CreateSecretArg
.args[0].secret-creates[0].UpsertSecretArg: UpsertSecretArg
.args[0].secret-creates[0].UpsertSecretArg.content: SecretContentParams
.args[0].secret-creates[0].UpsertSecretArg.content.data["abc"]: str
.args[0].secret-creates[0].UpsertSecretArg.content.value-ref: SecretValueRef
.args[0].secret-creates[0].UpsertSecretArg.content.value-ref.backend-id: str
.args[0].secret-creates[0].UpsertSecretArg.content.value-ref.revision-id: str
.args[0].secret-creates[0].UpsertSecretArg.description: str
.args[0].secret-creates[0].UpsertSecretArg.expire-time: str
.args[0].secret-creates[0].UpsertSecretArg.label: str
.args[0].secret-creates[0].UpsertSecretArg.params["abc"]: dict[Any, Any]
.args[0].secret-creates[0].UpsertSecretArg.rotate-policy: str
.args[0].secret-creates[0].content: SecretContentParams
.args[0].secret-creates[0].content.data["abc"]: str
.args[0].secret-creates[0].content.value-ref: SecretValueRef
.args[0].secret-creates[0].content.value-ref.backend-id: str
.args[0].secret-creates[0].content.value-ref.revision-id: str
.args[0].secret-creates[0].description: str
.args[0].secret-creates[0].expire-time: str
.args[0].secret-creates[0].label: str
.args[0].secret-creates[0].owner-tag: str
.args[0].secret-creates[0].params["abc"]: dict[Any, Any]
.args[0].secret-creates[0].rotate-policy: str
.args[0].secret-creates[0].uri: str
.args[0].secret-deletes[0]: DeleteSecretArg
.args[0].secret-deletes[0].label: str
.args[0].secret-deletes[0].revisions[0]: int
.args[0].secret-deletes[0].uri: str
.args[0].secret-grants[0]: GrantRevokeSecretArg
.args[0].secret-grants[0].role: str
.args[0].secret-grants[0].scope-tag: str
.args[0].secret-grants[0].subject-tags[0]: str
.args[0].secret-grants[0].uri: str
.args[0].secret-revokes[0]: GrantRevokeSecretArg
.args[0].secret-revokes[0].role: str
.args[0].secret-revokes[0].scope-tag: str
.args[0].secret-revokes[0].subject-tags[0]: str
.args[0].secret-revokes[0].uri: str
.args[0].secret-track-latest[0]: str
.args[0].secret-updates[0]: UpdateSecretArg
.args[0].secret-updates[0].UpsertSecretArg: UpsertSecretArg
.args[0].secret-updates[0].UpsertSecretArg.content: SecretContentParams
.args[0].secret-updates[0].UpsertSecretArg.content.data["abc"]: str
.args[0].secret-updates[0].UpsertSecretArg.content.value-ref: SecretValueRef
.args[0].secret-updates[0].UpsertSecretArg.content.value-ref.backend-id: str
.args[0].secret-updates[0].UpsertSecretArg.content.value-ref.revision-id: str
.args[0].secret-updates[0].UpsertSecretArg.description: str
.args[0].secret-updates[0].UpsertSecretArg.expire-time: str
.args[0].secret-updates[0].UpsertSecretArg.label: str
.args[0].secret-updates[0].UpsertSecretArg.params["abc"]: dict[Any, Any]
.args[0].secret-updates[0].UpsertSecretArg.rotate-policy: str
.args[0].secret-updates[0].content: SecretContentParams
.args[0].secret-updates[0].content.data["abc"]: str
.args[0].secret-updates[0].content.value-ref: SecretValueRef
.args[0].secret-updates[0].content.value-ref.backend-id: str
.args[0].secret-updates[0].content.value-ref.revision-id: str
.args[0].secret-updates[0].description: str
.args[0].secret-updates[0].expire-time: str
.args[0].secret-updates[0].label: str
.args[0].secret-updates[0].params["abc"]: dict[Any, Any]
.args[0].secret-updates[0].rotate-policy: str
.args[0].secret-updates[0].uri: str
.args[0].set-raw-k8s-spec: PodSpec
.args[0].set-raw-k8s-spec.spec: str
.args[0].set-raw-k8s-spec.tag: str
.args[0].tag: str
.args[0].unit-state: SetUnitStateArg
.args[0].unit-state.charm-state["abc"]: str
.args[0].unit-state.meter-status-state: str
.args[0].unit-state.relation-state["abc"]: str
.args[0].unit-state.secret-state: str
.args[0].unit-state.storage-state: str
.args[0].unit-state.tag: str
.args[0].unit-state.uniter-state: str
.args[0].update-network-info: bool
out: ErrorResults
.results[0]: ErrorResult
.results[0].error: Error
.results[0].error.code: str
.results[0].error.info["abc"]: dict[Any, Any]
.results[0].error.message: str

Uniter: 19
.ConfigSettings()
in: Entities
.entities[0]: Entity
.entities[0].tag: str
out: ConfigSettingsResults
.results[0]: ConfigSettingsResult
.results[0].error: Error
.results[0].error.code: str
.results[0].error.info["abc"]: dict[Any, Any]
.results[0].error.message: str
.results[0].settings["abc"]: dict[Any, Any]

Uniter: 19
.CreateSecretURIs()
in: CreateSecretURIsArg
.count: int
out: StringResults
.results[0]: StringResult
.results[0].error: Error
.results[0].error.code: str
.results[0].error.info["abc"]: dict[Any, Any]
.results[0].error.message: str
.results[0].result: str

Uniter: 19
.CreateSecrets()
in: CreateSecretArgs
.args[0]: CreateSecretArg
.args[0].UpsertSecretArg: UpsertSecretArg
.args[0].UpsertSecretArg.content: SecretContentParams
.args[0].UpsertSecretArg.content.data["abc"]: str
.args[0].UpsertSecretArg.content.value-ref: SecretValueRef
.args[0].UpsertSecretArg.content.value-ref.backend-id: str
.args[0].UpsertSecretArg.content.value-ref.revision-id: str
.args[0].UpsertSecretArg.description: str
.args[0].UpsertSecretArg.expire-time: str
.args[0].UpsertSecretArg.label: str
.args[0].UpsertSecretArg.params["abc"]: dict[Any, Any]
.args[0].UpsertSecretArg.rotate-policy: str
.args[0].content: SecretContentParams
.args[0].content.data["abc"]: str
.args[0].content.value-ref: SecretValueRef
.args[0].content.value-ref.backend-id: str
.args[0].content.value-ref.revision-id: str
.args[0].description: str
.args[0].expire-time: str
.args[0].label: str
.args[0].owner-tag: str
.args[0].params["abc"]: dict[Any, Any]
.args[0].rotate-policy: str
.args[0].uri: str
out: StringResults
.results[0]: StringResult
.results[0].error: Error
.results[0].error.code: str
.results[0].error.info["abc"]: dict[Any, Any]
.results[0].error.message: str
.results[0].result: str

Uniter: 19
.CurrentModel()
in: None
out: ModelResult
.error: Error
.error.code: str
.error.info["abc"]: dict[Any, Any]
.error.message: str
.name: str
.type: str
.uuid: str

Uniter: 19
.Destroy()
in: Entities
.entities[0]: Entity
.entities[0].tag: str
out: ErrorResults
.results[0]: ErrorResult
.results[0].error: Error
.results[0].error.code: str
.results[0].error.info["abc"]: dict[Any, Any]
.results[0].error.message: str

Uniter: 19
.DestroyAllSubordinates()
in: Entities
.entities[0]: Entity
.entities[0].tag: str
out: ErrorResults
.results[0]: ErrorResult
.results[0].error: Error
.results[0].error.code: str
.results[0].error.info["abc"]: dict[Any, Any]
.results[0].error.message: str

Uniter: 19
.DestroyUnitStorageAttachments()
in: Entities
.entities[0]: Entity
.entities[0].tag: str
out: ErrorResults
.results[0]: ErrorResult
.results[0].error: Error
.results[0].error.code: str
.results[0].error.info["abc"]: dict[Any, Any]
.results[0].error.message: str

Uniter: 19
.EnsureDead()
in: Entities
.entities[0]: Entity
.entities[0].tag: str
out: ErrorResults
.results[0]: ErrorResult
.results[0].error: Error
.results[0].error.code: str
.results[0].error.info["abc"]: dict[Any, Any]
.results[0].error.message: str

Uniter: 19
.EnterScope()
in: RelationUnits
.relation-units[0]: RelationUnit
.relation-units[0].relation: str
.relation-units[0].unit: str
out: ErrorResults
.results[0]: ErrorResult
.results[0].error: Error
.results[0].error.code: str
.results[0].error.info["abc"]: dict[Any, Any]
.results[0].error.message: str

Uniter: 19
.FinishActions()
in: ActionExecutionResults
.results[0]: ActionExecutionResult
.results[0].action-tag: str
.results[0].message: str
.results[0].results["abc"]: dict[Any, Any]
.results[0].status: str
out: ErrorResults
.results[0]: ErrorResult
.results[0].error: Error
.results[0].error.code: str
.results[0].error.info["abc"]: dict[Any, Any]
.results[0].error.message: str

Uniter: 19
.GetConsumerSecretsRevisionInfo()
in: GetSecretConsumerInfoArgs
.consumer-tag: str
.uris[0]: str
out: SecretConsumerInfoResults
.results[0]: SecretConsumerInfoResult
.results[0].error: Error
.results[0].error.code: str
.results[0].error.info["abc"]: dict[Any, Any]
.results[0].error.message: str
.results[0].label: str
.results[0].revision: int

Uniter: 19
.GetMeterStatus()
in: Entities
.entities[0]: Entity
.entities[0].tag: str
out: MeterStatusResults
.results[0]: MeterStatusResult
.results[0].code: str
.results[0].error: Error
.results[0].error.code: str
.results[0].error.info["abc"]: dict[Any, Any]
.results[0].error.message: str
.results[0].info: str

Uniter: 19
.GetPodSpec()
in: Entities
.entities[0]: Entity
.entities[0].tag: str
out: StringResults
.results[0]: StringResult
.results[0].error: Error
.results[0].error.code: str
.results[0].error.info["abc"]: dict[Any, Any]
.results[0].error.message: str
.results[0].result: str

Uniter: 19
.GetPrincipal()
in: Entities
.entities[0]: Entity
.entities[0].tag: str
out: StringBoolResults
.results[0]: StringBoolResult
.results[0].error: Error
.results[0].error.code: str
.results[0].error.info["abc"]: dict[Any, Any]
.results[0].error.message: str
.results[0].ok: bool
.results[0].result: str

Uniter: 19
.GetRawK8sSpec()
in: Entities
.entities[0]: Entity
.entities[0].tag: str
out: StringResults
.results[0]: StringResult
.results[0].error: Error
.results[0].error.code: str
.results[0].error.info["abc"]: dict[Any, Any]
.results[0].error.message: str
.results[0].result: str

Uniter: 19
.GetSecretBackendConfigs()
in: SecretBackendArgs
.backend-ids[0]: str
.for-drain: bool
out: SecretBackendConfigResults
.active-id: str
.results["abc"]: SecretBackendConfigResult
.results["abc"].config: SecretBackendConfig
.results["abc"].config.params["abc"]: dict[Any, Any]
.results["abc"].config.type: str
.results["abc"].draining: bool
.results["abc"].model-controller: str
.results["abc"].model-name: str
.results["abc"].model-uuid: str

Uniter: 19
.GetSecretContentInfo()
in: GetSecretContentArgs
.args[0]: GetSecretContentArg
.args[0].label: str
.args[0].peek: bool
.args[0].refresh: bool
.args[0].uri: str
out: SecretContentResults
.results[0]: SecretContentResult
.results[0].backend-config: SecretBackendConfigResult
.results[0].backend-config.config: SecretBackendConfig
.results[0].backend-config.config.params["abc"]: dict[Any, Any]
.results[0].backend-config.config.type: str
.results[0].backend-config.draining: bool
.results[0].backend-config.model-controller: str
.results[0].backend-config.model-name: str
.results[0].backend-config.model-uuid: str
.results[0].content: SecretContentParams
.results[0].content.data["abc"]: str
.results[0].content.value-ref: SecretValueRef
.results[0].content.value-ref.backend-id: str
.results[0].content.value-ref.revision-id: str
.results[0].error: Error
.results[0].error.code: str
.results[0].error.info["abc"]: dict[Any, Any]
.results[0].error.message: str
.results[0].latest-revision: int

Uniter: 19
.GetSecretMetadata()
in: None
out: ListSecretResults
.results[0]: ListSecretResult
.results[0].access[0]: AccessInfo
.results[0].access[0].role: str
.results[0].access[0].scope-tag: str
.results[0].access[0].target-tag: str
.results[0].create-time: str
.results[0].description: str
.results[0].label: str
.results[0].latest-expire-time: str
.results[0].latest-revision: int
.results[0].next-rotate-time: str
.results[0].owner-tag: str
.results[0].revisions[0]: SecretRevision
.results[0].revisions[0].backend-name: str
.results[0].revisions[0].create-time: str
.results[0].revisions[0].expire-time: str
.results[0].revisions[0].revision: int
.results[0].revisions[0].update-time: str
.results[0].revisions[0].value-ref: SecretValueRef
.results[0].revisions[0].value-ref.backend-id: str
.results[0].revisions[0].value-ref.revision-id: str
.results[0].rotate-policy: str
.results[0].update-time: str
.results[0].uri: str
.results[0].value: SecretValueResult
.results[0].value.data["abc"]: str
.results[0].value.error: Error
.results[0].value.error.code: str
.results[0].value.error.info["abc"]: dict[Any, Any]
.results[0].value.error.message: str
.results[0].version: int

Uniter: 19
.GetSecretRevisionContentInfo()
in: SecretRevisionArg
.pending-delete: bool
.revisions[0]: int
.uri: str
out: SecretContentResults
.results[0]: SecretContentResult
.results[0].backend-config: SecretBackendConfigResult
.results[0].backend-config.config: SecretBackendConfig
.results[0].backend-config.config.params["abc"]: dict[Any, Any]
.results[0].backend-config.config.type: str
.results[0].backend-config.draining: bool
.results[0].backend-config.model-controller: str
.results[0].backend-config.model-name: str
.results[0].backend-config.model-uuid: str
.results[0].content: SecretContentParams
.results[0].content.data["abc"]: str
.results[0].content.value-ref: SecretValueRef
.results[0].content.value-ref.backend-id: str
.results[0].content.value-ref.revision-id: str
.results[0].error: Error
.results[0].error.code: str
.results[0].error.info["abc"]: dict[Any, Any]
.results[0].error.message: str
.results[0].latest-revision: int

Uniter: 19
.GoalStates()
in: Entities
.entities[0]: Entity
.entities[0].tag: str
out: GoalStateResults
.results[0]: GoalStateResult
.results[0].error: Error
.results[0].error.code: str
.results[0].error.info["abc"]: dict[Any, Any]
.results[0].error.message: str
.results[0].result: GoalState
.results[0].result.relations["abc"]["abc"]: GoalStateStatus
.results[0].result.relations["abc"]["abc"].since: str
.results[0].result.relations["abc"]["abc"].status: str
.results[0].result.units["abc"]: GoalStateStatus
.results[0].result.units["abc"].since: str
.results[0].result.units["abc"].status: str

Uniter: 19
.HasSubordinates()
in: Entities
.entities[0]: Entity
.entities[0].tag: str
out: BoolResults
.results[0]: BoolResult
.results[0].error: Error
.results[0].error.code: str
.results[0].error.info["abc"]: dict[Any, Any]
.results[0].error.message: str
.results[0].result: bool

Uniter: 19
.LXDProfileName()
in: Entities
.entities[0]: Entity
.entities[0].tag: str
out: StringResults
.results[0]: StringResult
.results[0].error: Error
.results[0].error.code: str
.results[0].error.info["abc"]: dict[Any, Any]
.results[0].error.message: str
.results[0].result: str

Uniter: 19
.LXDProfileRequired()
in: CharmURLs
.urls[0]: CharmURL
.urls[0].url: str
out: BoolResults
.results[0]: BoolResult
.results[0].error: Error
.results[0].error.code: str
.results[0].error.info["abc"]: dict[Any, Any]
.results[0].error.message: str
.results[0].result: bool

Uniter: 19
.LeaveScope()
in: RelationUnits
.relation-units[0]: RelationUnit
.relation-units[0].relation: str
.relation-units[0].unit: str
out: ErrorResults
.results[0]: ErrorResult
.results[0].error: Error
.results[0].error.code: str
.results[0].error.info["abc"]: dict[Any, Any]
.results[0].error.message: str

Uniter: 19
.Life()
in: Entities
.entities[0]: Entity
.entities[0].tag: str
out: LifeResults
.results[0]: LifeResult
.results[0].error: Error
.results[0].error.code: str
.results[0].error.info["abc"]: dict[Any, Any]
.results[0].error.message: str
.results[0].life: str

Uniter: 19
.LogActionsMessages()
in: ActionMessageParams
.messages[0]: EntityString
.messages[0].tag: str
.messages[0].value: str
out: ErrorResults
.results[0]: ErrorResult
.results[0].error: Error
.results[0].error.code: str
.results[0].error.info["abc"]: dict[Any, Any]
.results[0].error.message: str

Uniter: 19
.Merge()
in: MergeLeadershipSettingsBulkParams
.params[0]: MergeLeadershipSettingsParam
.params[0].application-tag: str
.params[0].settings["abc"]: str
.params[0].unit-tag: str
out: ErrorResults
.results[0]: ErrorResult
.results[0].error: Error
.results[0].error.code: str
.results[0].error.info["abc"]: dict[Any, Any]
.results[0].error.message: str

Uniter: 19
.ModelConfig()
in: None
out: ModelConfigResult
.config["abc"]: dict[Any, Any]

Uniter: 19
.NetworkInfo()
in: NetworkInfoParams
.bindings[0]: str
.relation-id: int
.unit: str
out: NetworkInfoResults
.results["abc"]: NetworkInfoResult
.results["abc"].bind-addresses[0]: NetworkInfo
.results["abc"].bind-addresses[0].addresses[0]: InterfaceAddress
.results["abc"].bind-addresses[0].addresses[0].cidr: str
.results["abc"].bind-addresses[0].addresses[0].hostname: str
.results["abc"].bind-addresses[0].addresses[0].value: str
.results["abc"].bind-addresses[0].interface-name: str
.results["abc"].bind-addresses[0].mac-address: str
.results["abc"].egress-subnets[0]: str
.results["abc"].error: Error
.results["abc"].error.code: str
.results["abc"].error.info["abc"]: dict[Any, Any]
.results["abc"].error.message: str
.results["abc"].ingress-addresses[0]: str

Uniter: 19
.OpenedMachinePortRangesByEndpoint()
in: Entities
.entities[0]: Entity
.entities[0].tag: str
out: OpenPortRangesByEndpointResults
.results[0]: OpenPortRangesByEndpointResult
.results[0].error: Error
.results[0].error.code: str
.results[0].error.info["abc"]: dict[Any, Any]
.results[0].error.message: str
.results[0].unit-port-ranges["abc"][0]: OpenUnitPortRangesByEndpoint
.results[0].unit-port-ranges["abc"][0].endpoint: str
.results[0].unit-port-ranges["abc"][0].port-ranges[0]: PortRange
.results[0].unit-port-ranges["abc"][0].port-ranges[0].from-port: int
.results[0].unit-port-ranges["abc"][0].port-ranges[0].protocol: str
.results[0].unit-port-ranges["abc"][0].port-ranges[0].to-port: int

Uniter: 19
.OpenedPortRangesByEndpoint()
in: None
out: OpenPortRangesByEndpointResults
.results[0]: OpenPortRangesByEndpointResult
.results[0].error: Error
.results[0].error.code: str
.results[0].error.info["abc"]: dict[Any, Any]
.results[0].error.message: str
.results[0].unit-port-ranges["abc"][0]: OpenUnitPortRangesByEndpoint
.results[0].unit-port-ranges["abc"][0].endpoint: str
.results[0].unit-port-ranges["abc"][0].port-ranges[0]: PortRange
.results[0].unit-port-ranges["abc"][0].port-ranges[0].from-port: int
.results[0].unit-port-ranges["abc"][0].port-ranges[0].protocol: str
.results[0].unit-port-ranges["abc"][0].port-ranges[0].to-port: int

Uniter: 19
.PrivateAddress()
in: Entities
.entities[0]: Entity
.entities[0].tag: str
out: StringResults
.results[0]: StringResult
.results[0].error: Error
.results[0].error.code: str
.results[0].error.info["abc"]: dict[Any, Any]
.results[0].error.message: str
.results[0].result: str

Uniter: 19
.ProviderType()
in: None
out: StringResult
.error: Error
.error.code: str
.error.info["abc"]: dict[Any, Any]
.error.message: str
.result: str

Uniter: 19
.PublicAddress()
in: Entities
.entities[0]: Entity
.entities[0].tag: str
out: StringResults
.results[0]: StringResult
.results[0].error: Error
.results[0].error.code: str
.results[0].error.info["abc"]: dict[Any, Any]
.results[0].error.message: str
.results[0].result: str

Uniter: 19
.Read()
in: Entities
.entities[0]: Entity
.entities[0].tag: str
out: GetLeadershipSettingsBulkResults
.results[0]: GetLeadershipSettingsResult
.results[0].error: Error
.results[0].error.code: str
.results[0].error.info["abc"]: dict[Any, Any]
.results[0].error.message: str
.results[0].settings["abc"]: str

Uniter: 19
.ReadLocalApplicationSettings()
in: RelationUnit
.relation: str
.unit: str
out: SettingsResult
.error: Error
.error.code: str
.error.info["abc"]: dict[Any, Any]
.error.message: str
.settings["abc"]: str

Uniter: 19
.ReadRemoteSettings()
in: RelationUnitPairs
.relation-unit-pairs[0]: RelationUnitPair
.relation-unit-pairs[0].local-unit: str
.relation-unit-pairs[0].relation: str
.relation-unit-pairs[0].remote-unit: str
out: SettingsResults
.results[0]: SettingsResult
.results[0].error: Error
.results[0].error.code: str
.results[0].error.info["abc"]: dict[Any, Any]
.results[0].error.message: str
.results[0].settings["abc"]: str

Uniter: 19
.ReadSettings()
in: RelationUnits
.relation-units[0]: RelationUnit
.relation-units[0].relation: str
.relation-units[0].unit: str
out: SettingsResults
.results[0]: SettingsResult
.results[0].error: Error
.results[0].error.code: str
.results[0].error.info["abc"]: dict[Any, Any]
.results[0].error.message: str
.results[0].settings["abc"]: str

Uniter: 19
.Refresh()
in: Entities
.entities[0]: Entity
.entities[0].tag: str
out: UnitRefreshResults
.Results[0]: UnitRefreshResult
.Results[0].Error: Error
.Results[0].Error.code: str
.Results[0].Error.info["abc"]: dict[Any, Any]
.Results[0].Error.message: str
.Results[0].Life: str
.Results[0].Resolved: str
.Results[0].provider-id: str

Uniter: 19
.Relation()
in: RelationUnits
.relation-units[0]: RelationUnit
.relation-units[0].relation: str
.relation-units[0].unit: str
out: RelationResults
.results[0]: RelationResult
.results[0].bool: bool
.results[0].endpoint: Endpoint
.results[0].endpoint.application-name: str
.results[0].endpoint.relation: CharmRelation
.results[0].endpoint.relation.interface: str
.results[0].endpoint.relation.limit: int
.results[0].endpoint.relation.name: str
.results[0].endpoint.relation.optional: bool
.results[0].endpoint.relation.role: str
.results[0].endpoint.relation.scope: str
.results[0].error: Error
.results[0].error.code: str
.results[0].error.info["abc"]: dict[Any, Any]
.results[0].error.message: str
.results[0].id: int
.results[0].key: str
.results[0].life: str
.results[0].other-application: str

Uniter: 19
.RelationById()
in: RelationIds
.relation-ids[0]: int
out: RelationResults
.results[0]: RelationResult
.results[0].bool: bool
.results[0].endpoint: Endpoint
.results[0].endpoint.application-name: str
.results[0].endpoint.relation: CharmRelation
.results[0].endpoint.relation.interface: str
.results[0].endpoint.relation.limit: int
.results[0].endpoint.relation.name: str
.results[0].endpoint.relation.optional: bool
.results[0].endpoint.relation.role: str
.results[0].endpoint.relation.scope: str
.results[0].error: Error
.results[0].error.code: str
.results[0].error.info["abc"]: dict[Any, Any]
.results[0].error.message: str
.results[0].id: int
.results[0].key: str
.results[0].life: str
.results[0].other-application: str

Uniter: 19
.RelationsStatus()
in: Entities
.entities[0]: Entity
.entities[0].tag: str
out: RelationUnitStatusResults
.results[0]: RelationUnitStatusResult
.results[0].error: Error
.results[0].error.code: str
.results[0].error.info["abc"]: dict[Any, Any]
.results[0].error.message: str
.results[0].results[0]: RelationUnitStatus
.results[0].results[0].in-scope: bool
.results[0].results[0].relation-tag: str
.results[0].results[0].suspended: bool

Uniter: 19
.RemoveSecrets()
in: DeleteSecretArgs
.args[0]: DeleteSecretArg
.args[0].label: str
.args[0].revisions[0]: int
.args[0].uri: str
out: ErrorResults
.results[0]: ErrorResult
.results[0].error: Error
.results[0].error.code: str
.results[0].error.info["abc"]: dict[Any, Any]
.results[0].error.message: str

Uniter: 19
.RemoveStorageAttachments()
in: StorageAttachmentIds
.ids[0]: StorageAttachmentId
.ids[0].storage-tag: str
.ids[0].unit-tag: str
out: ErrorResults
.results[0]: ErrorResult
.results[0].error: Error
.results[0].error.code: str
.results[0].error.info["abc"]: dict[Any, Any]
.results[0].error.message: str

Uniter: 19
.RequestReboot()
in: Entities
.entities[0]: Entity
.entities[0].tag: str
out: ErrorResults
.results[0]: ErrorResult
.results[0].error: Error
.results[0].error.code: str
.results[0].error.info["abc"]: dict[Any, Any]
.results[0].error.message: str

Uniter: 19
.Resolved()
in: Entities
.entities[0]: Entity
.entities[0].tag: str
out: ResolvedModeResults
.results[0]: ResolvedModeResult
.results[0].error: Error
.results[0].error.code: str
.results[0].error.info["abc"]: dict[Any, Any]
.results[0].error.message: str
.results[0].mode: str

Uniter: 19
.SLALevel()
in: None
out: StringResult
.error: Error
.error.code: str
.error.info["abc"]: dict[Any, Any]
.error.message: str
.result: str

Uniter: 19
.SecretsGrant()
in: GrantRevokeSecretArgs
.args[0]: GrantRevokeSecretArg
.args[0].role: str
.args[0].scope-tag: str
.args[0].subject-tags[0]: str
.args[0].uri: str
out: ErrorResults
.results[0]: ErrorResult
.results[0].error: Error
.results[0].error.code: str
.results[0].error.info["abc"]: dict[Any, Any]
.results[0].error.message: str

Uniter: 19
.SecretsRevoke()
in: GrantRevokeSecretArgs
.args[0]: GrantRevokeSecretArg
.args[0].role: str
.args[0].scope-tag: str
.args[0].subject-tags[0]: str
.args[0].uri: str
out: ErrorResults
.results[0]: ErrorResult
.results[0].error: Error
.results[0].error.code: str
.results[0].error.info["abc"]: dict[Any, Any]
.results[0].error.message: str

Uniter: 19
.SecretsRotated()
in: SecretRotatedArgs
.args[0]: SecretRotatedArg
.args[0].original-revision: int
.args[0].skip: bool
.args[0].uri: str
out: ErrorResults
.results[0]: ErrorResult
.results[0].error: Error
.results[0].error.code: str
.results[0].error.info["abc"]: dict[Any, Any]
.results[0].error.message: str

Uniter: 19
.SetAgentStatus()
in: SetStatus
.entities[0]: EntityStatusArgs
.entities[0].data["abc"]: dict[Any, Any]
.entities[0].info: str
.entities[0].status: str
.entities[0].tag: str
out: ErrorResults
.results[0]: ErrorResult
.results[0].error: Error
.results[0].error.code: str
.results[0].error.info["abc"]: dict[Any, Any]
.results[0].error.message: str

Uniter: 19
.SetApplicationStatus()
in: SetStatus
.entities[0]: EntityStatusArgs
.entities[0].data["abc"]: dict[Any, Any]
.entities[0].info: str
.entities[0].status: str
.entities[0].tag: str
out: ErrorResults
.results[0]: ErrorResult
.results[0].error: Error
.results[0].error.code: str
.results[0].error.info["abc"]: dict[Any, Any]
.results[0].error.message: str

Uniter: 19
.SetCharmURL()
in: EntitiesCharmURL
.entities[0]: EntityCharmURL
.entities[0].charm-url: str
.entities[0].tag: str
out: ErrorResults
.results[0]: ErrorResult
.results[0].error: Error
.results[0].error.code: str
.results[0].error.info["abc"]: dict[Any, Any]
.results[0].error.message: str

Uniter: 19
.SetRelationStatus()
in: RelationStatusArgs
.args[0]: RelationStatusArg
.args[0].message: str
.args[0].relation-id: int
.args[0].status: str
.args[0].unit-tag: str
out: ErrorResults
.results[0]: ErrorResult
.results[0].error: Error
.results[0].error.code: str
.results[0].error.info["abc"]: dict[Any, Any]
.results[0].error.message: str

Uniter: 19
.SetState()
in: SetUnitStateArgs
.args[0]: SetUnitStateArg
.args[0].charm-state["abc"]: str
.args[0].meter-status-state: str
.args[0].relation-state["abc"]: str
.args[0].secret-state: str
.args[0].storage-state: str
.args[0].tag: str
.args[0].uniter-state: str
out: ErrorResults
.results[0]: ErrorResult
.results[0].error: Error
.results[0].error.code: str
.results[0].error.info["abc"]: dict[Any, Any]
.results[0].error.message: str

Uniter: 19
.SetStatus()
in: SetStatus
.entities[0]: EntityStatusArgs
.entities[0].data["abc"]: dict[Any, Any]
.entities[0].info: str
.entities[0].status: str
.entities[0].tag: str
out: ErrorResults
.results[0]: ErrorResult
.results[0].error: Error
.results[0].error.code: str
.results[0].error.info["abc"]: dict[Any, Any]
.results[0].error.message: str

Uniter: 19
.SetUnitStatus()
in: SetStatus
.entities[0]: EntityStatusArgs
.entities[0].data["abc"]: dict[Any, Any]
.entities[0].info: str
.entities[0].status: str
.entities[0].tag: str
out: ErrorResults
.results[0]: ErrorResult
.results[0].error: Error
.results[0].error.code: str
.results[0].error.info["abc"]: dict[Any, Any]
.results[0].error.message: str

Uniter: 19
.SetUpgradeSeriesUnitStatus()
in: UpgradeSeriesStatusParams
.params[0]: UpgradeSeriesStatusParam
.params[0].entity: Entity
.params[0].entity.tag: str
.params[0].message: str
.params[0].status: str
out: ErrorResults
.results[0]: ErrorResult
.results[0].error: Error
.results[0].error.code: str
.results[0].error.info["abc"]: dict[Any, Any]
.results[0].error.message: str

Uniter: 19
.SetWorkloadVersion()
in: EntityWorkloadVersions
.entities[0]: EntityWorkloadVersion
.entities[0].tag: str
.entities[0].workload-version: str
out: ErrorResults
.results[0]: ErrorResult
.results[0].error: Error
.results[0].error.code: str
.results[0].error.info["abc"]: dict[Any, Any]
.results[0].error.message: str

Uniter: 19
.State()
in: Entities
.entities[0]: Entity
.entities[0].tag: str
out: UnitStateResults
.results[0]: UnitStateResult
.results[0].charm-state["abc"]: str
.results[0].error: Error
.results[0].error.code: str
.results[0].error.info["abc"]: dict[Any, Any]
.results[0].error.message: str
.results[0].meter-status-state: str
.results[0].relation-state["abc"]: str
.results[0].secret-state: str
.results[0].storage-state: str
.results[0].uniter-state: str

Uniter: 19
.StorageAttachmentLife()
in: StorageAttachmentIds
.ids[0]: StorageAttachmentId
.ids[0].storage-tag: str
.ids[0].unit-tag: str
out: LifeResults
.results[0]: LifeResult
.results[0].error: Error
.results[0].error.code: str
.results[0].error.info["abc"]: dict[Any, Any]
.results[0].error.message: str
.results[0].life: str

Uniter: 19
.StorageAttachments()
in: StorageAttachmentIds
.ids[0]: StorageAttachmentId
.ids[0].storage-tag: str
.ids[0].unit-tag: str
out: StorageAttachmentResults
.results[0]: StorageAttachmentResult
.results[0].error: Error
.results[0].error.code: str
.results[0].error.info["abc"]: dict[Any, Any]
.results[0].error.message: str
.results[0].result: StorageAttachment
.results[0].result.kind: int
.results[0].result.life: str
.results[0].result.location: str
.results[0].result.owner-tag: str
.results[0].result.storage-tag: str
.results[0].result.unit-tag: str

Uniter: 19
.UnitStatus()
in: Entities
.entities[0]: Entity
.entities[0].tag: str
out: StatusResults
.results[0]: StatusResult
.results[0].data["abc"]: dict[Any, Any]
.results[0].error: Error
.results[0].error.code: str
.results[0].error.info["abc"]: dict[Any, Any]
.results[0].error.message: str
.results[0].id: str
.results[0].info: str
.results[0].life: str
.results[0].since: str
.results[0].status: str

Uniter: 19
.UnitStorageAttachments()
in: Entities
.entities[0]: Entity
.entities[0].tag: str
out: StorageAttachmentIdsResults
.results[0]: StorageAttachmentIdsResult
.results[0].error: Error
.results[0].error.code: str
.results[0].error.info["abc"]: dict[Any, Any]
.results[0].error.message: str
.results[0].result: StorageAttachmentIds
.results[0].result.ids[0]: StorageAttachmentId
.results[0].result.ids[0].storage-tag: str
.results[0].result.ids[0].unit-tag: str

Uniter: 19
.UpdateNetworkInfo()
in: Entities
.entities[0]: Entity
.entities[0].tag: str
out: ErrorResults
.results[0]: ErrorResult
.results[0].error: Error
.results[0].error.code: str
.results[0].error.info["abc"]: dict[Any, Any]
.results[0].error.message: str

Uniter: 19
.UpdateSecrets()
in: UpdateSecretArgs
.args[0]: UpdateSecretArg
.args[0].UpsertSecretArg: UpsertSecretArg
.args[0].UpsertSecretArg.content: SecretContentParams
.args[0].UpsertSecretArg.content.data["abc"]: str
.args[0].UpsertSecretArg.content.value-ref: SecretValueRef
.args[0].UpsertSecretArg.content.value-ref.backend-id: str
.args[0].UpsertSecretArg.content.value-ref.revision-id: str
.args[0].UpsertSecretArg.description: str
.args[0].UpsertSecretArg.expire-time: str
.args[0].UpsertSecretArg.label: str
.args[0].UpsertSecretArg.params["abc"]: dict[Any, Any]
.args[0].UpsertSecretArg.rotate-policy: str
.args[0].content: SecretContentParams
.args[0].content.data["abc"]: str
.args[0].content.value-ref: SecretValueRef
.args[0].content.value-ref.backend-id: str
.args[0].content.value-ref.revision-id: str
.args[0].description: str
.args[0].expire-time: str
.args[0].label: str
.args[0].params["abc"]: dict[Any, Any]
.args[0].rotate-policy: str
.args[0].uri: str
out: ErrorResults
.results[0]: ErrorResult
.results[0].error: Error
.results[0].error.code: str
.results[0].error.info["abc"]: dict[Any, Any]
.results[0].error.message: str

Uniter: 19
.UpgradeSeriesUnitStatus()
in: Entities
.entities[0]: Entity
.entities[0].tag: str
out: UpgradeSeriesStatusResults
.results[0]: UpgradeSeriesStatusResult
.results[0].error: Error
.results[0].error.code: str
.results[0].error.info["abc"]: dict[Any, Any]
.results[0].error.message: str
.results[0].status: str
.results[0].target: str

Uniter: 19
.Watch()
in: Entities
.entities[0]: Entity
.entities[0].tag: str
out: NotifyWatchResults
.results[0]: NotifyWatchResult
.results[0].NotifyWatcherId: str
.results[0].error: Error
.results[0].error.code: str
.results[0].error.info["abc"]: dict[Any, Any]
.results[0].error.message: str

Uniter: 19
.WatchAPIHostPorts()
in: None
out: NotifyWatchResult
.NotifyWatcherId: str
.error: Error
.error.code: str
.error.info["abc"]: dict[Any, Any]
.error.message: str

Uniter: 19
.WatchActionNotifications()
in: Entities
.entities[0]: Entity
.entities[0].tag: str
out: StringsWatchResults
.results[0]: StringsWatchResult
.results[0].changes[0]: str
.results[0].error: Error
.results[0].error.code: str
.results[0].error.info["abc"]: dict[Any, Any]
.results[0].error.message: str
.results[0].watcher-id: str

Uniter: 19
.WatchConfigSettingsHash()
in: Entities
.entities[0]: Entity
.entities[0].tag: str
out: StringsWatchResults
.results[0]: StringsWatchResult
.results[0].changes[0]: str
.results[0].error: Error
.results[0].error.code: str
.results[0].error.info["abc"]: dict[Any, Any]
.results[0].error.message: str
.results[0].watcher-id: str

Uniter: 19
.WatchConsumedSecretsChanges()
in: Entities
.entities[0]: Entity
.entities[0].tag: str
out: StringsWatchResults
.results[0]: StringsWatchResult
.results[0].changes[0]: str
.results[0].error: Error
.results[0].error.code: str
.results[0].error.info["abc"]: dict[Any, Any]
.results[0].error.message: str
.results[0].watcher-id: str

Uniter: 19
.WatchForModelConfigChanges()
in: None
out: NotifyWatchResult
.NotifyWatcherId: str
.error: Error
.error.code: str
.error.info["abc"]: dict[Any, Any]
.error.message: str

Uniter: 19
.WatchInstanceData()
in: Entities
.entities[0]: Entity
.entities[0].tag: str
out: NotifyWatchResults
.results[0]: NotifyWatchResult
.results[0].NotifyWatcherId: str
.results[0].error: Error
.results[0].error.code: str
.results[0].error.info["abc"]: dict[Any, Any]
.results[0].error.message: str

Uniter: 19
.WatchLeadershipSettings()
in: Entities
.entities[0]: Entity
.entities[0].tag: str
out: NotifyWatchResults
.results[0]: NotifyWatchResult
.results[0].NotifyWatcherId: str
.results[0].error: Error
.results[0].error.code: str
.results[0].error.info["abc"]: dict[Any, Any]
.results[0].error.message: str

Uniter: 19
.WatchMeterStatus()
in: Entities
.entities[0]: Entity
.entities[0].tag: str
out: NotifyWatchResults
.results[0]: NotifyWatchResult
.results[0].NotifyWatcherId: str
.results[0].error: Error
.results[0].error.code: str
.results[0].error.info["abc"]: dict[Any, Any]
.results[0].error.message: str

Uniter: 19
.WatchObsolete()
in: Entities
.entities[0]: Entity
.entities[0].tag: str
out: StringsWatchResult
.changes[0]: str
.error: Error
.error.code: str
.error.info["abc"]: dict[Any, Any]
.error.message: str
.watcher-id: str

Uniter: 19
.WatchRelationUnits()
in: RelationUnits
.relation-units[0]: RelationUnit
.relation-units[0].relation: str
.relation-units[0].unit: str
out: RelationUnitsWatchResults
.results[0]: RelationUnitsWatchResult
.results[0].changes: RelationUnitsChange
.results[0].changes.app-changed["abc"]: int
.results[0].changes.changed["abc"]: UnitSettings
.results[0].changes.changed["abc"].version: int
.results[0].changes.departed[0]: str
.results[0].error: Error
.results[0].error.code: str
.results[0].error.info["abc"]: dict[Any, Any]
.results[0].error.message: str
.results[0].watcher-id: str

Uniter: 19
.WatchSecretRevisionsExpiryChanges()
in: Entities
.entities[0]: Entity
.entities[0].tag: str
out: SecretTriggerWatchResult
.changes[0]: SecretTriggerChange
.changes[0].next-trigger-time: str
.changes[0].revision: int
.changes[0].uri: str
.error: Error
.error.code: str
.error.info["abc"]: dict[Any, Any]
.error.message: str
.watcher-id: str

Uniter: 19
.WatchSecretsRotationChanges()
in: Entities
.entities[0]: Entity
.entities[0].tag: str
out: SecretTriggerWatchResult
.changes[0]: SecretTriggerChange
.changes[0].next-trigger-time: str
.changes[0].revision: int
.changes[0].uri: str
.error: Error
.error.code: str
.error.info["abc"]: dict[Any, Any]
.error.message: str
.watcher-id: str

Uniter: 19
.WatchStorageAttachments()
in: StorageAttachmentIds
.ids[0]: StorageAttachmentId
.ids[0].storage-tag: str
.ids[0].unit-tag: str
out: NotifyWatchResults
.results[0]: NotifyWatchResult
.results[0].NotifyWatcherId: str
.results[0].error: Error
.results[0].error.code: str
.results[0].error.info["abc"]: dict[Any, Any]
.results[0].error.message: str

Uniter: 19
.WatchTrustConfigSettingsHash()
in: Entities
.entities[0]: Entity
.entities[0].tag: str
out: StringsWatchResults
.results[0]: StringsWatchResult
.results[0].changes[0]: str
.results[0].error: Error
.results[0].error.code: str
.results[0].error.info["abc"]: dict[Any, Any]
.results[0].error.message: str
.results[0].watcher-id: str

Uniter: 19
.WatchUnitAddressesHash()
in: Entities
.entities[0]: Entity
.entities[0].tag: str
out: StringsWatchResults
.results[0]: StringsWatchResult
.results[0].changes[0]: str
.results[0].error: Error
.results[0].error.code: str
.results[0].error.info["abc"]: dict[Any, Any]
.results[0].error.message: str
.results[0].watcher-id: str

Uniter: 19
.WatchUnitRelations()
in: Entities
.entities[0]: Entity
.entities[0].tag: str
out: StringsWatchResults
.results[0]: StringsWatchResult
.results[0].changes[0]: str
.results[0].error: Error
.results[0].error.code: str
.results[0].error.info["abc"]: dict[Any, Any]
.results[0].error.message: str
.results[0].watcher-id: str

Uniter: 19
.WatchUnitStorageAttachments()
in: Entities
.entities[0]: Entity
.entities[0].tag: str
out: StringsWatchResults
.results[0]: StringsWatchResult
.results[0].changes[0]: str
.results[0].error: Error
.results[0].error.code: str
.results[0].error.info["abc"]: dict[Any, Any]
.results[0].error.message: str
.results[0].watcher-id: str

Uniter: 19
.WatchUpgradeSeriesNotifications()
in: Entities
.entities[0]: Entity
.entities[0].tag: str
out: NotifyWatchResults
.results[0]: NotifyWatchResult
.results[0].NotifyWatcherId: str
.results[0].error: Error
.results[0].error.code: str
.results[0].error.info["abc"]: dict[Any, Any]
.results[0].error.message: str

Uniter: 19
.WorkloadVersion()
in: Entities
.entities[0]: Entity
.entities[0].tag: str
out: StringResults
.results[0]: StringResult
.results[0].error: Error
.results[0].error.code: str
.results[0].error.info["abc"]: dict[Any, Any]
.results[0].error.message: str
.results[0].result: str

UpgradeSeries: 3
.CurrentSeries()
in: Entities
.entities[0]: Entity
.entities[0].tag: str
out: StringResults
.results[0]: StringResult
.results[0].error: Error
.results[0].error.code: str
.results[0].error.info["abc"]: dict[Any, Any]
.results[0].error.message: str
.results[0].result: str

UpgradeSeries: 3
.FinishUpgradeSeries()
in: UpdateChannelArgs
.args[0]: UpdateChannelArg
.args[0].channel: str
.args[0].force: bool
.args[0].tag: Entity
.args[0].tag.tag: str
out: ErrorResults
.results[0]: ErrorResult
.results[0].error: Error
.results[0].error.code: str
.results[0].error.info["abc"]: dict[Any, Any]
.results[0].error.message: str

UpgradeSeries: 3
.MachineStatus()
in: Entities
.entities[0]: Entity
.entities[0].tag: str
out: UpgradeSeriesStatusResults
.results[0]: UpgradeSeriesStatusResult
.results[0].error: Error
.results[0].error.code: str
.results[0].error.info["abc"]: dict[Any, Any]
.results[0].error.message: str
.results[0].status: str
.results[0].target: str

UpgradeSeries: 3
.PinMachineApplications()
in: None
out: PinApplicationsResults
.results[0]: PinApplicationResult
.results[0].application-name: str
.results[0].error: Error
.results[0].error.code: str
.results[0].error.info["abc"]: dict[Any, Any]
.results[0].error.message: str

UpgradeSeries: 3
.PinnedLeadership()
in: None
out: PinnedLeadershipResult
.error: Error
.error.code: str
.error.info["abc"]: dict[Any, Any]
.error.message: str
.result["abc"][0]: str

UpgradeSeries: 3
.SetInstanceStatus()
in: SetStatus
.entities[0]: EntityStatusArgs
.entities[0].data["abc"]: dict[Any, Any]
.entities[0].info: str
.entities[0].status: str
.entities[0].tag: str
out: ErrorResults
.results[0]: ErrorResult
.results[0].error: Error
.results[0].error.code: str
.results[0].error.info["abc"]: dict[Any, Any]
.results[0].error.message: str

UpgradeSeries: 3
.SetMachineStatus()
in: UpgradeSeriesStatusParams
.params[0]: UpgradeSeriesStatusParam
.params[0].entity: Entity
.params[0].entity.tag: str
.params[0].message: str
.params[0].status: str
out: ErrorResults
.results[0]: ErrorResult
.results[0].error: Error
.results[0].error.code: str
.results[0].error.info["abc"]: dict[Any, Any]
.results[0].error.message: str

UpgradeSeries: 3
.SetUpgradeSeriesUnitStatus()
in: UpgradeSeriesStatusParams
.params[0]: UpgradeSeriesStatusParam
.params[0].entity: Entity
.params[0].entity.tag: str
.params[0].message: str
.params[0].status: str
out: ErrorResults
.results[0]: ErrorResult
.results[0].error: Error
.results[0].error.code: str
.results[0].error.info["abc"]: dict[Any, Any]
.results[0].error.message: str

UpgradeSeries: 3
.StartUnitCompletion()
in: UpgradeSeriesStartUnitCompletionParam
.entities[0]: Entity
.entities[0].tag: str
.message: str
out: ErrorResults
.results[0]: ErrorResult
.results[0].error: Error
.results[0].error.code: str
.results[0].error.info["abc"]: dict[Any, Any]
.results[0].error.message: str

UpgradeSeries: 3
.TargetSeries()
in: Entities
.entities[0]: Entity
.entities[0].tag: str
out: StringResults
.results[0]: StringResult
.results[0].error: Error
.results[0].error.code: str
.results[0].error.info["abc"]: dict[Any, Any]
.results[0].error.message: str
.results[0].result: str

UpgradeSeries: 3
.UnitsCompleted()
in: Entities
.entities[0]: Entity
.entities[0].tag: str
out: EntitiesResults
.results[0]: EntitiesResult
.results[0].entities[0]: Entity
.results[0].entities[0].tag: str
.results[0].error: Error
.results[0].error.code: str
.results[0].error.info["abc"]: dict[Any, Any]
.results[0].error.message: str

UpgradeSeries: 3
.UnitsPrepared()
in: Entities
.entities[0]: Entity
.entities[0].tag: str
out: EntitiesResults
.results[0]: EntitiesResult
.results[0].entities[0]: Entity
.results[0].entities[0].tag: str
.results[0].error: Error
.results[0].error.code: str
.results[0].error.info["abc"]: dict[Any, Any]
.results[0].error.message: str

UpgradeSeries: 3
.UnpinMachineApplications()
in: None
out: PinApplicationsResults
.results[0]: PinApplicationResult
.results[0].application-name: str
.results[0].error: Error
.results[0].error.code: str
.results[0].error.info["abc"]: dict[Any, Any]
.results[0].error.message: str

UpgradeSeries: 3
.UpgradeSeriesUnitStatus()
in: Entities
.entities[0]: Entity
.entities[0].tag: str
out: UpgradeSeriesStatusResults
.results[0]: UpgradeSeriesStatusResult
.results[0].error: Error
.results[0].error.code: str
.results[0].error.info["abc"]: dict[Any, Any]
.results[0].error.message: str
.results[0].status: str
.results[0].target: str

UpgradeSeries: 3
.WatchUpgradeSeriesNotifications()
in: Entities
.entities[0]: Entity
.entities[0].tag: str
out: NotifyWatchResults
.results[0]: NotifyWatchResult
.results[0].NotifyWatcherId: str
.results[0].error: Error
.results[0].error.code: str
.results[0].error.info["abc"]: dict[Any, Any]
.results[0].error.message: str

Upgrader: 1
.DesiredVersion()
in: Entities
.entities[0]: Entity
.entities[0].tag: str
out: VersionResults
.results[0]: VersionResult
.results[0].error: Error
.results[0].error.code: str
.results[0].error.info["abc"]: dict[Any, Any]
.results[0].error.message: str
.results[0].version: Number
.results[0].version.Build: int
.results[0].version.Major: int
.results[0].version.Minor: int
.results[0].version.Patch: int
.results[0].version.Tag: str

Upgrader: 1
.SetTools()
in: EntitiesVersion
.agent-tools[0]: EntityVersion
.agent-tools[0].tag: str
.agent-tools[0].tools: Version
.agent-tools[0].tools.version: Binary
.agent-tools[0].tools.version.Arch: str
.agent-tools[0].tools.version.Build: int
.agent-tools[0].tools.version.Major: int
.agent-tools[0].tools.version.Minor: int
.agent-tools[0].tools.version.Number: Number
.agent-tools[0].tools.version.Number.Build: int
.agent-tools[0].tools.version.Number.Major: int
.agent-tools[0].tools.version.Number.Minor: int
.agent-tools[0].tools.version.Number.Patch: int
.agent-tools[0].tools.version.Number.Tag: str
.agent-tools[0].tools.version.Patch: int
.agent-tools[0].tools.version.Release: str
.agent-tools[0].tools.version.Tag: str
out: ErrorResults
.results[0]: ErrorResult
.results[0].error: Error
.results[0].error.code: str
.results[0].error.info["abc"]: dict[Any, Any]
.results[0].error.message: str

Upgrader: 1
.Tools()
in: Entities
.entities[0]: Entity
.entities[0].tag: str
out: ToolsResults
.results[0]: ToolsResult
.results[0].error: Error
.results[0].error.code: str
.results[0].error.info["abc"]: dict[Any, Any]
.results[0].error.message: str
.results[0].tools[0]: Tools
.results[0].tools[0].sha256: str
.results[0].tools[0].size: int
.results[0].tools[0].url: str
.results[0].tools[0].version: Binary
.results[0].tools[0].version.Arch: str
.results[0].tools[0].version.Build: int
.results[0].tools[0].version.Major: int
.results[0].tools[0].version.Minor: int
.results[0].tools[0].version.Number: Number
.results[0].tools[0].version.Number.Build: int
.results[0].tools[0].version.Number.Major: int
.results[0].tools[0].version.Number.Minor: int
.results[0].tools[0].version.Number.Patch: int
.results[0].tools[0].version.Number.Tag: str
.results[0].tools[0].version.Patch: int
.results[0].tools[0].version.Release: str
.results[0].tools[0].version.Tag: str

Upgrader: 1
.WatchAPIVersion()
in: Entities
.entities[0]: Entity
.entities[0].tag: str
out: NotifyWatchResults
.results[0]: NotifyWatchResult
.results[0].NotifyWatcherId: str
.results[0].error: Error
.results[0].error.code: str
.results[0].error.info["abc"]: dict[Any, Any]
.results[0].error.message: str

VolumeAttachmentPlansWatcher: 1
.Next()
in: None
out: MachineStorageIdsWatchResult
.changes[0]: MachineStorageId
.changes[0].attachment-tag: str
.changes[0].machine-tag: str
.error: Error
.error.code: str
.error.info["abc"]: dict[Any, Any]
.error.message: str
.watcher-id: str

VolumeAttachmentPlansWatcher: 1
.Stop()
in: None
out: None

VolumeAttachmentsWatcher: 2
.Next()
in: None
out: MachineStorageIdsWatchResult
.changes[0]: MachineStorageId
.changes[0].attachment-tag: str
.changes[0].machine-tag: str
.error: Error
.error.code: str
.error.info["abc"]: dict[Any, Any]
.error.message: str
.watcher-id: str

VolumeAttachmentsWatcher: 2
.Stop()
in: None
out: None
